package com.cninsure.payment.service.impl;


import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import payment.api.tx.statement.Tx1810Response;
import payment.api.vo.Tx;

import com.cninsure.payment.dao.PMPaymentDao;
import com.cninsure.payment.entity.Transaction1810;
import com.cninsure.payment.model.BaseModel;
import com.cninsure.payment.model.ReconModel;
import com.cninsure.payment.model.TradeReconResult1810Model;
import com.cninsure.payment.service.ReconciliationService;

/**
 * 对账接口
 *
 */
@Service
public class ReconciliationServiceImpl implements ReconciliationService {

	@Resource
	private PMPaymentDao pmPaymentDao;
	
	@Value("${tx.institutionID}")
	private String txInstitutionID;
	
	@Override
	public BaseModel tradeReconOfZhongJin(ReconModel reconBean) {
		//从1810接口拿到中金接口数据
		TradeReconResult1810Model swModel = new TradeReconResult1810Model();
		swModel.setDate(reconBean.getCheckDate());
		swModel.setInstitutionID("001463");
		WithholdingServiceImpl ws = new WithholdingServiceImpl();
		BaseModel bm = ws.tradeReconResultTx1810(swModel);
		System.out.println(bm.toString());
		//数据处理
		Map<String,Object> map = new HashMap<String,Object>();
		List<Tx> list = new ArrayList<Tx>();
		long amount=0;
		if("success".equals(bm.getStatus())){//接口数据查询成功
			Tx1810Response tx1810 = (Tx1810Response) bm.getResponse();
			//System.out.println(tx1810.getTxList());
			Tx localTx = new Tx();
			for(int i=0;i<tx1810.getTxList().size();i++){//如果是2531接口的则保留记录且得到总保费
				try {
					localTx=tx1810.getTxList().get(i);
					//System.out.println(localTx.toString());
					localTx.setBankNotificationTime(new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" ).format(new SimpleDateFormat("yyyyMMddhhmmss").parse(localTx.getBankNotificationTime())));
					if("2531".equals(localTx.getTxType())){
						amount=amount+localTx.getPayerFee();
						list.add(localTx);
					}
				} catch (ParseException e) {
					e.printStackTrace();
				}
			}
			map.put("amount", amount);
			map.put("txList", list);
			bm.setResponse(map);
		}else{
			return bm;
		}
		return bm;
	}

	@Override
	public Map<String, Object> selectAuditList(Map<String, Object> map) {
//		String platformSel = (String) map.get("platformSel");
		List<Map<String,Object>> list = pmPaymentDao.getPaymentReconList(map);
		long total=list.size();
		for (int i = 0; i < list.size(); i++) {
			Map<String, Object> map2 = list.get(i);
			String payfee =  map2.get("payfee").toString();
			map2.put("payfee",new DecimalFormat("#,##0.00").format(Double.parseDouble(payfee)/100));
		}
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("total", total);
		result.put("rows", list);
		return result;
	}
	@Override
	public List<Map<String,Object>> getPaymentReconList(Map<String, Object> map) {
		return pmPaymentDao.getPaymentReconList(map);
	}
	@Override
	@Scheduled(cron="0 5 0 * * ?")
//	@Scheduled(fixedRate=2000)
	public void updateTodayTransaction1810() {
		System.out.println("----------------------"+"0 5 0 * * ?");
		Map<String, Object> map = new HashMap<String, Object>();
		//String today =getTimeNoHour();
		String today = getYesterday();
//		String today = "2016-07-31";
		String institutionID =txInstitutionID;
		Map<String, Object> txSns = new HashMap<String, Object>();
		List<Transaction1810> listtran = new ArrayList<Transaction1810>();
		Transaction1810 tran;
		map.put("today", today);
		List<Map<String,Object>> list = pmPaymentDao.getTransaction1810List(map);
		if("[]".equals(list.toString())){//当天交易未查询过，所内无当天数据
			List<Tx> listtx = tradeReconOfZhongJin(institutionID,today);
			for(int i=0;i<listtx.size();i++){
				tran = changeToTransaction1810(listtx.get(i));
				tran.setSelectdate(today);
				listtran.add(tran);
			}
			if(!"[]".equals(listtran.toString())){
				pmPaymentDao.insertTran1810(listtran);
			}
		}else{
			for(int i=0;i<list.size();i++){
				Map<String, Object> pay = list.get(i);
				String txSn = (String) pay.get("txSn");
				txSns.put(txSn, txSn);
			}
			List<Tx> listtx = tradeReconOfZhongJin(institutionID,today);
			for(int i=0;i<listtx.size();i++){
				Tx tx = listtx.get(i);
				if(!txSns.containsKey(tx.getTxSn())){//保存对应的交易
					tran = changeToTransaction1810(tx);
					tran.setSelectdate(today);
					listtran.add(tran);
				}
			}
			if(!"[]".equals(listtran.toString())){
				pmPaymentDao.insertTran1810(listtran);
			}
		}
	}
	
	 /**
	  * 得到当前日期的前一天
	  * @return
	  */
	private  String getYesterday() {
		Date date = new Date();
      SimpleDateFormat sdf =   new SimpleDateFormat( "yyyy-MM-dd" );
      Calendar   calendar   =   new   GregorianCalendar();
      calendar.setTime(date);
      calendar.add(calendar.DATE,-1);//把日期往后增加一天.整数往后推,负数往前移动
      date=calendar.getTime();   //这个时间就是日期往后推一天的结果
      String strdate = sdf.format(date);
      return strdate;
	}
	//数据转换
	private Transaction1810 changeToTransaction1810(Tx tx) {
		Transaction1810 tran = new Transaction1810();
		tran.setBankNotificationTime(tx.getBankNotificationTime());
		tran.setInstitutionAmount(String.valueOf(tx.getInstitutionAmount()));
		tran.setInstitutionFee(String.valueOf(tx.getInstitutionFee()));
		tran.setPayerFee(String.valueOf(tx.getPayerFee()));
		tran.setPaymentAmount(String.valueOf(tx.getPaymentAmount()));
		tran.setRemark(tx.getRemark());
		tran.setSettlementFlag(tx.getSettlementFlag());
		tran.setTxAmount(String.valueOf(tx.getTxAmount()));
		tran.setTxSn(tx.getTxSn());
		tran.setTxType(tx.getTxType());
		return tran;
	}

	/**
	 * 得到查询日期中那个日期的2531接口的交易数据
	 * @param institutionID机构代码
	 * @param selectDate查询日期
	 * @return
	 */
	public List<Tx> tradeReconOfZhongJin(String institutionID,String selectDate) {
		//从1810接口拿到中金接口数据
		TradeReconResult1810Model swModel = new TradeReconResult1810Model();
		swModel.setDate(selectDate);
		swModel.setInstitutionID(institutionID);
		WithholdingServiceImpl ws = new WithholdingServiceImpl();
		BaseModel bm = ws.tradeReconResultTx1810(swModel);
		//数据处理
		List<Tx> list = new ArrayList<Tx>();
		long amount=0;
		if("success".equals(bm.getStatus())){//接口数据查询成功
			Tx1810Response tx1810 = (Tx1810Response) bm.getResponse();
			//System.out.println(tx1810.getTxList());
			Tx localTx = new Tx();
			for(int i=0;i<tx1810.getTxList().size();i++){//如果是2531接口的则保留记录且得到总保费
				try {
					localTx=tx1810.getTxList().get(i);
					//System.out.println(localTx.toString());
					localTx.setBankNotificationTime(new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" ).format(new SimpleDateFormat("yyyyMMddhhmmss").parse(localTx.getBankNotificationTime())));
					if("2531".equals(localTx.getTxType())){
						amount=amount+localTx.getPayerFee();
						list.add(localTx);
					}
				} catch (ParseException e) {
					e.printStackTrace();
				}
			}
		}else{
			return list;
		}
		return list;
	}
	
	/** 
     * 返回系统当前时间 
     * @return String 
     */ 
    public String getTimeNoHour(){ 
	    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); 
	    return dateFormat.format(new Date()); 
    }

	@Override
	public Map<String, Object> selectAuditDetailList(Map<String, Object> map) {
		List<Map<String,Object>> list = pmPaymentDao.getPaymentReconDetailList(map);
		long total=list.size();
		for (int i = 0; i < list.size(); i++) {
			Map<String, Object> map2 = list.get(i);
			int payfee = Integer.parseInt( map2.get("payfee").toString());
			map2.put("payfee",new DecimalFormat("#,##0.00").format(new BigDecimal(payfee).movePointLeft(2)));
		}
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("total", total);
		result.put("rows", list);
		return result;
	} 

	@Override
	public List<Map<String,Object>> downAuditDetailList(Map<String, Object> map) {
		List<Map<String,Object>> list = pmPaymentDao.getPaymentReconDetailList(map);
		for (int i = 0; i < list.size(); i++) {
			Map<String, Object> map2 = list.get(i);
			int payfee = Integer.parseInt( map2.get("payfee").toString());
			map2.put("payfee",new DecimalFormat("#,##0.00").format(new BigDecimal(payfee).movePointLeft(2)));
			int txAmount = Integer.parseInt( map2.get("txAmount").toString());
			map2.put("txAmount",new DecimalFormat("#,##0.00").format(new BigDecimal(txAmount).movePointLeft(2)));
		}
		return list;
	}
public static void main(String[] args) {
	System.out.println(new DecimalFormat("#,##0.00").format(new BigDecimal(5000).movePointLeft(2)));
}
	
	
}
