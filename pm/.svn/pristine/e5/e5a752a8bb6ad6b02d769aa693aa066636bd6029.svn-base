package com.cninsure.payment.util;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.ByteArrayInputStream;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.UnsupportedEncodingException;import java.net.HttpURLConnection;import java.net.URL;import java.net.URLEncoder;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.dom4j.Document;import org.dom4j.Element;import org.dom4j.io.SAXReader;import org.json.JSONObject;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.cninsure.core.tools.util.ValidateUtil;public class WxPayHelper {	Logger logger=LoggerFactory.getLogger(WxPayHelper.class);	private HashMap<String, String> parameters = new HashMap<String, String>();	private String AppId=ValidateUtil.getConfigValue("wxScanCode.appid");	private String AppKey ;	private String SignType;	private String PartnerId=ValidateUtil.getConfigValue("wxScanCode.mch_id");	private String PartnerKey=ValidateUtil.getConfigValue("wxScanCode.mch_key");	private String unifiedorder = ValidateUtil.getConfigValue("unifiedorder_url");	private String orderquery = ValidateUtil.getConfigValue("orderquery_url");		public String getPartnerId() {		return PartnerId;	}	public void setPartnerId(String partnerId) {		PartnerId = partnerId;	}	public void SetAppId(String str) {		AppId = str;	}	public void SetAppKey(String str) {		AppKey = str;	}	public void SetSignType(String str) {		SignType = str;	}	public void SetPartnerKey(String str) {		PartnerKey = str;	}	public void SetParameter(String key, String value) {		parameters.put(key, value);	}	public String GetParameter(String key) {		return parameters.get(key);	}	public String getClientIP(HttpServletRequest request) {		String ip = request.getHeader("x-forwarded-for");		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("Proxy-Client-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("WL-Proxy-Client-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getRemoteAddr();		}		if (ip != null && ip.length() > 0 && ip.indexOf(",") > 0) {			ip = ip.substring(0, ip.indexOf(","));		}		return ip;	}	private Boolean CheckCftParameters() {		if (parameters.get("bank_type") == "" || parameters.get("body") == ""				|| parameters.get("partner") == ""				|| parameters.get("out_trade_no") == ""				|| parameters.get("total_fee") == ""				|| parameters.get("fee_type") == ""				|| parameters.get("notify_url") == null				|| parameters.get("spbill_create_ip") == ""				|| parameters.get("input_charset") == "") {			return false;		}		return true;	}	public String GetCftPackage() throws Exception {		if ("" == PartnerKey) {			throw new Exception("密钥不能为空！");		}		String unSignParaString = CommonUtil.FormatBizQueryParaMap(parameters,				false);		String paraString = CommonUtil.FormatBizQueryParaMap(parameters, true);		return paraString + "&sign="				+ MD5SignUtil.Sign(unSignParaString, PartnerKey);	}		/**	 * 	 * @param bizObj	 * @return	 * @throws Exception	 */	public String GetSignOfMD5(HashMap<String, String> bizObj)			throws Exception {		if ("" == PartnerKey) {			throw new Exception("密钥不能为空！");		}		String unSignParaString = CommonUtil.FormatQueryParaMap(bizObj,false);		logger.info("===unSignParaString===="+unSignParaString);		return MD5SignUtil.Sign(unSignParaString, PartnerKey).toUpperCase();	}		/**	 * 	 * @param bizObj	 * @return	 * @throws Exception	 */	public String GetBizSignOfMD5(HashMap<String, String> bizObj)			throws Exception {		if ("" == PartnerKey) {			throw new Exception("密钥不能为空！");		}		String unSignParaString = CommonUtil.FormatBizQueryParaMap(bizObj,false);		logger.info("===unSignParaString===="+unSignParaString);		return MD5SignUtil.Sign(unSignParaString, PartnerKey).toUpperCase();	}	public String GetBizSign(HashMap<String, String> bizObj)			throws Exception {		HashMap<String, String> bizParameters = new HashMap<String, String>();		List<Map.Entry<String, String>> infoIds = new ArrayList<Map.Entry<String, String>>(				bizObj.entrySet());		Collections.sort(infoIds, new Comparator<Map.Entry<String, String>>() {			public int compare(Map.Entry<String, String> o1,					Map.Entry<String, String> o2) {				return (o1.getKey()).toString().compareTo(o2.getKey());			}		});		for (int i = 0; i < infoIds.size(); i++) {			Map.Entry<String, String> item = infoIds.get(i);			if (item.getKey() != "") {				bizParameters.put(item.getKey().toLowerCase(), item.getValue());			}		}		if (AppKey == "") {			throw new Exception("APPKEY为空！");		}		bizParameters.put("appkey", AppKey);		String bizString = CommonUtil.FormatBizQueryParaMap(bizParameters,				false);		//System.out.println(bizString);		return Sha1Util.Sha1(bizString);	}	// 生成app支付请求json	/*	 * { "appid":"wwwwb4f85f3a797777", "traceid":"crestxu",	 * "noncestr":"111112222233333", "package":	 * "bank_type=WX&body=XXX&fee_type=1&input_charset=GBK&notify_url=http%3a%2f%2f	 * www	 * .qq.com&out_trade_no=16642817866003386000&partner=1900000109&spbill_create_ip	 * =127.0.0.1&total_fee=1&sign=BEEF37AD19575D92E191C1E4B1474CA9",	 * "timestamp":1381405298,	 * "app_signature":"53cca9d47b883bd4a5c85a9300df3da0cb48565c",	 * "sign_method":"sha1" }	 */	public String CreateAppPackage(String traceid) throws Exception {		HashMap<String, String> nativeObj = new HashMap<String, String>();		if (CheckCftParameters() == false) {			throw new Exception("生成package参数缺失！");		}		nativeObj.put("appid", AppId);		nativeObj.put("package", GetCftPackage());		nativeObj.put("timestamp", Long.toString(new Date().getTime()/1000));		nativeObj.put("traceid", traceid);		nativeObj.put("noncestr", CommonUtil.CreateNoncestr());		nativeObj.put("app_signature", GetBizSign(nativeObj));		nativeObj.put("sign_method", SignType);		return net.sf.json.JSONObject.fromObject(nativeObj).toString();	}	// 生成jsapi支付请求json	/*	 * "appId" : "wxf8b4f85f3a794e77", //公众号名称，由商户传入 "timeStamp" : "189026618",	 * //时间戳这里随意使用了一个值 "nonceStr" : "adssdasssd13d", //随机串 "package" :	 * "bank_type=WX&body=XXX&fee_type=1&input_charset=GBK&notify_url=http%3a%2f	 * %2fwww.qq.com&out_trade_no=16642817866003386000&partner=1900000109&	 * spbill_create_i	 * p=127.0.0.1&total_fee=1&sign=BEEF37AD19575D92E191C1E4B1474CA9",	 * //扩展字段，由商户传入 "signType" : "SHA1", //微信签名方式:sha1 "paySign" :	 * "7717231c335a05165b1874658306fa431fe9a0de" //微信签名	 */	public String CreateBizPackage() throws Exception {		HashMap<String, String> nativeObj = new HashMap<String, String>();		if (CheckCftParameters() == false) {			throw new Exception("生成package参数缺失！");		}		nativeObj.put("appId", AppId);		nativeObj.put("package", GetCftPackage());		nativeObj.put("timeStamp", Long.toString(new Date().getTime()/1000));		nativeObj.put("nonceStr", CommonUtil.CreateNoncestr());		nativeObj.put("paySign", GetBizSign(nativeObj));		nativeObj.put("signType", SignType);		return new JSONObject(nativeObj).toString();	}	// 生成原生支付url	/*	 * weixin://wxpay/bizpayurl?sign=XXXXX&appid=XXXXXX&productid=XXXXXX&timestamp	 * =XXXXXX&noncestr=XXXXXX	 */	public String CreateNativeUrl(String productid) throws Exception {		String bizString = "";		try {			HashMap<String, String> nativeObj = new HashMap<String, String>();			nativeObj.put("appid", AppId);			nativeObj.put("productid", URLEncoder.encode(productid, "utf-8"));			nativeObj.put("timestamp", Long.toString(new Date().getTime()/1000));			nativeObj.put("noncestr", CommonUtil.CreateNoncestr());			nativeObj.put("sign", GetBizSign(nativeObj));			bizString = CommonUtil.FormatBizQueryParaMap(nativeObj, false);					} catch (Exception e) {			throw new Exception(e.getMessage());		}		return "weixin://wxpay/bizpayurl?" + bizString;	}	// 生成原生支付请求xml	/*	 * <xml> <AppId><![CDATA[wwwwb4f85f3a797777]]></AppId>	 * <Package><![CDATA[a=1&url=http%3A%2F%2Fwww.qq.com]]></Package>	 * <TimeStamp> 1369745073</TimeStamp>	 * <NonceStr><![CDATA[iuytxA0cH6PyTAVISB28]]></NonceStr>	 * <RetCode>0</RetCode> <RetErrMsg><![CDATA[ok]]></ RetErrMsg>	 * <AppSignature><![CDATA[53cca9d47b883bd4a5c85a9300df3da0cb48565c]]>	 * </AppSignature> <SignMethod><![CDATA[sha1]]></ SignMethod > </xml>	 */	public String CreateNativePackage(String retcode, String reterrmsg) throws Exception {		HashMap<String, String> nativeObj = new HashMap<String, String>();		if (CheckCftParameters() == false && retcode == "0") {			throw new Exception("生成package参数缺失！");		}		nativeObj.put("AppId", AppId);		nativeObj.put("Package", GetCftPackage());		nativeObj.put("TimeStamp", Long.toString(new Date().getTime()/1000));		nativeObj.put("RetCode", retcode);		nativeObj.put("RetErrMsg", reterrmsg);		nativeObj.put("NonceStr", CommonUtil.CreateNoncestr());		nativeObj.put("AppSignature", GetBizSign(nativeObj));		nativeObj.put("SignMethod", SignType);		return CommonUtil.ArrayToXml(nativeObj);	}		/**	 * 统一支付接口类 生成接口参数xml	 */	public String createUnifiedOrder_Xml() throws Exception	{			//检测必填参数			if(this.parameters.get("out_trade_no") == null) 			{				throw new Exception("缺少统一支付接口必填参数out_trade_no！");			}else if(this.parameters.get("body") == null){				throw new Exception("缺少统一支付接口必填参数body！");			}else if (this.parameters.get("total_fee") == null ) {				throw new Exception("缺少统一支付接口必填参数total_fee！");			}else if (this.parameters.get("notify_url") == null) {				throw new Exception("缺少统一支付接口必填参数notify_url！");			}else if (this.parameters.get("trade_type") == null) {				throw new Exception("缺少统一支付接口必填参数trade_type！");			}else if (this.parameters.get("trade_type") == "JSAPI" &&				this.parameters.get("openid") == null){				throw new Exception("统一支付接口中，缺少必填参数openid！trade_type为JSAPI时，openid为必填参数！");			}else if (this.parameters.get("spbill_create_ip") == null) {//终端ip	    				throw new Exception("缺少统一支付接口必填参数spbill_create_ip！");			}		   	this.parameters.put("appid",this.AppId);//公众账号ID		   	this.parameters.put("mch_id",this.PartnerId);//商户号		    this.parameters.put("nonce_str", CommonUtil.CreateNoncestr());//随机字符串		    this.parameters.put("sign",this.GetBizSignOfMD5(this.parameters));//签名		    return  CommonUtil.ArrayToXml(this.parameters);		}		/**	 * 对款请求参数生成	 * @return	 * @throws Exception	 */	public String createRefund_xml() throws Exception {		//检测必填参数		if(this.parameters.get("out_trade_no") == null && this.parameters.get("transaction_id") == null) 		{			throw new Exception("商户订单号out_trade_no或微信订单号transaction_id不能都为空！");		}else if (this.parameters.get("total_fee") == null ) {			throw new Exception("订单金额total_fee不能为空！");		}else if (this.parameters.get("refund_fee") == null ) {			throw new Exception("退款金额refund_fee不能为空！");		} else if(this.parameters.get("out_refund_no") == null ) {			throw new Exception("商户退款单号out_refund_no不能为空！");		}	   	this.parameters.put("appid",this.AppId);//公众账号ID	   	this.parameters.put("mch_id",this.PartnerId);//商户号	    this.parameters.put("nonce_str", CommonUtil.CreateNoncestr());//随机字符串	    this.parameters.put("sign",this.GetBizSignOfMD5(this.parameters));//签名	    return  CommonUtil.ArrayToXml(this.parameters);			}		public String getOrderQueryXml(String orderId) throws Exception{	 	this.parameters.put("appid",this.AppId);	 	this.parameters.put("mch_id",this.PartnerId);	 	this.parameters.put("out_trade_no",orderId);	 	this.parameters.put("nonce_str",CommonUtil.CreateNoncestr());	 	this.parameters.put("sign",this.GetBizSignOfMD5(this.parameters));		return CommonUtil.ArrayToXml(this.parameters);	}		/**	 * 发送数据请求 统一支付接口	 * 返回响应字符串	 * @return	 */	public String requestUnifiedorder(String con){		HttpURLConnection httpURLConnection = null;		BufferedWriter out = null;		BufferedReader reader = null;		try {			if (!com.cninsure.core.utils.StringUtil.isEmpty(unifiedorder)) {				URL httPost = new URL(unifiedorder);				httpURLConnection = (HttpURLConnection) httPost						.openConnection();				httpURLConnection.setDoOutput(true);// 打开写入属性				httpURLConnection.setDoInput(true);// 打开读取属性				httpURLConnection.setRequestMethod("POST");// 设置提交方法				httpURLConnection.setConnectTimeout(50000);// 连接超时时间				httpURLConnection.setReadTimeout(50000);				httpURLConnection.connect();				out = new BufferedWriter(new OutputStreamWriter(						httpURLConnection.getOutputStream(), "UTF-8"));				out.write(con);				out.flush();				// 读取post之后的返回值				reader = new BufferedReader(new InputStreamReader(						(InputStream) httpURLConnection.getInputStream(),						"UTF-8"));				String line = null;				StringBuilder sb = new StringBuilder();				while ((line = reader.readLine()) != null) {					sb.append(line);				}				return sb.toString();			} else {				return null;			}		} catch (Throwable e) {			e.printStackTrace();			return null;		} finally {			if (out != null) {				try {					out.close();				} catch (Exception e) {					logger.info(e.getMessage());				}			}			if (reader != null) {				try {					reader.close();				} catch (Exception e) {					logger.info(e.getMessage());				}			}			if (httpURLConnection != null) {				try {					httpURLConnection.disconnect();				} catch (Exception e) {					logger.info(e.getMessage());				}			}		}			}		/**	 * 微信退款申请	 * @return	 */	public String refund(String request_xml){				return com.common.HttpClientUtil.doPostSSL("https://api.mch.weixin.qq.com/secapi/pay/refund", request_xml);	}			public String requestorderquery(String con){		HttpURLConnection httpURLConnection = null;		BufferedWriter out = null;		BufferedReader reader = null;		try {			if (!com.cninsure.core.utils.StringUtil.isEmpty(orderquery)) {				URL httPost = new URL(orderquery);				httpURLConnection = (HttpURLConnection) httPost						.openConnection();				httpURLConnection.setDoOutput(true);// 打开写入属性				httpURLConnection.setDoInput(true);// 打开读取属性				httpURLConnection.setRequestMethod("POST");// 设置提交方法				httpURLConnection.setConnectTimeout(50000);// 连接超时时间				httpURLConnection.setReadTimeout(50000);				httpURLConnection.connect();				out = new BufferedWriter(new OutputStreamWriter(						httpURLConnection.getOutputStream(), "UTF-8"));				out.write(con);				out.flush();				// 读取post之后的返回值				reader = new BufferedReader(new InputStreamReader(						(InputStream) httpURLConnection.getInputStream(),						"UTF-8"));				String line = null;				StringBuilder sb = new StringBuilder();				while ((line = reader.readLine()) != null) {					sb.append(line);				}				return sb.toString();			} else {				return null;			}		} catch (Throwable e) {			e.printStackTrace();			return null;		} finally {			if (out != null) {				try {					out.close();				} catch (Exception e) {					logger.info(e.getMessage());				}			}			if (reader != null) {				try {					reader.close();				} catch (Exception e) {					logger.info(e.getMessage());				}			}			if (httpURLConnection != null) {				try {					httpURLConnection.disconnect();				} catch (Exception e) {					logger.info(e.getMessage());				}			}		}			}		/**      * 解析微信发来的请求（XML）      *       * @param request      * @return      * @throws Exception      */    public static Map<String, String> parseXmlByString(String xmlContent) throws Exception {     	return parseXmlByStream(String2InputStream(xmlContent));    }    /**     *      * @param str     * @return     */    public static InputStream String2InputStream(String str){    	ByteArrayInputStream stream = null;		try {			stream = new ByteArrayInputStream(str.getBytes("UTF-8"));		} catch (UnsupportedEncodingException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}    	       	   return stream;    }    /**      * 解析微信发来的请求（XML）      *       * @param request      * @return      * @throws Exception      */      public static Map<String, String> parseXmlByStream(InputStream inputStream) throws Exception {          // 将解析结果存储在HashMap中          Map<String, String> map = new HashMap<String, String>();            // 从request中取得输入流  //        InputStream inputStream = request.getInputStream();          // 读取输入流          SAXReader reader = new SAXReader();          reader.setEncoding("UTF-8");        Document document = reader.read(inputStream);                  // 得到xml根元素          Element root = document.getRootElement();          // 得到根元素的所有子节点          List<Element> elementList = root.elements();            // 遍历所有子节点          for (Element e : elementList)              map.put(e.getName(), e.getText());            // 释放资源          inputStream.close();          inputStream = null;            return map;      }  }