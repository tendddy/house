package com.cninsure.payment.controller.manager;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import payment.tools.util.StringUtil;

import com.cninsure.core.exception.ControllerException;
import com.cninsure.core.utils.BeanUtils;
import com.cninsure.payment.entity.PMLogRecords;
import com.cninsure.payment.model.BindCardModel;
import com.cninsure.payment.model.OrderPaymentModel;
import com.cninsure.payment.service.PMBankcardService;
import com.cninsure.payment.service.PMPaymentService;
import com.cninsure.system.entity.INSCUser;
import com.common.PagingParams;

@Controller
@RequestMapping("/directpay/*")
public class DirectPayController {
	@Resource
	private PMBankcardService bankcardService;
	@Resource
	private PMPaymentService paymentService;
	@Autowired
	private HttpServletRequest request;

	/**
	 * 
	 * @return
	 * @throws ControllerException
	 */
	@RequestMapping(value = "list", method = RequestMethod.GET)
	public ModelAndView showPolicyTongJi() throws ControllerException {
		ModelAndView mav = new ModelAndView("payment/directpay2011");
		return mav;
	}

	@RequestMapping(value = "initdirectpaymentlist", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> initDirectPaymentList(@ModelAttribute PagingParams para,@ModelAttribute OrderPaymentModel orderPaymentModel)
			throws ControllerException {
		if (orderPaymentModel != null) {
			if (orderPaymentModel.getPlatformName() != null && orderPaymentModel.getPlatformName().equals("")) {
				orderPaymentModel.setPlatformName(null);
			}
			if (orderPaymentModel.getAppOrderId() != null && orderPaymentModel.getAppOrderId().equals("")) {
				orderPaymentModel.setAppOrderId(null);
			}
			if (orderPaymentModel.getOrderid() != null && orderPaymentModel.getOrderid().equals("")) {
				orderPaymentModel.setOrderid(null);
			}
			if (orderPaymentModel.getProtocolid() != null && orderPaymentModel.getProtocolid().equals("")) {
				orderPaymentModel.setProtocolid(null);
			}
			if (orderPaymentModel.getPayProtocolid() != null && orderPaymentModel.getPayProtocolid().equals("")) {
				orderPaymentModel.setPayProtocolid(null);
			}
			if (orderPaymentModel.getOrderfee() != null && orderPaymentModel.getOrderfee().equals("")) {
				orderPaymentModel.setOrderfee(null);
			}
			if (orderPaymentModel.getAppUserId() != null && orderPaymentModel.getAppUserId().equals("")) {
				orderPaymentModel.setAppUserId(null);
			}
			if (orderPaymentModel.getStatus() != null && orderPaymentModel.getStatus().equals("")) {
				orderPaymentModel.setStatus(null);
			}
			if (orderPaymentModel.getStartdate() != null && orderPaymentModel.getStartdate().equals("")) {
				orderPaymentModel.setStartdate(null);
			}
			if (orderPaymentModel.getEnddate() != null && orderPaymentModel.getEnddate().equals("")) {
				orderPaymentModel.setEnddate(null);
			}
			if(StringUtil.isNotEmpty(orderPaymentModel.getStartdate())){
				orderPaymentModel.setStartdate(orderPaymentModel.getStartdate().replace("-", "")+"000000");
			}
			if(StringUtil.isNotEmpty(orderPaymentModel.getEnddate())){
				orderPaymentModel.setEnddate(orderPaymentModel.getEnddate().replace("-", "")+"235959");
			}
			if (StringUtil.isNotEmpty(orderPaymentModel.getOrderfee())) {
				orderPaymentModel.setOrderfee(new DecimalFormat("######").format(new BigDecimal(orderPaymentModel.getOrderfee()).movePointRight(2)));
			}
		}

		Map<String, Object> map = BeanUtils.toMap(orderPaymentModel, para);
		return paymentService.selectDirectPayment2011List(map);
	}

	// 跳转到绑卡日志信息查看页面
	@RequestMapping(value = "directpay2011Detail", method = RequestMethod.GET)
	@ResponseBody
	public ModelAndView directPayment2011Detail(@ModelAttribute PagingParams para,@ModelAttribute  OrderPaymentModel orderPaymentModel)
			throws ControllerException {
		Map<String, Object> map = BeanUtils.toMap(orderPaymentModel, para);
		map.put("interface_name", "单笔代收");
		PMLogRecords pmLogRecords = paymentService.getLogRecordsInfoByPaymentID(map);
		ModelAndView mav = new ModelAndView("payment/directpay2011Detail");
		mav.addObject("paymentid", orderPaymentModel.getPaymentid());
		if(pmLogRecords!=null){
			mav.addObject("request_params", pmLogRecords.getRequestParams());
			mav.addObject("response_params", pmLogRecords.getResponseParams());
			mav.addObject("id", pmLogRecords.getId());
			mav.addObject("remark", pmLogRecords.getRemark());
		}else{
			mav.addObject("request_params", null);
			mav.addObject("response_params", null);
			mav.addObject("id", null);
			mav.addObject("remark", null);
		}
		return mav;
	}
	/**
	 * 再次访问
	 * @return
	 */
	@RequestMapping(value = "visitagain", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> visitAgain(@ModelAttribute PagingParams para,@ModelAttribute BindCardModel bindcardModel,
			HttpServletRequest request,HttpSession session) {
		INSCUser loginUser = (INSCUser) session.getAttribute("insc_user");
		Map<String, Object> result = new HashMap<String, Object>();
		Map<String, Object> map = BeanUtils.toMap(bindcardModel, para);
		map.put("interface_name", "单笔代收");
		result = paymentService.visitAgain2011(map,loginUser,request);
		return result;
	}
	
}
