package com.cninsure.payment.communication.weixin.sender;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map.Entry;

import javax.net.ssl.SSLContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.http.HttpEntity;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLContextBuilder;
import org.apache.http.conn.ssl.TrustStrategy;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;

import com.alibaba.fastjson.JSONObject;
import com.common.SysParams;

public class PaymentMessageSender {
	private static Log log = LogFactory.getLog(PaymentMessageSender.class);
	
	public static final String makeWxOrderURL="https://openapi-test.qfpay.com/trade/v1/payment";
	
	
	public static JSONObject sendPostMessage(String url,
			HashMap<String, String> params,String sign)
	{
		try
		{
			SSLContext sslContext = new SSLContextBuilder().loadTrustMaterial(
					null, 
					new TrustStrategy() {
						// 信任所有
						public boolean isTrusted(
								X509Certificate[] chain,
								String authType) throws CertificateException
						{

							return true;

						}

					}).build();

			SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(
					sslContext);

			CloseableHttpClient client = HttpClients.custom()
					.setSSLSocketFactory(sslsf).build();
			
			HttpPost post = new HttpPost();
		
			
	        List<BasicNameValuePair> nvps = new ArrayList<BasicNameValuePair>();	      
	        
	        for (Entry<String, String> entry : params.entrySet()) {
	        	nvps.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
	        }
	        
	        
	        post.setEntity(new UrlEncodedFormEntity(nvps, "utf-8"));

//			StringEntity entity=new StringEntity(request,"UTF-8");
//			post.setEntity(entity);
			
			//post.setHeader("Content-Type", "application/x-www-form-urlencoded");
			post.addHeader("X-QF-APPCODE", SysParams.APP_CODE);
			post.addHeader("X-QF-SIGN", sign);
			post.setURI(
					new URI(
							url
						));
			
			CloseableHttpResponse resp=client.execute(post);
			HttpEntity rspEntity = resp.getEntity();        
		    String responseStr = EntityUtils.toString(rspEntity, "utf-8");
		    post.releaseConnection();
			return (JSONObject) JSONObject.parse(responseStr);
			
		}
		catch (KeyManagementException e)
		{

			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);

		}
		catch (NoSuchAlgorithmException e)
		{

			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);

		}
		catch (KeyStoreException e)
		{

			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);

		}
		catch (URISyntaxException e)
		{
			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);
		}
		catch (ClientProtocolException e)
		{
			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);
		}
		catch (IOException e)
		{
			log.error("发送消息到微信服务器失败，消息输出失败",e);
		}

		return null;
	}
}
