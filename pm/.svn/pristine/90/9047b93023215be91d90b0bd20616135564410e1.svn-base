package com.cninsure.payment.service.impl;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cninsure.core.dao.BaseDao;
import com.cninsure.core.dao.impl.BaseServiceImpl;
import com.cninsure.core.utils.StringUtil;
import com.cninsure.payment.dao.PMAppchannelDao;
import com.cninsure.payment.dao.PMApppaymentDao;
import com.cninsure.payment.dao.PMBankcardDao;
import com.cninsure.payment.dao.PMBanksDao;
import com.cninsure.payment.dao.PMPaychannelDao;
import com.cninsure.payment.dao.PMPaymentplatformDao;
import com.cninsure.payment.entity.PMBanks;
import com.cninsure.payment.entity.PMPaymentplatform;
import com.cninsure.payment.model.PaymentPlatformModel;
import com.cninsure.payment.model.QueryPaymentPlatFormModel;
import com.cninsure.payment.model.ShowBankCardModel;
import com.cninsure.payment.service.PMPaymentplatformService;

@Service
@Transactional
public class PMPaymentplatformServiceImpl extends BaseServiceImpl<PMPaymentplatform,Long> implements PMPaymentplatformService {
	@Resource
	private PMPaymentplatformDao pmPaymentplatformDao;
	@Resource
	private PMApppaymentDao apppaymentDao;
	@Resource
	private PMPaychannelDao paychannelDao;
	@Resource
	private PMBankcardDao bankcardDao;
	@Resource
	private PMBanksDao banksDao;
	@Resource
	private PMAppchannelDao appchannelDao;

	@Override
	protected BaseDao<PMPaymentplatform,Long> getBaseDao() {
		return pmPaymentplatformDao;
	}
	
	@Override
	public PaymentPlatformModel getPayment(QueryPaymentPlatFormModel queryModel) {
		PaymentPlatformModel ppModel = new PaymentPlatformModel(); 
		//查询出应用平台可支付的银行信息
		List<PMBanks> allPmBanks = banksDao.selectUsefulBanksByCount(17);
		
		//绑卡信息得到当前支付平台已绑信息 
		List<ShowBankCardModel> bindBanks = banksDao.selectBanksByAppUser(queryModel.getAppUserId());
		ppModel.setAllBanks(allPmBanks);
		ppModel.setBindBanks(bindBanks);
		//ppModel.setPaymentPlateformId(queryModel.getPaymentPlatformId());
		
		return ppModel;
	}
	
	@Override
	public List<PMBanks> getAllBanks() {
		return banksDao.selectAllUsefulBanks();
	}

	@Override
	public Map<String, Object> initProtocolList(Map<String, Object> map) {
		long total = pmPaymentplatformDao.getConfigListCount(map);
		List<Map<Object, Object>> infoList = pmPaymentplatformDao.selectConfigList(map);
		System.out.println(infoList.toString());
		for (int i = 0; i < infoList.size(); i++) {
			Map<Object, Object> map2 = infoList.get(i);
			Object status = map2.get("status");
			if(status!=null&&!"".equals(status)){
				if(status.equals("0")){
					map2.put("status", "启用");
				}else if(status.equals("1")){
					map2.put("status", "禁用");
				}
			}
		}
		System.out.println("ConfigList结果：-----------" + infoList);
		map.put("total", total);
		map.put("rows", infoList);
		return map;
	}

	@Override
	public Map<String, Object> saveOrUpdateProtocolInfo(PMPaymentplatform pmpaymentplatform) {
		if(StringUtil.isEmpty(pmpaymentplatform.getId())){
			pmpaymentplatform.setPlatformNo("ZPT");
			pmpaymentplatform.setMinimumAmount(pmpaymentplatform.getMinimumAmount().replace(",", ""));
			pmpaymentplatform.setMaximumAmount(pmpaymentplatform.getMaximumAmount().replace(",", ""));
			pmpaymentplatform.setMinimumAmount(new DecimalFormat("####").format(new BigDecimal(pmpaymentplatform.getMinimumAmount()).movePointRight(2)));
			pmpaymentplatform.setMaximumAmount(new DecimalFormat("####").format(new BigDecimal(pmpaymentplatform.getMaximumAmount()).movePointRight(2)));
			pmPaymentplatformDao.saveProtocol(pmpaymentplatform);
			DecimalFormat df1 = new DecimalFormat("00");
			pmpaymentplatform.setPlatformNo("ZPT"+ df1.format(pmpaymentplatform.getId()) );
			pmPaymentplatformDao.updateProtocolName(pmpaymentplatform);
		}else{
			pmpaymentplatform.setMinimumAmount(pmpaymentplatform.getMinimumAmount().replace(",", ""));
			pmpaymentplatform.setMaximumAmount(pmpaymentplatform.getMaximumAmount().replace(",", ""));
			pmpaymentplatform.setMinimumAmount(new DecimalFormat("####").format(new BigDecimal(pmpaymentplatform.getMinimumAmount()).movePointRight(2)));
			pmpaymentplatform.setMaximumAmount(new DecimalFormat("####").format(new BigDecimal(pmpaymentplatform.getMaximumAmount()).movePointRight(2)));
			pmPaymentplatformDao.updateProtocol(pmpaymentplatform);
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("id", pmpaymentplatform.getId());
		map.put("platformNo",pmpaymentplatform.getPlatformNo());
		map.put("platformName", pmpaymentplatform.getPlatformName());
		map.put("status", pmpaymentplatform.getStatus());
		map.put("settlementType", pmpaymentplatform.getSettlementType());
		map.put("settlementInterval", pmpaymentplatform.getSettlementInterval());
		map.put("ppType", pmpaymentplatform.getPpType());
		map.put("settlementBank", pmpaymentplatform.getSettlementBank());
		map.put("settlementCard", pmpaymentplatform.getSettlementCard());
		map.put("minimumAmount",new DecimalFormat("#,##0.00").format(new BigDecimal(pmpaymentplatform.getMinimumAmount()).movePointLeft(2)));
		map.put("maximumAmount",new DecimalFormat("#,##0.00").format(new BigDecimal(pmpaymentplatform.getMaximumAmount()).movePointLeft(2)));
		map.put("settlementParty", pmpaymentplatform.getSettlementParty());
		return map;
	}

	@Override
	public PMPaymentplatform getProtocolList(String id) {
		return pmPaymentplatformDao.getProtocolList(id);
	}

	@Override
	public Map<String, Object> selectProtocolInfo(PMPaymentplatform pmpaymentplatform) {
		Map<String, Object> map = new HashMap<String, Object>();
		pmpaymentplatform = pmPaymentplatformDao.getProtocolList(String.valueOf(pmpaymentplatform.getId()));
		map.put("protocolid", pmpaymentplatform.getId());
		map.put("platformNo", pmpaymentplatform.getPlatformNo());
		map.put("platformName", pmpaymentplatform.getPlatformName());
		map.put("status", pmpaymentplatform.getStatus());
		map.put("ppType", pmpaymentplatform.getPpType());
		map.put("settlementType", pmpaymentplatform.getSettlementType());
		map.put("settlementInterval", pmpaymentplatform.getSettlementInterval());
		map.put("settlementBank", pmpaymentplatform.getSettlementBank());
		map.put("settlementCard", pmpaymentplatform.getSettlementCard());
		map.put("minimumAmount",new DecimalFormat("#,##0.00").format(new BigDecimal(pmpaymentplatform.getMinimumAmount()).movePointLeft(2)));
		map.put("maximumAmount",new DecimalFormat("#,##0.00").format(new BigDecimal(pmpaymentplatform.getMaximumAmount()).movePointLeft(2)));
		map.put("settlementParty", pmpaymentplatform.getSettlementParty());
		return map;
	}
	
	public static void main(String[] args) {
		System.out.println(new DecimalFormat("#,##0.00").format(new BigDecimal(0).movePointLeft(2)));
	}

}