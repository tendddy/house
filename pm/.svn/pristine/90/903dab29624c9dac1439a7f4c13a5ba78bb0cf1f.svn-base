package com.cninsure.payment.service.impl;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import org.springframework.stereotype.Service;

import payment.api.tx.realgathering.Tx2011Request;
import payment.api.tx.realgathering.Tx2011Response;
import payment.api.tx.realgathering.Tx2020Request;
import payment.api.tx.realgathering.Tx2020Response;
import payment.api.tx.statement.Tx1810Request;
import payment.api.tx.statement.Tx1810Response;
import payment.tools.util.StringUtil;

import com.cninsure.core.utils.UUIDUtils;
import com.cninsure.payment.model.BaseModel;
import com.cninsure.payment.model.SingleWithhold2011Model;
import com.cninsure.payment.model.SingleWithhold2018Model;
import com.cninsure.payment.model.SingleWithhold2020Model;
import com.cninsure.payment.model.TradeReconResult1810Model;
import com.cninsure.payment.service.WithholdingService;
import com.cninsure.payment.util.TxCore;

/**
 * 客户支付操作
 *
 */
@Service
public class WithholdingServiceImpl implements WithholdingService {

	/**
	 * 2011-单笔代扣请求
	 * 
	 * @param pcModel
	 * @return (返回代扣结果)
	 */
	@Override
	public BaseModel singleWithholdingRequestTx2011(SingleWithhold2011Model swModel) {
		BaseModel result = new BaseModel();

		// 生更交易流水号
		String txSN = UUIDUtils.random();
		swModel.setTxSN(txSN);

		// TODO pm数据保存
		try {
			Tx2011Request txRequest = setTx2011Request(swModel);
			String[] respMsg = TxCore.handlerParam(txRequest, "2011","单笔代收");
			
			Tx2011Response zhongjinResponse = new Tx2011Response(respMsg[0], respMsg[1]);
			if ("2000".equals(zhongjinResponse.getCode())) {
				result.setMessage("支付成功");
				result.setStatus("success");
				result.setResponse(zhongjinResponse);
			} else {
				result.setMessage("支付失败");
				result.setStatus("fail");
				result.setResponse(zhongjinResponse.getMessage());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return result;
	}
	/**
	 * 2018-单笔代扣结果通知
	 * @param pcModel
	 * @return (返回代扣结果)
	 */
	@Override
	public BaseModel singleWithholdingResultTx2018(SingleWithhold2018Model swModel) {
		BaseModel result = new BaseModel();
		//TODO tx2018request和tx2018response类文件包内没有

		return result;
	}
	/**
	 * Tx2020-单笔代扣交易查询（同步交易）
	 * @param pcModel
	 * @return (返回查询结果)
	 */
	@Override
	public BaseModel singleWithholdingTradeResultTx2020(SingleWithhold2020Model swModel) {
		BaseModel result = new BaseModel();

		// TODO pm数据保存
		try {
			Tx2020Request txRequest = setTx2020Request(swModel);
			String[] respMsg = TxCore.handlerParam(txRequest, "2020","单笔代扣交易查询");
			
			Tx2020Response zhongjinResponse = new Tx2020Response(respMsg[0], respMsg[1]);
			if ("2000".equals(zhongjinResponse.getCode())) {
				result.setMessage("查询成功");
				result.setStatus("success");
				result.setResponse(zhongjinResponse);
			} else {
				result.setMessage("查询失败");
				result.setStatus("fail");
				result.setResponse(zhongjinResponse.getMessage());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	/**
	 * Tx1810-交易对账单（同步交易）
	 * @param pcModel
	 * @return (返回查询结果)
	 */
	@Override
	public BaseModel tradeReconResultTx1810(TradeReconResult1810Model swModel) {
		BaseModel result = new BaseModel();

		// TODO pm数据保存
		try {
			Tx1810Request txRequest = setTx1810Request(swModel);
			String[] respMsg = TxCore.handlerParam(txRequest, "1810","交易对账单");
			
			Tx1810Response zhongjinResponse = new Tx1810Response(respMsg[0], respMsg[1]);
			if ("2000".equals(zhongjinResponse.getCode())) {
				result.setMessage("查询成功");
				result.setStatus("success");
				result.setResponse(zhongjinResponse);
			} else {
				result.setMessage("查询失败");
				result.setStatus("fail");
				result.setResponse(zhongjinResponse.getMessage());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	/**
	 * 数据判断交由前段录入页面控制后端不再做校验
	 * 
	 * 主要是一些可填项不能为null判断
	 * 
	 * @param swModel
	 * @return
	 */
	private Tx2011Request setTx2011Request(SingleWithhold2011Model swModel) {
		Tx2011Request tx2011Request = new Tx2011Request();
		tx2011Request.setInstitutionID(swModel.getInstitutionID());
		tx2011Request.setTxSN(swModel.getTxSN());
		tx2011Request.setAmount(StringUtil.isEmpty(swModel.getAmount()) ? 0l
				: Long.parseLong(swModel.getAmount()));
		tx2011Request.setBankID(swModel.getBankID());
		tx2011Request.setCvn2(swModel.getCvn2());
		tx2011Request.setValidDate(swModel.getValidDate());
		tx2011Request.setAccountName(swModel.getAccountName());
		tx2011Request.setAccountNumber(swModel.getAccountNumber());
		tx2011Request.setBranchName(swModel.getBranchName());
		tx2011Request
				.setAccountType(Integer.parseInt(swModel.getAccountType()));
		tx2011Request.setProvince(swModel.getProvince());
		tx2011Request.setCity(swModel.getCity());
		tx2011Request.setNote(swModel.getNote());
		tx2011Request.setPhoneNumber(swModel.getPhoneNumber());
		tx2011Request.setEmail(swModel.getEmail());
		tx2011Request
				.setIdentificationNumber(swModel.getIdentificationNumber());
		tx2011Request.setIdentificationType(swModel.getIdentificationType());
		tx2011Request.setContractUserID(swModel.getContractUserID());
		tx2011Request.setSettlementFlag(swModel.getSettlementFlag());

		return tx2011Request;
	}
	private Tx2020Request setTx2020Request(SingleWithhold2020Model swModel) {
		Tx2020Request tx2020Request = new Tx2020Request();
		tx2020Request.setInstitutionID(swModel.getInstitutionID());
		tx2020Request.setTxSN(swModel.getTxSN());

		return tx2020Request;
	}
	private Tx1810Request setTx1810Request(TradeReconResult1810Model swModel) {
		Tx1810Request tx1810Request = new Tx1810Request();
		try {
			tx1810Request.setInstitutionID(swModel.getInstitutionID());
			tx1810Request.setDate(new SimpleDateFormat("yyyy-MM-dd").parse(swModel.getDate()));
		} catch (ParseException e) {
			e.printStackTrace();
		}

		return tx1810Request;
	}
	
	
}
