package com.cninsure.payment.controller.manager;


import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.cninsure.core.exception.ControllerException;
import com.cninsure.core.utils.BeanUtils;
import com.cninsure.core.utils.StringUtil;
import com.cninsure.payment.model.PlatformModel;
import com.cninsure.payment.service.PMPaymentService;
import com.cninsure.payment.util.LogDateUtil;
import com.common.PagingParams;
@Controller
@RequestMapping("/reconciliation/*")
public class PlatformController {
	@Resource
	private PMPaymentService pmpaymentService;
	@Autowired
	private HttpServletRequest request;


	/**
	 * 跳转到总平台对账页面
	 * @return
	 * @throws ControllerException
	 */
	@RequestMapping(value="list",method=RequestMethod.GET)
	public ModelAndView showPolicyTongJi()throws ControllerException{
		ModelAndView mav = new ModelAndView("payment/platformReconciliation");
		return mav;
	}


	//总平台对账页面 列表查看	
	@RequestMapping(value = "initplatformlist", method = RequestMethod.GET)
	@ResponseBody
	public Map<String,Object> initPlatformList(@ModelAttribute PagingParams para,@ModelAttribute PlatformModel platformModel)
					throws ControllerException {
		if(platformModel!=null){
			if(platformModel.getQuerydate()!=null&&platformModel.getQuerydate().equals("")){
				platformModel.setQuerydate(null);
			}
			if(platformModel.getQuerymonth()!=null&&platformModel.getQuerymonth().equals("")){
				platformModel.setQuerymonth(null);
			}
			if(StringUtil.isNotEmpty(platformModel.getQuerydate())){
				platformModel.setStartdate(platformModel.getQuerydate());
				platformModel.setEnddate(platformModel.getQuerydate());
			}
			if(StringUtil.isNotEmpty(platformModel.getQuerymonth())){
				platformModel.setStartdate(platformModel.getQuerymonth()+"-01");
				platformModel.setEnddate(LogDateUtil.getLastDateOfMonth(platformModel.getQuerymonth()));
			}
			if(StringUtil.isEmpty(platformModel.getQuerymonth())&&StringUtil.isEmpty(platformModel.getQuerydate())){
				return null;
			}
		}
		
		Map<String, Object> map = BeanUtils.toMap(platformModel,para);
		return pmpaymentService.selectPlatformList(map);
	}
	//跳转到详细查询页面
	@RequestMapping(value = "detailquery", method = RequestMethod.GET)
	@ResponseBody
	public ModelAndView toBeDetailQsuery(@ModelAttribute PagingParams para,@ModelAttribute PlatformModel platformModel)
					throws ControllerException {
		ModelAndView mav = new ModelAndView("payment/detailquery");
		if(StringUtil.isNotEmpty(platformModel.getQuerymonth())){
			platformModel.setStartdate(platformModel.getQuerymonth()+"-01");
			platformModel.setEnddate(LogDateUtil.getLastDateOfMonth(platformModel.getQuerymonth()));
		}
		Map<String,Object> moneys = pmpaymentService.getTotalMoneys(platformModel);
		mav.addObject("totalFormoneys", new DecimalFormat("#,##0.00").format(new BigDecimal(String.valueOf(moneys.get("forMoneys"))).movePointLeft(2)));
		mav.addObject("totalOutmoneys", new DecimalFormat("#,##0.00").format(new BigDecimal(String.valueOf(moneys.get("outMoneys"))).movePointLeft(2)));
		mav.addObject("platformid", platformModel.getId());
		mav.addObject("querydate", platformModel.getQuerydate());
		mav.addObject("startdateup", platformModel.getStartdate());
		mav.addObject("enddatedown", platformModel.getEnddate());
		return mav;
	}
	//详细查询页面订单列表
	@RequestMapping(value = "initorderslist", method = RequestMethod.GET)
	@ResponseBody
	public Map<String,Object> initOrdersList(
			@ModelAttribute PagingParams para,@ModelAttribute PlatformModel platformModel)
					throws ControllerException {
		if(platformModel!=null){
			if(platformModel.getPayprotocolid()!=null&&platformModel.getPayprotocolid().equals("")){
				platformModel.setPayprotocolid(null);
			}
			if(platformModel.getOrderid()!=null&&platformModel.getOrderid().equals("")){
				platformModel.setOrderid(null);
			}
			if(platformModel.getStartdate()!=null&&platformModel.getStartdate().equals("")){
				platformModel.setStartdate(null);
			}
			if(platformModel.getEnddate()!=null&&platformModel.getEnddate().equals("")){
				platformModel.setEnddate(null);
			}
		}
		
		Map<String, Object> map = BeanUtils.toMap(platformModel,para);
		return pmpaymentService.selectOrdersList(map);
	}
//	//保存支付平台
//	@RequestMapping(value = "saveprotocol", method = RequestMethod.POST)
//	@ResponseBody
//	public Map<String,Object> saveProtocolInfo(@ModelAttribute PagingParams para,@ModelAttribute PMPaymentplatform pmpaymentplatform)
//				throws ControllerException {
//		return PMPaymentplatformservice.saveOrUpdateProtocolInfo(pmpaymentplatform);
//	}
	
}
