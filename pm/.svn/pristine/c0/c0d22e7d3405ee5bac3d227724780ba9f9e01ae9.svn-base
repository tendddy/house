package com.cninsure.payment.communication.weixin.sender;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Iterator;
import java.util.Map;

import javax.net.ssl.SSLContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.http.HttpEntity;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLContextBuilder;
import org.apache.http.conn.ssl.TrustStrategy;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import com.alibaba.fastjson.JSONObject;

public class MessageSender
{
	public static final String toCustomerURL="https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token=";

	public static final String toArtificerURL ="https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token=";
	
	public static final String getCustomerToken="https://api.weixin.qq.com/sns/oauth2/access_token";
	
	public static final String getCustomerInfo="https://api.weixin.qq.com/sns/userinfo";
	

	
	private static Log log = LogFactory.getLog(MessageSender.class);
	public static JSONObject postMessage(String url,JSONObject requestBody)
	{
		return sendPostMessage(url,requestBody,GetAccessToken.getAccessToken());
		
	}
	public static JSONObject postArtificerMessage(String url,
			JSONObject requestBody) {
		return sendPostMessage(url,requestBody,GetAccessToken.getAccessToken());
		
	}
	
	public static JSONObject sendGetMessage(String url,Map<String,String> params)
	{
		JSONObject rspObject=null;
		try
		{
			SSLContext sslContext = new SSLContextBuilder().loadTrustMaterial(
					null, 
					new TrustStrategy() {
						// 信任所有
						public boolean isTrusted(
								X509Certificate[] chain,
								String authType) throws CertificateException
						{

							return true;

						}

					}).build();

			SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(
					sslContext);

			CloseableHttpClient client = HttpClients.custom()
					.setSSLSocketFactory(sslsf).build();
			
			HttpGet get= new HttpGet();
			
			StringBuilder sb=new StringBuilder();
			sb.append(url);
			Boolean isFirst=true;
			Iterator<String> it=params.keySet().iterator();
			while(it.hasNext())
			{
				String key=it.next();
				String value=params.get(key);
				
				if (isFirst)
					sb.append("?");
				else
					sb.append("&");
				sb.append(key);
				sb.append("=");
				sb.append(value);
				
				isFirst=false;
			}
			
			
			
			get.setURI(
					new URI(
							sb.toString()
						));
			
			CloseableHttpResponse resp=client.execute(get);
			HttpEntity entity = resp.getEntity();        
		    String responseStr = EntityUtils.toString(entity, "utf-8");
		    get.releaseConnection();
		    return JSONObject.parseObject(responseStr);
			
		}
		catch (KeyManagementException e)
		{

			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);

		}
		catch (NoSuchAlgorithmException e)
		{

			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);

		}
		catch (KeyStoreException e)
		{

			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);

		}
		catch (URISyntaxException e)
		{
			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);
		}
		catch (ClientProtocolException e)
		{
			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);
		}
		catch (IOException e)
		{
			log.error("发送消息到微信服务器失败，消息输出失败",e);
		}

		return rspObject;
		
	}
	
	private static JSONObject sendPostMessage(String url,
			JSONObject requestBody,String token)
	{
		JSONObject rspObject=null;
		try
		{
			SSLContext sslContext = new SSLContextBuilder().loadTrustMaterial(
					null, 
					new TrustStrategy() {
						// 信任所有
						public boolean isTrusted(
								X509Certificate[] chain,
								String authType) throws CertificateException
						{

							return true;

						}

					}).build();

			SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(
					sslContext);

			CloseableHttpClient client = HttpClients.custom()
					.setSSLSocketFactory(sslsf).build();
			
			HttpPost post = new HttpPost();
		

			StringEntity entity=new StringEntity(requestBody.toString(),"UTF-8");
			post.setEntity(entity);
			post.setURI(
					new URI(
							url+token
						));
			
			String response=client.execute(post,new BasicResponseHandler());
			
			rspObject=JSONObject.parseObject(response);
			if (log.isDebugEnabled())
				log.debug("\n##########向客户发送回复消息\n"+requestBody.toString());
			
		}
		catch (KeyManagementException e)
		{

			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);

		}
		catch (NoSuchAlgorithmException e)
		{

			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);

		}
		catch (KeyStoreException e)
		{

			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);

		}
		catch (URISyntaxException e)
		{
			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);
		}
		catch (ClientProtocolException e)
		{
			log.error("发送消息到微信服务器失败，无法创建SSL连接",e);
		}
		catch (IOException e)
		{
			log.error("发送消息到微信服务器失败，消息输出失败",e);
		}

		return rspObject;
	}
	
}
