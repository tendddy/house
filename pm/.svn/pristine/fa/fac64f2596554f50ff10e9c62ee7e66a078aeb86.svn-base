package com.cninsure.payment.service.impl;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import java.security.GeneralSecurityException;
import java.security.MessageDigest;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;
import java.util.regex.Pattern;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.quartz.Scheduler;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.cninsure.core.dao.BaseDao;
import com.cninsure.core.dao.impl.BaseServiceImpl;
import com.cninsure.core.tools.util.ValidateUtil;
import com.cninsure.core.utils.LogUtil;
import com.cninsure.core.utils.StringUtil;
import com.cninsure.payment.communication.weixin.sender.MessageSender;
import com.cninsure.payment.communication.weixin.sender.PaymentMessageSender;
import com.cninsure.payment.dao.PMAPPcustomDao;
import com.cninsure.payment.dao.PMAPPcustomcardDao;
import com.cninsure.payment.dao.PMAppchannelDao;
import com.cninsure.payment.dao.PMApppaymentDao;
import com.cninsure.payment.dao.PMAppplatformuserbankcardDao;
import com.cninsure.payment.dao.PMApprateDao;
import com.cninsure.payment.dao.PMBankcardDao;
import com.cninsure.payment.dao.PMLogRecordsDao;
import com.cninsure.payment.dao.PMPaymentDao;
import com.cninsure.payment.dao.PMPaymentplatformDao;
import com.cninsure.payment.dao.PMPaymentrateDao;
import com.cninsure.payment.dao.PMProductsDao;
import com.cninsure.payment.dao.PMSettlementDao;
import com.cninsure.payment.entity.PMAPPcustom;
import com.cninsure.payment.entity.PMAPPcustomcard;
import com.cninsure.payment.entity.PMAppplatform;
import com.cninsure.payment.entity.PMBankcard;
import com.cninsure.payment.entity.PMLogRecords;
import com.cninsure.payment.entity.PMPayment;
import com.cninsure.payment.entity.PMPaymentplatform;
import com.cninsure.payment.entity.PMProducts;
import com.cninsure.payment.entity.PMSettlement;
import com.cninsure.payment.enumm.PayTypeEnum;
import com.cninsure.payment.enumm.PaymentStatusEnum;
import com.cninsure.payment.model.AppCheckModel;
import com.cninsure.payment.model.BaseModel;
import com.cninsure.payment.model.FtlPayVerifyCodeModel;
import com.cninsure.payment.model.OrderDetail4ActionModel;
import com.cninsure.payment.model.OrdersDetailModel;
import com.cninsure.payment.model.PMOppuModel;
import com.cninsure.payment.model.PMProductsModel;
import com.cninsure.payment.model.PaymentCoustomerModel;
import com.cninsure.payment.model.PaymentPlatformsModel;
import com.cninsure.payment.model.PlatformModel;
import com.cninsure.payment.model.QueryPayCodeModel;
import com.cninsure.payment.service.PMAppplatformService;
import com.cninsure.payment.service.PMPaychannelService;
import com.cninsure.payment.service.PMPaymentService;
import com.cninsure.payment.service.PMRatefeeService;
import com.cninsure.payment.util.AESUtil;
import com.cninsure.payment.util.CommonUtil;
import com.cninsure.payment.util.Des;
import com.cninsure.payment.util.HttpClientUtil;
import com.cninsure.payment.util.LogDateUtil;
import com.cninsure.payment.util.MD5SignUtil;
import com.cninsure.payment.util.MessageUtil;
import com.cninsure.payment.util.QRcodePayUtil;
import com.cninsure.payment.util.ResponseHandlerForWX;
import com.cninsure.payment.util.SMSUtil;
import com.cninsure.payment.util.TxCore;
import com.cninsure.payment.util.WxPayHelper;
import com.cninsure.payment.util.quartzUtil;
import com.cninsure.system.entity.INSCUser;
import com.common.SysParams;
import com.tenpay.RequestHandler;
import com.tenpay.WapPayInitRequestHandler;
import com.tenpay.client.ClientResponseHandler;
import com.tenpay.client.TenpayHttpClient;

import payment.api.tx.marketorder.Tx1341Request;
import payment.api.tx.marketorder.Tx134xResponse;
import payment.api.tx.marketorder.Tx1361Request;
import payment.api.tx.marketorder.Tx1361Response;
import payment.api.tx.marketorder.Tx1375Request;
import payment.api.tx.marketorder.Tx1375Response;
import payment.api.tx.marketorder.Tx1376Request;
import payment.api.tx.marketorder.Tx1376Response;
import payment.api.tx.realgathering.Tx2011Request;
import payment.api.tx.realgathering.Tx2011Response;
import payment.api.vo.BankAccount;
import payment.tools.util.GUID;

@Service
@Transactional
public class PMPaymentServiceImpl extends BaseServiceImpl<PMPayment, Long> implements PMPaymentService {

	@Resource
	PMAPPcustomcardDao pmapPcustomcardDao;
	@Resource
	PMAPPcustomDao pmapPcustomDao;
	@Resource
	private PMPaymentDao pmPaymentDao;
	@Resource
	private PMAppplatformuserbankcardDao appplatformuserbankcardDao;
	@Resource
	private PMApppaymentDao apppaymentDao;
	@Resource
	private PMPaymentplatformDao paymentplatformDao;
	@Resource
	private PMAppplatformService appplatformService;
	@Resource
	private PMRatefeeService ratefeeService;
	@Resource
	private PMApprateDao apprateDao;
	@Resource
	private PMPaymentrateDao paymentrateDao;
	@Resource
	private PMAppchannelDao appchannelDao;
	@Resource
	private PMProductsDao productsDao;
	@Resource
	private PMBankcardDao bankcardDao;
	@Resource
	private PMSettlementDao settlementDao;
	@Resource
	private PMPaychannelService paychannelService;
	@Resource
	private PMLogRecordsDao pmLogRecordsDao;

	@Resource
	public Scheduler sched;
	@Resource
	public ThreadPoolTaskExecutor taskExecutor;

	@Value("${tx.institutionID}")
	private String txInstitutionID;
	
	/**
	 * 财付通开关，on接入财付通，off不接入财富通
	 */
	private String tenpayWapSwitch = ValidateUtil.getConfigValue("tenpay.wap.switch");
	/**
	 * 财付通商户id
	 */
	private String partnerId = ValidateUtil.getConfigValue("tenpay.partnerId");
	/**
	 * 财付通商户key
	 */
	private String key = ValidateUtil.getConfigValue("tenpay.key");
	/**
	 * 财付通支付地址
	 */
	private String gateUrl = ValidateUtil.getConfigValue("tenpay.gateUrl");
	/**
	 * 财付通页面回调地址
	 */
	private String returnUrl = ValidateUtil.getConfigValue("tenpay.return_url");
	/**
	 * 财付通后台回调地址
	 */
	private String nofityUrl = ValidateUtil.getConfigValue("tenpay.notify_url");
	/**
	 * 财付通后台回调返回地址
	 */
	private String verifyNotifyUrl = ValidateUtil.getConfigValue("tenpay.verifynotifyUrl");
	/**
	 * 财付通商户id WAP
	 */
	private String partnerId_wap = ValidateUtil.getConfigValue("tenpay.wap.partnerId");
	/**
	 * 财付通商户key WAP
	 */
	private String key_wap = ValidateUtil.getConfigValue("tenpay.wap.key");
	/**
	 * 财富通支付初始化地址 WAP
	 */
	private String payInitUrl_wap = ValidateUtil.getConfigValue("tenpay.wap.payInitUrl");
	/**
	 * 财付通支付地址 WAP
	 */
	private String gateUrl_wap = ValidateUtil.getConfigValue("tenpay.wap.gateUrl");
	/**
	 * 财付通页面回调地址 WAP
	 */
	private String returnUrl_wap = ValidateUtil.getConfigValue("tenpay.wap.return_url");
	/**
	 * 财付通后台回调地址 WAP
	 */
	private String nofityUrl_wap = ValidateUtil.getConfigValue("tenpay.wap.notify_url");
	/**
	 * 支付结果回调地址
	 */
	private String payResultCallBack_url = ValidateUtil.getConfigValue("payResultCallBack_url");

	private static final Logger logger = LogUtil.getLogger();

	@Override
	protected BaseDao<PMPayment, Long> getBaseDao() {
		return pmPaymentDao;
	}

	public Scheduler getSched() {
		return sched;
	}

	@Override
	public PaymentPlatformsModel initAllPayments(HttpServletRequest request, HttpServletResponse response,OrderDetail4ActionModel orderModel) {
		PaymentPlatformsModel resultModel = new PaymentPlatformsModel();
		// 订单信息验证start
		if (!orderFeeValidate(orderModel)) {// 订单总表和产品订单费用组合验证
			LogUtil.info("订单费用验证失败", "appid=" + orderModel.getAppId() + "=apporderid=" + orderModel.getAppOrderId());
			resultModel.setStatus("ERROR");
			resultModel.setMessage("订单费用验证失败");
			return resultModel;
		}
		if (!validateUrl(orderModel)) {
			LogUtil.info("订单回调地址验证失败 Receiveurl、Userinfourl", "appid=" + orderModel.getAppId() + "=apporderid=" + orderModel.getAppOrderId());
			resultModel.setStatus("ERROR");
			resultModel.setMessage("订单回调地址验证失败");
			return resultModel;
		}
		// 订单信息验证end
		// 订单信息入库 and 产品信息入库
		PMPayment ppModel;
		try {
			ppModel = handlerOrderPayment(orderModel);
		} catch (Exception e1) {
			LogUtil.info("订单信息、产品信息入库错误","appid=" + orderModel.getAppId() + "=apporderid=" + orderModel.getAppOrderId());
			resultModel.setStatus("ERROR");
			resultModel.setMessage("订单信息、产品信息入库错误");
			e1.printStackTrace();
			return resultModel;
		}
//		if("1".equals(ppModel.getStatus())){
//			resultModel.setStatus("ERROR");
//			resultModel.setMessage("该订单正在支付中，请勿重复支付");
//		}else if("2".equals(ppModel.getStatus())){
//			resultModel.setStatus("ERROR");
//			resultModel.setMessage("该订单已支付，请勿重复支付");
//		}else{
			//保存优惠券信息
		 if(null!=orderModel.getOppus()&&orderModel.getOppus().size()>0){
			 List<PMOppuModel> oppuInfo = orderModel.getOppus();
			 for(int i=0;i<oppuInfo.size();i++){
				 PMAPPcustomcard checkPmapPcustomcard = new PMAPPcustomcard(); 
				 checkPmapPcustomcard.setPaymentId(ppModel.getId()); 
				 checkPmapPcustomcard = pmapPcustomcardDao.selectOne(checkPmapPcustomcard);
				 if(null!=checkPmapPcustomcard&&"01".equals(checkPmapPcustomcard.getStatus())){
					LogUtil.info("已存在已使用的优惠券id:",oppuInfo.get(i).getAppOppuId());
					resultModel.setStatus("ERROR");
					resultModel.setMessage("该优惠券已经使用，请勿重复使用");
					return resultModel;
				 }else{
					 PMAPPcustomcard tempPmapPcustomcard = new PMAPPcustomcard();
					 tempPmapPcustomcard.setOperator(orderModel.getAppUserId());
					 tempPmapPcustomcard.setCreatetime(new Date());
					 tempPmapPcustomcard.setAmount(String.valueOf(oppuInfo.get(i).getOppufee()));
					 tempPmapPcustomcard.setCard_id(oppuInfo.get(i).getAppOppuId());
					 tempPmapPcustomcard.setCardtype("01");
					 tempPmapPcustomcard.setNoti(oppuInfo.get(i).getTxRemark());
					 tempPmapPcustomcard.setStatus("02");
					 tempPmapPcustomcard.setValidEndTime(new Date());
					 tempPmapPcustomcard.setValidStartTime(new Date());
					 tempPmapPcustomcard.setPmappcustom_id(ppModel.getAppUserId());
					 tempPmapPcustomcard.setPaymentId(ppModel.getId());
					 pmapPcustomcardDao.insert(tempPmapPcustomcard);
				 }
			 }
		 }
//		}
		// 得到所有外部第三方支付平台
//		 List<PMPaymentplatform> paymentplatforms =
//		 appchannelDao.queryOutsidePaymentsByAppId(orderModel.getAppId(),orderModel.getOrderfee());

		// 过滤第三方支付平台数据
//		 List<PMPaymentplatform> finalPaymentplatforms =
//		 filterOutsidePaymenPlatForms(paymentplatforms);

		 
		// 得到内部最优支付渠道
		// PMPaymentplatform insideppfModel =
		// countPaymentRate(ppModel,orderModel.getAppId());
		// insideppfModel.setPlatformName("银行卡");
		// List<PMPaymentplatform> firstppf = new
		// ArrayList<PMPaymentplatform>();
		// firstppf.add(insideppfModel);

		// 加入内部支付平台
		// finalPaymentplatforms.addAll(0, firstppf);

		// resultModel.setLength(paymentplatforms.size()+1);//支付平台个数
		// resultModel.setDefaultPaymentPlatformId(insideppfModel.getId());//默认最优支付平台id
		// resultModel.setPaymentPlatforms(finalPaymentplatforms);//支付平台列表

		resultModel.setAppUserId(orderModel.getAppUserId());// 应用平台用户ID
		resultModel.setAppId(orderModel.getAppId());// 应用平台id
		resultModel.setPaymentId(ppModel.getId());// 订单支付信息id
		resultModel.setAppOrderid(orderModel.getAppOrderId());// 应用平台订单编号
		
//		财付通WAP支付：1
//		财付通PC支付：2
//		微信APP支付：3
//		微信扫码支付：4
//		微信公众号支付：5
//		微信刷卡支付：6

		Map<String,String> resultMap=new HashMap<String, String>();
		PayTypeEnum payWay = PayTypeEnum.getEnum(orderModel.getPayWay());
		if (PayTypeEnum.tenpay_wap.equals(payWay)) {
			BaseModel baseModel = gotoTenpayWap(request, response, ppModel);
			if ("OK".equals(baseModel.getStatus())) {
				resultModel.setStatus("OK");
				resultModel.setPayUrl((String) baseModel.getResult());
				resultModel.setMessage("成功");
			} else {
				resultModel.setStatus("ERROR");
				resultModel.setPayUrl(baseModel.getMessage());
			}
		} else if (PayTypeEnum.tenpay_pc.equals(payWay)) {
			BaseModel baseModel = gotoTenpayWeb(request, response, ppModel);
			if ("OK".equals(baseModel.getStatus())) {
				resultModel.setStatus("OK");
				resultModel.setPayUrl((String) baseModel.getResult());
				resultModel.setMessage("成功");
			} else {
				resultModel.setStatus("ERROR");
				resultModel.setPayUrl(baseModel.getMessage());
			}
		} else if (PayTypeEnum.wechat_app.equals(payWay)) {
			resultMap = unifiedorderToWeixin(ppModel.getId(), request, response);
			if (resultMap.containsKey("status") && "OK".equals(resultMap.get("status"))) {
				resultModel.setAppWCPayRequestParams(net.sf.json.JSONObject.fromObject(resultMap.get("appWCPayRequestParams")));
				resultModel.setStatus("OK");
				resultModel.setMessage("成功");
			} else {
				resultModel.setStatus("ERROR");
				resultModel.setMessage(resultMap.get("msg"));
			}
		} else if (PayTypeEnum.wechat_native.equals(payWay)) {
			resultMap = unifiedorderToWeixin(ppModel.getId(), request, response);
			if (resultMap.containsKey("status") && "OK".equals(resultMap.get("status"))) {
				resultModel.setPayUrl(resultMap.get("erurl"));
				resultModel.setStatus("OK");
				resultModel.setMessage("成功");
			} else {
				resultModel.setStatus("ERROR");
				resultModel.setMessage(resultMap.get("msg"));
			}
		} else if (PayTypeEnum.wechat_jsapi.equals(payWay)) {
			request.setAttribute("openid", orderModel.getOpenid());
			resultMap = unifiedorderToWeixin(ppModel.getId(), request, response);
			if (resultMap.containsKey("status") && "OK".equals(resultMap.get("status"))) {
				resultModel.setBrandWCPayRequestParams(net.sf.json.JSONObject.fromObject(resultMap.get("brandWCPayRequestParams")));
				resultModel.setStatus("OK");
				resultModel.setMessage("成功");
			} else {
				resultModel.setStatus("ERROR");
				resultModel.setMessage(resultMap.get("msg"));
			}
		} else if (PayTypeEnum.wechat_micropay.equals(payWay)) {
			resultModel.setStatus("ERROR");
			resultModel.setMessage("暂不支持");
		}
		try {
			resultModel.setAppOrderTime(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
					.format(new SimpleDateFormat("yyyyMMddHHmmss").parse(orderModel.getOrderdatetime())));
		}
		catch (ParseException e) {
			e.printStackTrace();
		}
		resultModel.setOrderfee(new DecimalFormat("###,##0.00").format(new BigDecimal(orderModel.getOrderfee()).movePointLeft(2)));
		return resultModel;
	}

	/**
	 * 校验回调url正确性
	 * 
	 * @return
	 */
	private boolean validateUrl(OrderDetail4ActionModel orderModel) {
		PMAppplatform model = appplatformService.queryById(orderModel.getAppId());
		if (orderModel.getReceiveurl().startsWith(model.getDomain()) && orderModel.getUserinfourl().startsWith(model.getDomain())) {
			return true;
		}
		return false;
	}

	/**
	 * 订单总表和产品订单费用组合验证 TODO 红包、抵扣卷
	 * 
	 * @param orderModel
	 */
	private boolean orderFeeValidate(OrderDetail4ActionModel orderModel) {
		boolean returnBool = true;
		// 订单信息验证
		if (StringUtil.isEmpty(orderModel.getAppId())) {// 订单来源，数字为支付平台系统在应用平台配置的应用平台id，(必填项)
			System.out.println("订单信息验证失败：订单来源--" + orderModel.getAppId());
			returnBool = returnBool && false;
		}
		if (StringUtil.isEmpty(orderModel.getPayWay())){// 支付方式--微信、财付通
			System.out.println("订单信息验证失败：支付方式--" + orderModel.getPayWay());
			returnBool = returnBool && false;
		}
		if (StringUtil.isEmpty(orderModel.getAppUserId())) {// 应用平台用户id，(必填项)
			System.out.println("订单信息验证失败：应用平台用户id--" + orderModel.getAppUserId());
			returnBool = returnBool && false;
		}
		if (StringUtil.isEmpty(orderModel.getAppOrderId())) {// 应用平台订单id，(必填项)
			System.out.println("订单信息验证失败：应用平台订单id--" + orderModel.getAppOrderId());
			returnBool = returnBool && false;
		}
		if (StringUtil.isEmpty(orderModel.getOrderfee())) {// 应用平台订单总金额，(必填项)
			System.out.println("订单信息验证失败：应用平台订单总金额--" + orderModel.getOrderfee());
			returnBool = returnBool && false;
		}
		if (StringUtil.isEmpty(orderModel.getPayType())) {//// 支付类型，1-合并支付，2-产品单独支付，(必填项)
			System.out.println("订单信息验证失败：支付类型--" + orderModel.getPayType());
			returnBool = returnBool && false;
		}
		else {
			if (!"1".equals(orderModel.getPayType()) && !"2".equals(orderModel.getPayType())) {
				System.out.println("订单信息验证失败：支付类型，1-合并支付，2-产品单独支付--" + orderModel.getPayType());
				returnBool = returnBool && false;
			}
		}
		if (StringUtil.isEmpty(orderModel.getOrderdatetime())) {// 订单时间，格式为yyyyMMddhhmmss，(必填项)
			System.out.println("订单信息验证失败：订单时间--" + orderModel.getOrderdatetime());
			returnBool = returnBool && false;
		}
		else {
			Pattern pattern = Pattern.compile("(19|20)[0-9][0-9](0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])"
					+ "(0[0-9]|1[0-9]|2[0-3])(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])");
			if (!pattern.matcher(orderModel.getOrderdatetime()).matches()) {
				System.out.println("订单信息验证失败：订单时间，格式为yyyyMMddhhmmss--" + orderModel.getOrderdatetime());
				returnBool = returnBool && false;
			}
		}

		// 总费用
		long mainOrderFee = StringUtil.isEmpty(orderModel.getOrderfee()) ? 0 : orderModel.getOrderfee();
		// 子订单费用计算
		List<PMProductsModel> products = StringUtil.isEmpty(orderModel.getProducts()) ? null : orderModel.getProducts();
		long subOrderFee = 0l;
		for (PMProductsModel product : products) {
			if (StringUtil.isEmpty(product.getOrderfee())) {// 订单产品金额，(必填项)
				System.out.println("产品信息验证失败：订单产品金额--" + product.getOrderfee());
				returnBool = returnBool && false;
			}
			if (StringUtil.isEmpty(product.getAppOrderId())) {// 应用平台订单产品id，(必填项)
				System.out.println("产品信息验证失败：应用平台订单产品id--" + product.getAppOrderId());
				returnBool = returnBool && false;
			}
			if (StringUtil.isEmpty(product.getAppOrderName())) {// 应用平台订单产品名称，(必填项)
				System.out.println("产品信息验证失败：应用平台订单产品名称--" + product.getAppOrderName());
				returnBool = returnBool && false;
			}
			if ("1".equals(orderModel.getPayType()) && StringUtil.isEmpty(product.getAccountType())) {// 账户类型：11=个人账户
																										// 12=企业账户
																										// 20=支付账户(当【支付类型】为“1-合并支付”时，必填)
				if (!"11".equals(String.valueOf(product.getAccountType())) && !"12".equals(String.valueOf(product.getAccountType()))
						&& !"20".equals(String.valueOf(product.getAccountType()))) {
					System.out.println("产品信息验证失败：账户类型，11=个人账户 12=企业账户 20=支付账户--" + product.getAccountType());
					returnBool = returnBool && false;
				}
			}
			// 账户名称(当【支付类型】为“1-合并支付”时，必填)
			if ("1".equals(orderModel.getPayType()) && StringUtil.isEmpty(product.getAccountName())) {
				System.out.println("产品信息验证失败：账户名称--" + product.getAccountName());
				returnBool = returnBool && false;
			}
			// 账户号码(当【支付类型】为“1-合并支付”时，必填)
			if ("1".equals(orderModel.getPayType()) && StringUtil.isEmpty(product.getAccountNumber())) {
				System.out.println("产品信息验证失败：账户号码--" + product.getAccountNumber());
				returnBool = returnBool && false;
			}
			// 编码符合中金的银行编码，得提供个接口给应用平台
			// 银行编号(当【支付类型】为“1-合并支付”且【账户类型】：11或12时，必填)
			if ("1".equals(orderModel.getPayType()) && ("11".equals(product.getAccountType()) || "20".equals(product.getAccountType()))
					&& StringUtil.isEmpty(product.getBankID())) {
				System.out.println("产品信息验证失败：银行编号--" + product.getBankID());
				returnBool = returnBool && false;
			}
			else {// TODO编码符合中金的银行编码

			}
			// 分支行名称(当【支付类型】为“1-合并支付”且【账户类型】：11或12时，必填)
			if ("1".equals(orderModel.getPayType()) && ("11".equals(product.getAccountType()) || "20".equals(product.getAccountType()))
					&& StringUtil.isEmpty(product.getBranchName())) {
				System.out.println("产品信息验证失败：分支行名称--" + product.getBranchName());
				returnBool = returnBool && false;
			}
			// 分支行省份(当【支付类型】为“1-合并支付”且【账户类型】：11或12时，必填)
			if ("1".equals(orderModel.getPayType()) && ("11".equals(product.getAccountType()) || "20".equals(product.getAccountType()))
					&& StringUtil.isEmpty(product.getProvince())) {
				System.out.println("产品信息验证失败：分支行省份--" + product.getProvince());
				returnBool = returnBool && false;
			}
			// 分支行城市(当【支付类型】为“1-合并支付”且【账户类型】：11或12时，必填)
			if ("1".equals(orderModel.getPayType()) && ("11".equals(product.getAccountType()) || "20".equals(product.getAccountType()))
					&& StringUtil.isEmpty(product.getCity())) {
				System.out.println("产品信息验证失败：分支行城市--" + product.getCity());
				returnBool = returnBool && false;
			}
			long Orderfee = StringUtil.isEmpty(product.getOrderfee()) ? 0 : product.getOrderfee();
			subOrderFee = subOrderFee + Orderfee;
		}
		if (mainOrderFee != subOrderFee) {
			returnBool = returnBool && false;
		}
		return returnBool;
	}

	/**
	 * 订单信息入库 产品信息入库
	 * @throws NoSuchMethodException 
	 * @throws InvocationTargetException 
	 * @throws IllegalAccessException 
	 */
	private PMPayment handlerOrderPayment(OrderDetail4ActionModel orderModel) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
		PMPayment ppModel = new PMPayment();
		PropertyUtils.copyProperties(ppModel, orderModel);
		// 根据appId和appUserId查询，有就用，没有就新增
		PMAPPcustom pcustom = this.insertOrUpdateCustomer(ppModel.getAppId(), ppModel.getAppUserId(), orderModel.getIdcard(), orderModel.getAppUserName());
		
//		PMPayment tempPayment = new PMPayment();
//		tempPayment.setAppId(ppModel.getAppId());
//		tempPayment.setAppOrderId(ppModel.getAppOrderId());
//		tempPayment = pmPaymentDao.selectOne(tempPayment);
//		if(null!=tempPayment){
//			pmPaymentDao.deleteById(tempPayment.getId());
//		}
		// 订单主表数据入库
		ppModel.setCreatedate(new Date());
		ppModel.setModifydate(null);
		ppModel.setStatus("0");// 0-待支付
		ppModel.setAppUserId(String.valueOf(pcustom.getId()));// 关联平台用户表的id
		// 支付方式
		ppModel.setProp3(orderModel.getPayWay());
		// 从产品中第一个取商品名称
		List<PMProductsModel> productsModel = orderModel.getProducts();
		if (productsModel != null && productsModel.size() > 0) {
			ppModel.setProp2(productsModel.get(0).getAppOrderName());
		}
		pmPaymentDao.insert(ppModel);

		// 生成系统订单号
		String mainOrderId = SMSUtil.productPmOrderId("main", ppModel.getId());
		PMPayment updateOrderIdModel = new PMPayment();
		updateOrderIdModel.setOrderid(mainOrderId);
		updateOrderIdModel.setId(ppModel.getId());
		pmPaymentDao.updateByIdSelective(updateOrderIdModel);

		// 子表数据入库
		if (productsModel != null) {
			if (productsModel.size() == 0) {
				// 产品数据为空
				throw new RuntimeException();
			}
			for (PMProductsModel model : productsModel) {
				model.setAppId(ppModel.getAppId());
				PMProducts ppdModel = new PMProducts();
				PropertyUtils.copyProperties(ppdModel, model);
				ppdModel.setCreatedate(new Date());
				ppdModel.setModifydate(new Date());
				ppdModel.setPaymentId(ppModel.getId());
				ppdModel.setOrderid(null);
				productsDao.insert(ppdModel);

				String subOrderId = SMSUtil.productPmOrderId("sub", ppdModel.getId());

				PMProducts updateSubOrderIdModel = new PMProducts();
				updateSubOrderIdModel.setOrderid(subOrderId);
				updateSubOrderIdModel.setId(ppdModel.getId());
				productsDao.updateByPrimaryKeySelective(updateSubOrderIdModel);
			}
		}
		return ppModel;
	}

	/**
	 * 校验用户唯一性  根据appId和appUserId查询，有就用，没有就新增
	 */
	private PMAPPcustom insertOrUpdateCustomer(Long appId,String appUserId,String idCard,String appUserName){
		PMAPPcustom pcustom = new PMAPPcustom();
		pcustom.setApp_id(appId);
		pcustom.setApp_user_id(appUserId);
		List<PMAPPcustom> list = pmapPcustomDao.selectList(pcustom);
		if (list != null && list.size() == 0) {
			pcustom.setOperator("admin");
			pcustom.setCreatetime(new Date());
			pcustom.setApp_user_idno(idCard);
			pcustom.setApp_user_name(appUserName);
			pmapPcustomDao.insert(pcustom);
		}
		else {
			pcustom = list.get(0);
		}
		
		return pcustom;
	}
	
	
	/**
	 * 过滤第三方支付平台数据
	 */
	private List<PMPaymentplatform> filterOutsidePaymenPlatForms(List<PMPaymentplatform> paymentplatforms) {
		List<PMPaymentplatform> finalOutsidePaymentplatforms = new ArrayList<PMPaymentplatform>();

		Set<Long> paymentplatFormIds = new HashSet<Long>();
		if (paymentplatforms == null || paymentplatforms.isEmpty()) {
			return finalOutsidePaymentplatforms;
		}

		// 第三方支付平台费率排序
		for (PMPaymentplatform outsideModel : paymentplatforms) {
			if (paymentplatFormIds.contains(outsideModel.getId())) {
				continue;
			}
			else {
				finalOutsidePaymentplatforms.add(outsideModel);
				paymentplatFormIds.add(outsideModel.getId());
			}
		}
		return finalOutsidePaymentplatforms;
	}

	/**
	 * 泛华支付内部最优渠道选择 v1.0
	 * 
	 * TODO 多家渠道费率相同
	 * 
	 * @param ppModel
	 *            订单信息
	 * @param appId
	 *            应用平台ID
	 * @return
	 */
	private PMPaymentplatform countPaymentRate(PMPayment ppModel, long appId) {
		// 拿到当前订单费用
		PMPaymentplatform insideModel = paymentrateDao.getBestRate(ppModel.getOrderfee(), appId);
		return insideModel;
	}

	@Override
	public Map<String, Object> queryPayResult(PaymentCoustomerModel pcModel) {
		PMPayment query = new PMPayment();
		query.setAppId(pcModel.getAppPlatformId());
		query.setOrderid(pcModel.getOrderid());
		query.setStatus("1");
		PMPayment payment = pmPaymentDao.selectOne(query);
		if (payment != null) {

		}
		return null;
	}

	@Override
	@Deprecated
	public BaseModel orderPay4Tx1375(QueryPayCodeModel model) {
		BaseModel result = new BaseModel();

		// 更新订单信息
		pmPaymentDao.updatePaymentDataById(model.getPaymentPlatFormId(), model.getAppId(), model.getChannelId(), model.getProtocolid(),
				model.getPaymentId());
		PMPayment paymentModel = pmPaymentDao.selectById(model.getPaymentId());

		// 交易流水号
		String payProtocolid = GUID.generateGUID();
		Tx1375Request txRequest = setTx1375Request(paymentModel, payProtocolid);

		String[] respMsg = TxCore.handlerParam(txRequest, "1375", "市场订单快捷支付发送短信");
		Tx1375Response zhongjinResponse = null;
		try {
			zhongjinResponse = new Tx1375Response(respMsg[0], respMsg[1]);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		try {
			if ("2000".equals(zhongjinResponse.getCode())) {
				pmPaymentDao.updatePayProtocolById(payProtocolid, model.getPaymentId());
				result.setMessage("发送验证码成功");
				result.setStatus("OK");
				result.setResult(payProtocolid);
			}
			else {
				result.setResult("验证码获取失败");
				result.setStatus("FAIL");
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			result.setMessage("发送验证码成功");
			result.setStatus("OK");
		}
		return result;
	}

	@Deprecated
	private Tx1375Request setTx1375Request(PMPayment paymentModel, String payProtocolid) {
		Tx1375Request txRequest = new Tx1375Request();
		txRequest.setInstitutionID(txInstitutionID); //
		txRequest.setOrderNo(paymentModel.getOrderid()); // 订单编号
		txRequest.setPaymentNo(payProtocolid); // 支付流水号
		txRequest.setAmount(paymentModel.getOrderfee()); // 支付金额
		txRequest.setTxSNBinding(paymentModel.getProtocolid()); // 绑定流水号
		txRequest.setRemark("测试");
		return txRequest;
	}

	@Override
	@Deprecated
	public BaseModel orderPay4Tx1376(String payProtocolid, String smsValidationCode) {
		BaseModel result = new BaseModel();
		PMPayment paymentModel = pmPaymentDao.selectByPayProtocol(payProtocolid);
		if (paymentModel == null) {
			result.setMessage("支付异常");
			result.setStatus("ERROR");
			return result;
		}
		else if (paymentModel.getStatus().equals("2")) {
			result.setMessage("支付成功");
			result.setStatus("OK");
			return result;
		}

		Tx1376Request txRequest = setTx1376Request(paymentModel, smsValidationCode);
		String[] respMsg = TxCore.handlerParam(txRequest, "1376", "市场订单快捷支付(短信验证并支付)");
		Tx1376Response zhongjinResponse = null;
		try {
			zhongjinResponse = new Tx1376Response(respMsg[0], respMsg[1]);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		try {
			if ("2000".equals(zhongjinResponse.getCode())) {
				if (zhongjinResponse.getVerifyStatus() == 20) {

					// 重新获取验证码
					result.setMessage("验证码超时");
					result.setStatus("ERROR");
				}
				else if (zhongjinResponse.getVerifyStatus() == 30) {

					// 重新获取验证码
					result.setMessage("验证未通过");
					result.setStatus("ERROR");
				}
				else if (zhongjinResponse.getVerifyStatus() == 40) {
					if (zhongjinResponse.getStatus() == 10) {
						result.setMessage("处理中");
						result.setStatus("ERROR");
					}
					else if (zhongjinResponse.getStatus() == 20) {

						// 更改支付信息状态
						pmPaymentDao.updatePaySuccessByPayProtocol(payProtocolid, smsValidationCode);
						result.setMessage("支付成功");
						result.setStatus("OK");
					}
					else if (zhongjinResponse.getStatus() == 30) {

						// 跳转到重新选卡支付页面
						result.setMessage("支付失败");
						result.setStatus("FAIL");
						// 清空支付流水号重新生成修改支付状态
						pmPaymentDao.updatePayProtocolNullByPayProtocol(payProtocolid);
					}
				}
			}
			else {
				result.setMessage("支付失败");
				result.setStatus("FAIL");
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			result.setMessage("支付成功");
			result.setStatus("OK");
		}
		pmPaymentDao.updatePaySuccessByPayProtocol(payProtocolid, smsValidationCode);
		result.setMessage("支付成功");
		result.setStatus("OK");
		return result;
	}

	@Deprecated
	private Tx1376Request setTx1376Request(PMPayment paymentModel, String smsValidationCode) {
		Tx1376Request txRequest = new Tx1376Request();
		txRequest.setInstitutionID(txInstitutionID);
		txRequest.setOrderNo(paymentModel.getOrderid().toString());
		txRequest.setPaymentNo(paymentModel.getPayProtocolid());
		txRequest.setSmsValidationCode(smsValidationCode);
		return txRequest;
	}

	/**
	 * 发送支付验证码,支付的验证码要泛华自己发，支付走中金接口。
	 */

	@Override
	public FtlPayVerifyCodeModel orderPaySendVerificationCode(HttpServletRequest request, QueryPayCodeModel model) {
		FtlPayVerifyCodeModel result = new FtlPayVerifyCodeModel();
		// 定单主表支付流水号 TODO 重复发送验证码后台效率问题
		String mainPayProtocolid = GUID.generateGUID();// 支付流水号
		PMBankcard bankModel = bankcardDao.selectDataByProtocolid(model.getProtocolid());
		String verificationCode = SMSUtil.SMSconfig(request, mainPayProtocolid, bankModel.getCustomphone());

		String payid = paychannelService.getPaymentId("中金");
		model.setPaymentPlatFormId(Long.parseLong(payid));// 前台不再提供支付平台id，目前支付全部走中金接口，故全部用中金的支付平台id
		PMPayment updatePmPaymentModel = new PMPayment();
		updatePmPaymentModel.setId(model.getPaymentId());
		updatePmPaymentModel.setAppId(model.getAppId());
		updatePmPaymentModel.setPlatformId(model.getPaymentPlatFormId());
		updatePmPaymentModel.setProtocolid(model.getProtocolid());
		updatePmPaymentModel.setPayProtocolid(mainPayProtocolid);
		updatePmPaymentModel.setVerifycode(verificationCode);
		pmPaymentDao.updateByIdSelective(updatePmPaymentModel);

		// 更新订单主表信息
		PMPayment pmPaymentModel = pmPaymentDao.selectById(model.getPaymentId());
		// 结算支付和直接支付都走中金接口
		if (pmPaymentModel.getPayType().equals("1")) {
			// 结算支付-1361/1341--使用绑卡信息/使用订单产品带过来的银行信息
			// 更新费率表
			ratefeeService.receivableAppRateFee(pmPaymentModel.getId(), model.getAppId(), pmPaymentModel.getOrderfee(), "0");
			ratefeeService.receivablePaymentRateFee(pmPaymentModel.getId(), model.getPaymentPlatFormId(), pmPaymentModel.getOrderfee(),
					"0");

		}
		else if (pmPaymentModel.getPayType().equals("2")) {

			// 直接支付-2011--使用绑卡信息
			// List<PMProducts> pmProducts =
			// productsDao.selectByPaymentId(pmPaymentModel.getId());
			// if (pmProducts != null) {
			// for (PMProducts pmproduct : pmProducts) {
			// String payProtocolid = GUID.generateGUID();
			// // 更新支付流水号
			// PMProducts record = new PMProducts();
			// record.setPayprotocolid(payProtocolid);
			// record.setPlatformId(Long.parseLong(payid));//产品单独支付-2011--支付平台id不为空
			// record.setId(pmproduct.getId());
			// record.setProtocolid(model.getProtocolid());
			// productsDao.updateByPrimaryKeySelective(record);
			// ratefeeService.receivableAppRateFee(pmproduct.getId(),
			// model.getAppId(), pmPaymentModel.getOrderfee(),"0");
			// ratefeeService.receivablePaymentRateFee(pmproduct.getId(),
			// model.getPaymentPlatFormId(), pmPaymentModel.getOrderfee(),"0");
			//
			// }
			// }
			ratefeeService.receivableAppRateFee(pmPaymentModel.getId(), model.getAppId(), pmPaymentModel.getOrderfee(), "0");
			ratefeeService.receivablePaymentRateFee(pmPaymentModel.getId(), model.getPaymentPlatFormId(), pmPaymentModel.getOrderfee(),
					"0");
		}
		result.setMessage("发送验证码成功");
		result.setStatus("OK");
		result.setMainPayProtocolId(mainPayProtocolid);
		return result;
	}

	/**
	 * 验证支付验证码,支付走中金接口。
	 */
	@Override
	public BaseModel orderPay(String payProtocolid, String smsValidationCode) {
		BaseModel result = new BaseModel();

		// 查订单主表信息
		PMPayment paymentMainModel = pmPaymentDao.selectByPayProtocol(payProtocolid);

		// 验证码检测
		if (StringUtils.isBlank(smsValidationCode) || !smsValidationCode.equals(paymentMainModel.getVerifycode())) {
			result.setMessage("验证码输入错误");
			result.setStatus("ERROR");
			return result;
		}

		if (paymentMainModel.getPayType().equals("1")) {// 结算支付-1361/1341--使用绑卡信息/使用订单产品带过来的银行信息
			// 1361接口支付成功后，就反馈用户支付成功；一旦1341出现问题记录日志************
			result = orderPayTx1361(paymentMainModel);
			if ("OK".equals(result.getStatus())) {// 如果支付成功，记录每笔订单的手续费结算
				syncSettlementPayment(paymentMainModel, "0");
			}
		}
		else if (paymentMainModel.getPayType().equals("2")) {// 直接支付
																// -2011--使用绑卡信息
			// 所有钱一次性到应用平台账户
			result = orderPay4Tx2011(paymentMainModel);
			if ("OK".equals(result.getStatus())) {
				// 记录每笔手续费结算
				syncSettlementPayment(paymentMainModel, "0");
			}

		}
		return result;
	}

	/**
	 * 验证支付验证码,支付走中金接口。
	 */
	@Override
	public BaseModel selectOrderPay(String payProtocolid, String smsValidationCode) {
		BaseModel result = new BaseModel();

		// 查订单主表信息
		PMPayment paymentMainModel = pmPaymentDao.selectByPayProtocol(payProtocolid);

		// 验证码检测
		if (StringUtils.isBlank(smsValidationCode) || !smsValidationCode.equals(paymentMainModel.getVerifycode())) {
			result.setMessage("验证码输入错误");
			result.setStatus("ERROR");
			return result;
		}

		if (paymentMainModel.getPayType().equals("1")) {// 结算支付-1361/1341--使用绑卡信息/使用订单产品带过来的银行信息
			// TODO 重要 失败的要怎么处理？还处于支付中的怎么处理？
			if ("2".equals(paymentMainModel.getStatus())) {// 支付成功
				syncSettlementPayment(paymentMainModel, "0");
				// 更新订单产品信息为支付成功
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "2");
				result.setMessage("支付成功！");
				result.setStatus("OK");
				// 费用统计 和//结算
				costStatisticsANDSettle(paymentMainModel);
			}
			else if ("1".equals(paymentMainModel.getStatus())) {// 支付中
				result.setMessage("支付中！");
				result.setStatus("REST");
				for (int i = 0; i < 18; i++) {
					paymentMainModel = pmPaymentDao.selectByPayProtocol(payProtocolid);
					if ("2".equals(paymentMainModel.getStatus())) {
						syncSettlementPayment(paymentMainModel, "0");
						// 更新订单产品信息为支付成功
						productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "2");
						result.setMessage("支付成功！");
						result.setStatus("OK");
						// 费用统计 和//结算
						costStatisticsANDSettle(paymentMainModel);
						break;
					}
					try {
						Thread.sleep(4000);
					}
					catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				if ("REST".equals(result.getStatus())) {
					// 更新订单产品信息为支付中
					productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "1");
				}
			}
			else if ("3".equals(paymentMainModel.getStatus())) {// 支付失败
				// 更新订单产品信息为支付失败
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "3");
				result.setMessage("支付失败！");
				result.setStatus("FAIL");
			}

		}
		else if (paymentMainModel.getPayType().equals("2")) {// 直接支付
																// -2011--使用绑卡信息
			// TODO 重要 失败的要怎么处理？还处于支付中的怎么处理？
			if ("2".equals(paymentMainModel.getStatus())) {// 支付成功
				syncSettlementPayment(paymentMainModel, "1");
				// 更新订单产品信息为支付成功
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "2");
				result.setMessage("支付成功！");
				result.setStatus("OK");
				// 费用统计
				ratefeeService.netReceiptsAppRateFee(paymentMainModel.getId(), paymentMainModel.getAppId(), paymentMainModel.getOrderfee(),
						"0");
				ratefeeService.netReceiptsPaymentRateFee(paymentMainModel.getId(), paymentMainModel.getPlatformId(),
						paymentMainModel.getOrderfee(), "0");
			}
			else if ("1".equals(paymentMainModel.getStatus())) {// 支付中
				for (int i = 0; i < 18; i++) {
					paymentMainModel = pmPaymentDao.selectByPayProtocol(payProtocolid);
					if ("2".equals(paymentMainModel.getStatus())) {
						syncSettlementPayment(paymentMainModel, "1");
						// 更新订单产品信息为支付成功
						productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "2");
						result.setMessage("支付成功！");
						result.setStatus("OK");
						// 费用统计
						ratefeeService.netReceiptsAppRateFee(paymentMainModel.getId(), paymentMainModel.getAppId(),
								paymentMainModel.getOrderfee(), "0");
						ratefeeService.netReceiptsPaymentRateFee(paymentMainModel.getId(), paymentMainModel.getPlatformId(),
								paymentMainModel.getOrderfee(), "0");
						break;
					}
					try {
						Thread.sleep(4000);
					}
					catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				if ("REST".equals(result.getStatus())) {
					// 更新订单产品信息为支付中
					productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "1");
				}
			}
			else if ("3".equals(paymentMainModel.getStatus())) {// 支付失败
				result.setMessage("支付失败！");
				result.setStatus("FAIL");
				// 更新订单产品信息为支付失败
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "3");
			}
			// List<PMProducts> successList = new ArrayList<PMProducts>();
			// List<PMProducts> failList = new ArrayList<PMProducts>();
			// List<PMProducts> restList = new ArrayList<PMProducts>();
			// if("OK".equals(result.getStatus())){
			// result.setMessage("支付成功！");
			// result.setStatus("OK");
			// List<PMProducts> pmProducts =
			// productsDao.selectByPaymentId(paymentMainModel.getId());
			// //记录每笔手续费结算
			// syncSettlementProduct(paymentMainModel,pmProducts,"1");
			// }else{//哪些成功哪些失败，提示出来*******************************************
			// // TODO 重要 失败的要怎么处理？还处于支付中的怎么处理？
			// List<PMProducts> pmProducts =
			// productsDao.selectByPaymentId(paymentMainModel.getId());
			// String successMess="";
			// String failMess="";
			// String restMess="";
			// for (int i = 0; i < pmProducts.size(); i++) {
			// PMProducts product = pmProducts.get(i);
			// if("2".equals(product.getStatus())){//成功的结算产品信息
			// successList.add(product);
			// successMess=successMess+"、"+product.getAccountName();
			// }else if("3".equals(product.getStatus())){//失败的结算产品信息
			// failList.add(product);
			// failMess=failMess+"、"+product.getAccountName();
			// }else if("1".equals(product.getStatus())){//支付中的结算产品信息
			// restList.add(product);
			// restMess=restMess+"、"+product.getAccountName();
			// }
			// }
			// System.out.println("successList"+successList);
			// System.out.println("failList"+failList);
			// System.out.println("restList"+restList);
			// result.setStatus("PART");
			// // TODO
			// successList/failList列表要通过订单的receiveurl【支付结果回调地址】反馈回去，并且记录日志**************************************
			// //记录每笔手续费结算
			// syncSettlementProduct(paymentMainModel,successList,"1");
			// }
		}
		return result;

	}

	// 费用统计
	private void costStatisticsANDSettle(PMPayment paymentMainModel) {
		// 费用统计
		ratefeeService.netReceiptsAppRateFee(paymentMainModel.getId(), paymentMainModel.getAppId(), paymentMainModel.getOrderfee(), "0");
		ratefeeService.netReceiptsPaymentRateFee(paymentMainModel.getId(), paymentMainModel.getPlatformId(), paymentMainModel.getOrderfee(),
				"0");

		// 结算
		List<PMProducts> products = productsDao.selectByPaymentId(paymentMainModel.getId());
		for (PMProducts product : products) {
			taskExecutor.execute(new Runnable() {
				@Override
				public void run() {
					// 当1361接口成功时，反馈给用户就是成功，如果1341出现问题记录日志**************************
					autoStatementTx1341(paymentMainModel, product);
				}
			});
		}
	}

	// 做核查本地数据库状态
	private BaseModel checkStatusOfProduct(PMPayment paymentMainModel) {
		BaseModel result = new BaseModel();
		List<PMProducts> pmProducts = productsDao.selectByPaymentId(paymentMainModel.getId());
		long shouldSucc = pmProducts.size();
		System.out.println("shouldSucc" + shouldSucc);
		long actualSucc = productsDao.selectActualSuccByPaymentId(paymentMainModel.getId(), "2");
		long actualFail = productsDao.selectActualSuccByPaymentId(paymentMainModel.getId(), "3");
		long actualRest = shouldSucc - actualSucc - actualFail;
		System.out.println("actualSucc" + actualSucc);
		System.out.println("actualFail" + actualFail);
		System.out.println("actualRest" + actualRest);
		result.setStatus("ERROR");
		if (actualSucc == shouldSucc) {// 全部支付成功
			result.setStatus("OK");
		}
		else if (actualFail == shouldSucc) {// 全部支付失败
			result.setStatus("ERROR");
		}
		else if (actualRest != 0l) {// 部分支付中
			result.setStatus("REST");
		}
		return result;
	}

	/**
	 * 记录每笔手续费结算-----手续费结算要计算成功支付的产品* 0-实时;1-每月
	 * 
	 * @param paymentMainModel
	 */
	private void syncSettlementProduct(PMPayment paymentMainModel, List<PMProducts> successList, String payType) {
		PMSettlement settlement = new PMSettlement();
		settlement.setAppId(paymentMainModel.getAppId());
		settlement.setPayType("1");
		PMProducts success = new PMProducts();
		for (int i = 0; i < successList.size(); i++) {
			success = successList.get(i);
			settlement.setPaymentId(success.getId());
			settlement.setOrderfee(success.getOrderfee());
			String rate = settlementDao.getAppPlatformRate(success);
			settlement.setRate(Double.parseDouble(rate));
			List<PMProducts> pmProducts = productsDao.selectByPaymentId(paymentMainModel.getId());
			String settleFee = settlementDao.getAppReceivableRatefee(pmProducts, payType);
			settlement.setSettleFee(Integer.parseInt(settleFee));
			String settlementInterval = settlementDao.getSettlementInterval(paymentMainModel);
			settlement.setSettlementInterval(Integer.parseInt(settlementInterval));
			if ("0".equals(settlementInterval)) {
				settlement.setStatus("1");// 已结
				settlement.setSettleDate(new Date());// 应结日期
				settlement.setSettleUser("系统自动结算");
				settlement.setSettlementDate(new Date());// 应结日期
			}
			else if ("1".equals(settlementInterval)) {
				settlement.setStatus("0");// 未结
				SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
				Calendar ca = Calendar.getInstance();
				ca.set(Calendar.DAY_OF_MONTH, ca.getActualMaximum(Calendar.DAY_OF_MONTH));
				String last = format.format(ca.getTime());
				try {
					settlement.setSettleDate(new SimpleDateFormat("yyyy-MM-dd").parse(last));// 应结日期
				}
				catch (ParseException e) {
					e.printStackTrace();
				}
			}
			settlementDao.saveSettlement(settlement);
		}
	}

	/**
	 * 记录每笔手续费结算-----有问题，手续费结算要计算成功支付的订单/只记录1361接口，不对1341接口收取手续费 0-实时;1-每月
	 * 
	 * @param paymentMainModel
	 */
	private void syncSettlementPayment(PMPayment paymentMainModel, String payType) {
		PMSettlement settlement = new PMSettlement();
		settlement.setAppId(paymentMainModel.getAppId());
		settlement.setPayType("0");
		settlement.setPaymentId(paymentMainModel.getId());
		settlement.setOrderfee(paymentMainModel.getOrderfee());
		// appRate
		String rate = settlementDao.getAppPlatformRate(paymentMainModel);
		settlement.setRate(Double.parseDouble(rate));
		// app_receivable_ratefee
		String settleFee = settlementDao.getAppReceivableRatefee(paymentMainModel, payType);
		settlement.setSettleFee(Integer.parseInt(settleFee));
		String settlementInterval = settlementDao.getSettlementInterval(paymentMainModel);
		settlement.setSettlementInterval(Integer.parseInt(settlementInterval));
		if ("0".equals(settlementInterval)) {
			settlement.setStatus("1");// 已结
			settlement.setSettleDate(new Date());// 应结日期
			settlement.setSettleUser("系统自动结算");
			settlement.setSettlementDate(new Date());// 应结日期
		}
		else if ("1".equals(settlementInterval)) {
			settlement.setStatus("0");// 未结
			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
			Calendar ca = Calendar.getInstance();
			ca.set(Calendar.DAY_OF_MONTH, ca.getActualMaximum(Calendar.DAY_OF_MONTH));
			String last = format.format(ca.getTime());
			try {
				settlement.setSettleDate(new SimpleDateFormat("yyyy-MM-dd").parse(last));// 应结日期
			}
			catch (ParseException e) {
				e.printStackTrace();
			}
		}
		settlementDao.saveSettlement(settlement);
	}

	/**
	 * 单笔代收
	 * 
	 * @param paymentMainModel
	 * @return
	 */
	public BaseModel orderPay4Tx2011(PMPayment paymentMainModel) {
		BaseModel result = new BaseModel();

		// 得到订单绑定银行卡信息
		PMBankcard bankCardModel = bankcardDao.selectDataByProtocolid(paymentMainModel.getProtocolid());

		Tx2011Request txRequest = setTx2011Request(bankCardModel, paymentMainModel);

		PMLogRecords pmLogRecords = new PMLogRecords();
		pmLogRecords.setCreatedate(new Date());
		pmLogRecords.setAppId(paymentMainModel.getAppId());
		pmLogRecords.setPaymentId(paymentMainModel.getId());
		pmLogRecords.setAppOrderid(paymentMainModel.getAppOrderId());
		pmLogRecords.setPlatformUserId(String.valueOf(paymentMainModel.getAppUserId()));
		pmLogRecords.setProductId(null);
		pmLogRecords.setInterfaceType(0);
		pmLogRecords.setInterfaceName("单笔代收");
		pmLogRecords.setInterfaceMethod("2011");
		net.sf.json.JSONObject Request = net.sf.json.JSONObject.fromObject(txRequest);
		System.out.println("2011Request.toString()" + Request.toString());
		pmLogRecords.setRequestParams(Request.toString());
		pmLogRecordsDao.insertLogRecords(pmLogRecords);
		// 启动定时任务
		// 开个timeout2011定时任务(4秒延时处理,3秒执行一次，执行4次)用于查询，防止参数过去了，而且返回报文因断网而丢失，通过查询状态更新平台订单信息
		String jobName = "tx2011_" + pmLogRecords.getId() + "_" + paymentMainModel.getPayProtocolid();
		quartzUtil.timeOut4TxQuartz(sched, jobName, "timeout2011", "2011");
		String[] respMsg = TxCore.handlerParam(txRequest, "2011", "单笔代收");
		Tx2011Response zhongjinResponse = null;
		try {
			zhongjinResponse = new Tx2011Response(respMsg[0], respMsg[1]);
		}
		catch (Exception e) {
			e.printStackTrace();
			System.out.println("2011接口反馈报文失败");
			pmLogRecords.setRemark("2011接口反馈报文失败");
		}
		net.sf.json.JSONObject Response = net.sf.json.JSONObject.fromObject(zhongjinResponse);
		System.out.println("2011Response.toString()" + Response.toString());
		pmLogRecords.setResponseParams(Response.toString());
		pmLogRecordsDao.updateLogRecordsOfResponse(pmLogRecords);
		if ("2000".equals(zhongjinResponse.getCode())) {

			// 有个4秒延时处理，当2011接口报文反馈回来，关闭timeout2011定时任务
			// 取消开始90秒定时任务
			quartzUtil.deleteHistoryJob(sched, jobName, "timeout2011");

			if (zhongjinResponse.getStatus() == 20) {
				result.setMessage("支付中");
				result.setStatus("REST");
				// 正在处理马上开始查询
				quartzUtil.poll4TxQuartz(sched, jobName, "poll2011", "2011");
				PMPayment updateSatusPaymentModel = new PMPayment();
				updateSatusPaymentModel.setId(paymentMainModel.getId());
				updateSatusPaymentModel.setStatus("1");
				pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
				// 更新订单产品信息为支付中
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "1");
			}
			else if (zhongjinResponse.getStatus() == 30) {
				result.setMessage("支付成功");
				result.setStatus("OK");
				PMPayment updateSatusPaymentModel = new PMPayment();
				updateSatusPaymentModel.setId(paymentMainModel.getId());
				updateSatusPaymentModel.setStatus("2");
				pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
				// 更新订单产品信息为支付成功
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "2");
				// 接口操作日志状态更新
				pmLogRecordsDao.updateLogStatusById(pmLogRecords.getId());
				// 费用统计
				ratefeeService.netReceiptsAppRateFee(paymentMainModel.getId(), paymentMainModel.getAppId(), paymentMainModel.getOrderfee(),
						"0");
				ratefeeService.netReceiptsPaymentRateFee(paymentMainModel.getId(), paymentMainModel.getPlatformId(),
						paymentMainModel.getOrderfee(), "0");
			}
			else if (zhongjinResponse.getStatus() == 40) {
				// 失败记录错误日志************************************
				PMPayment updateSatusPaymentModel = new PMPayment();
				updateSatusPaymentModel.setId(paymentMainModel.getId());
				updateSatusPaymentModel.setStatus("3");
				pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
				// 更新订单产品信息为支付失败
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "3");
				result.setMessage("支付失败");
				result.setStatus("FAIL");
			}
		}
		else {
			// 支付失败记录失败日志
			result.setMessage("支付失败");
			result.setStatus("FAIL");
			PMPayment updateSatusPaymentModel = new PMPayment();
			updateSatusPaymentModel.setId(paymentMainModel.getId());
			updateSatusPaymentModel.setStatus("3");
			pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
			// 更新订单产品信息为支付失败
			productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "3");
		}
		// // 后序要修改 start
		// // 后序要修改 end
		return result;
	}

	/**
	 * 接口参数复制
	 * 
	 * @return
	 */

	private Tx2011Request setTx2011Request(PMBankcard bankCardModel, PMPayment paymentMainModel) {
		Tx2011Request tx2011request = new Tx2011Request();

		tx2011request.setInstitutionID(txInstitutionID);
		tx2011request.setAccountName(bankCardModel.getCustomname()); // 必填--姓名
		tx2011request.setAccountNumber(bankCardModel.getCustomcardno()); // 必填--银行卡号
		tx2011request.setAccountType(11); // 必填--账户类型 11=个人账户 12=企业账户
											// ----------目前代理人
											// 都是个人，以后出现企业账户了再做调整20161009
		tx2011request.setAmount(paymentMainModel.getOrderfee()); // 必填--金额，单位：分
		String bankcode = paymentplatformDao.getBankCodeByName("中金", bankCardModel.getBankcode());
		tx2011request.setBankID(bankcode); // 必填 --银行卡编码 TODO 需要做个查询
		tx2011request.setBranchName(""); // 可选 -- 分行名称
		tx2011request.setCity(""); // 有条件 --账户类型为12时必填
		tx2011request.setProvince(""); // 有条件 --账户类型为12时必填
		tx2011request.setContractUserID(""); // 可选 --协议用户编号允许为空
		tx2011request.setCvn2(bankCardModel.getCvn2()); // 有条件 --信用卡必填
		tx2011request.setValidDate(bankCardModel.getValiddate()); // 有条件--信用卡有效期，格式YYMM
																	// 当代扣信用卡时，该项必填
		tx2011request.setEmail(""); // 可选--邮箱
		tx2011request.setIdentificationNumber(bankCardModel.getIdentificationNumber()); // 必填--身份证号码
		tx2011request.setIdentificationType(bankCardModel.getIdentificationType()); // 必填--证件号类型
		tx2011request.setNote("业务类型"); // 可选--建议填写业务类型
		tx2011request.setPhoneNumber(bankCardModel.getCustomphone()); // 必填--手机号码
		tx2011request.setSettlementFlag("0001"); // 必填--结算标识符：默认0001 代表银行账号？
													// TODO
		tx2011request.setTxSN(paymentMainModel.getPayProtocolid());

		return tx2011request;
	}

	@Override
	public BaseModel orderPayTx1361(PMPayment paymentMainModel) {
		BaseModel result = new BaseModel();

		// 得到订单绑定银行卡信息
		PMBankcard bankCardModel = bankcardDao.selectDataByProtocolid(paymentMainModel.getProtocolid());
		Tx1361Request txRequest = setTx1361Request(bankCardModel, paymentMainModel);

		Tx1361Response zhongjinResponse = null;
		PMLogRecords pmLogRecords = new PMLogRecords();
		pmLogRecords.setCreatedate(new Date());
		pmLogRecords.setAppId(paymentMainModel.getAppId());
		pmLogRecords.setPaymentId(paymentMainModel.getId());
		pmLogRecords.setAppOrderid(paymentMainModel.getAppOrderId());
		pmLogRecords.setPlatformUserId(String.valueOf(paymentMainModel.getAppUserId()));
		pmLogRecords.setProductId(null);
		pmLogRecords.setInterfaceType(0);
		pmLogRecords.setInterfaceName("市场订单单笔代收");
		pmLogRecords.setInterfaceMethod("1361");
		net.sf.json.JSONObject Request = net.sf.json.JSONObject.fromObject(txRequest);
		pmLogRecords.setRequestParams(Request.toString());
		pmLogRecordsDao.insertLogRecords(pmLogRecords);
		// 启动定时任务
		String jobName = "tx1361_" + pmLogRecords.getId() + "_" + paymentMainModel.getPayProtocolid();
		quartzUtil.timeOut4TxQuartz(sched, jobName, "timeout1361", "1361");
		System.out.println("1361Request.toString()" + Request.toString());
		// 启动定时任务
		// 开个timeout2011定时任务(4秒延时处理,3秒执行一次，执行4次)用于查询，防止参数过去了，而且返回报文因断网而丢失，通过查询状态更新平台订单信息
		try {
			String[] respMsg = TxCore.handlerParam(txRequest, "1361", "市场订单单笔代收");
			zhongjinResponse = new Tx1361Response(respMsg[0], respMsg[1]);
		}
		catch (Exception e) {
			e.printStackTrace();
			System.out.println("1361接口反馈报文失败");
			pmLogRecords.setRemark("1361接口反馈报文失败");
		}
		net.sf.json.JSONObject Response = net.sf.json.JSONObject.fromObject(zhongjinResponse);
		pmLogRecords.setResponseParams(Response.toString());
		pmLogRecordsDao.updateLogRecordsOfResponse(pmLogRecords);
		System.out.println("1361Response.toString()" + Response.toString());
		if ("2000".equals(zhongjinResponse.getCode())) {

			// 有个4秒延时处理，当2011接口报文反馈回来，关闭timeout2011定时任务
			// 取消开始90秒定时任务
			quartzUtil.deleteHistoryJob(sched, jobName, "timeout1361");
			if (zhongjinResponse.getStatus() == 20) {
				result.setMessage("支付中");
				result.setStatus("REST");
				// 正在处理马上开始查询
				quartzUtil.poll4TxQuartz(sched, jobName, "poll1361", "1361");
				// 更新订单信息为支付中
				PMPayment updateSatusPaymentModel = new PMPayment();
				updateSatusPaymentModel.setId(paymentMainModel.getId());
				updateSatusPaymentModel.setStatus("1");
				pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
				// 更新订单产品信息为支付中
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "1");
			}
			else if (zhongjinResponse.getStatus() == 30) {
				result.setMessage("支付成功");
				result.setStatus("OK");
				// 接口操作日志状态更新
				pmLogRecordsDao.updateLogStatusById(pmLogRecords.getId());
				// 更新订单信息为支付成功
				PMPayment updateSatusPaymentModel = new PMPayment();
				updateSatusPaymentModel.setId(paymentMainModel.getId());
				updateSatusPaymentModel.setStatus("2");
				updateSatusPaymentModel.setPayfee(paymentMainModel.getOrderfee());
				pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
				// 更新订单产品信息为支付成功
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "2");
				// 费用统计
				ratefeeService.netReceiptsAppRateFee(paymentMainModel.getId(), paymentMainModel.getAppId(), paymentMainModel.getOrderfee(),
						"0");
				ratefeeService.netReceiptsPaymentRateFee(paymentMainModel.getId(), paymentMainModel.getPlatformId(),
						paymentMainModel.getOrderfee(), "0");

				// 结算
				List<PMProducts> products = productsDao.selectByPaymentId(paymentMainModel.getId());
				for (PMProducts product : products) {
					taskExecutor.execute(new Runnable() {
						@Override
						public void run() {
							// 当1361接口成功时，反馈给用户就是成功，如果1341出现问题记录日志**************************
							autoStatementTx1341(paymentMainModel, product);
						}
					});
				}

			}
			else if (zhongjinResponse.getStatus() == 40) {
				result.setMessage("支付失败");
				result.setStatus("FAIL");
				// 更新订单信息为支付中
				PMPayment updateSatusPaymentModel = new PMPayment();
				updateSatusPaymentModel.setId(paymentMainModel.getId());
				updateSatusPaymentModel.setStatus("3");
				pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
				// 更新订单产品信息为支付失败
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "3");
			}
		}
		else {
			result.setMessage("支付失败");
			result.setStatus("FAIL");
			// 更新订单信息为支付中
			PMPayment updateSatusPaymentModel = new PMPayment();
			updateSatusPaymentModel.setId(paymentMainModel.getId());
			updateSatusPaymentModel.setStatus("3");
			pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
			// 更新订单产品信息为支付失败
			productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "3");
		}
		// 后序要修改 start

		// 后序要修改 end
		return result;
	}

	private Tx1361Request setTx1361Request(PMBankcard bankCardModel, PMPayment paymentMainModel) {

		Tx1361Request tx1361Request = new Tx1361Request();

		tx1361Request.setInstitutionID(txInstitutionID);
		tx1361Request.setTxSN(paymentMainModel.getPayProtocolid()); // 必填--交易流水号
		tx1361Request.setOrderNo(paymentMainModel.getOrderid()); // 必填--市场订单号
		tx1361Request.setAmount(paymentMainModel.getOrderfee()); // 必填--金额，单位：分
		String bankcode = paymentplatformDao.getBankCodeByName("中金", bankCardModel.getBankcode());
		tx1361Request.setBankID(bankcode); // 必填--银行ID
		tx1361Request.setCvn2(bankCardModel.getCvn2()); // 有条件填--信用卡背面的末3
														// 位数字--当代扣信用卡时，该项必填
		tx1361Request.setValidDate(bankCardModel.getValiddate()); // 有条件--信用卡有效期，格式YYMM--当代扣信用卡时，该项必填
		tx1361Request.setAccountName(bankCardModel.getCustomname()); // 必填--账户名称
		tx1361Request.setAccountNumber(bankCardModel.getCustomcardno());// 必填--账户号码
		tx1361Request.setBranchName(""); // 有条件--分支行--当AccountType=12 时，该项必填
		tx1361Request.setProvince(""); // 有条件--省份--当AccountType=12 时，该项必填
		tx1361Request.setAccountType(11); // 必填--账户类型：11=个人账户 12=企业账户
											// ----------目前代理人
											// 都是个人，以后出现企业账户了再做调整20161009
		tx1361Request.setCity(""); // 有条件--市--当AccountType=12 时，该项必填
		tx1361Request.setNote("交易类型");
		tx1361Request.setPhoneNumber(bankCardModel.getCustomphone()); // 必填--手机号
		tx1361Request.setEmail(""); // 可选--邮箱号
		tx1361Request.setIdentificationNumber(bankCardModel.getIdentificationNumber()); // 必填--证件号
		tx1361Request.setIdentificationType(bankCardModel.getIdentificationType()); // 必填--开户证件类型
		tx1361Request.setContractUserID(""); // 可选--协议用户编号。目前允许为空

		// String newPayees = swModel.getPayees().replaceAll("；", ";");
		// if (StringUtils.isNoneBlank(newPayees)) {
		// String[] payeeList = newPayees.split(";");
		// for (int i = 0; i < payeeList.length; i++) {
		// tx1361Request.addPayee(payeeList[i]);
		// }
		// }
		return tx1361Request;
	}

	@Override
	public BaseModel autoStatementTx1341(PMPayment paymentModel, PMProducts productModel) {
		BaseModel result = new BaseModel();

		String statementProtocolId = GUID.generateGUID();
		Tx1341Request txRequest = setTx1341Request(statementProtocolId, paymentModel, productModel);

		PMLogRecords pmLogRecords = new PMLogRecords();
		pmLogRecords.setCreatedate(new Date());
		pmLogRecords.setAppId(paymentModel.getAppId());
		pmLogRecords.setPaymentId(paymentModel.getId());
		pmLogRecords.setAppOrderid(paymentModel.getAppOrderId());
		pmLogRecords.setPlatformUserId(String.valueOf(paymentModel.getAppUserId()));
		pmLogRecords.setProductId(productModel.getId());
		pmLogRecords.setInterfaceType(0);
		pmLogRecords.setInterfaceName("市场订单结算");
		pmLogRecords.setInterfaceMethod("1341");
		net.sf.json.JSONObject Request = net.sf.json.JSONObject.fromObject(txRequest);
		pmLogRecords.setRequestParams(Request.toString());
		pmLogRecordsDao.insertLogRecords(pmLogRecords);
		// 启动定时任务
		// 开个timeout1341定时任务(4秒延时处理,3秒执行一次，执行4次)用于查询，防止参数过去了，而且返回报文因断网而丢失，通过查询状态更新平台订单信息
		String jobName = "tx1341_" + pmLogRecords.getId() + "_" + statementProtocolId;
		quartzUtil.timeOut4TxQuartz(sched, jobName, "timeout1341", "1341");

		Tx134xResponse zhongjinResponse = null;
		try {
			String[] respMsg = TxCore.handlerParam(txRequest, "1341", "市场订单结算");
			zhongjinResponse = new Tx134xResponse(respMsg[0], respMsg[1]);
		}
		catch (Exception e) {
			e.printStackTrace();
			System.out.println("1341接口反馈报文失败");
			pmLogRecords.setRemark("1341接口反馈报文失败");
		}
		net.sf.json.JSONObject Response = net.sf.json.JSONObject.fromObject(zhongjinResponse);
		pmLogRecords.setResponseParams(Response.toString());
		pmLogRecordsDao.updateLogRecordsOfResponse(pmLogRecords);
		if ("2000".equals(zhongjinResponse.getCode())) {

			// 有个4秒延时处理，当1341接口报文反馈回来，关闭timeout2011定时任务
			// 取消开始90秒定时任务
			quartzUtil.deleteHistoryJob(sched, jobName, "timeout1341");
			// 接口操作日志状态更新
			pmLogRecordsDao.updateLogStatusById(pmLogRecords.getId());
			// 更新订单子表信息
			PMProducts record = new PMProducts();
			record.setId(productModel.getId());
			record.setStatementProtocolid(statementProtocolId);
			record.setStatementStatus("0");
			productsDao.updateByPrimaryKeySelective(record);

		}
		else {
			PMProducts record = new PMProducts();
			record.setId(productModel.getId());
			record.setStatementProtocolid(statementProtocolId);
			record.setStatementStatus("1");
			productsDao.updateByPrimaryKeySelective(record);
			result.setMessage("结算失败");
			result.setStatus("FAIL");
		}
		// 后序要修改 start
		PMProducts record = new PMProducts();
		record.setId(productModel.getId());
		record.setStatementProtocolid(statementProtocolId);
		record.setStatementStatus("0");
		productsDao.updateByPrimaryKeySelective(record);
		// 后序要修改 end
		return result;
	}

	private Tx1341Request setTx1341Request(String statementProtocolId, PMPayment paymentModel, PMProducts productModel) {
		Tx1341Request tx1341Request = new Tx1341Request();

		tx1341Request.setInstitutionID(txInstitutionID);
		tx1341Request.setSerialNumber(statementProtocolId);
		tx1341Request.setOrderNo(paymentModel.getOrderid());
		tx1341Request.setAmount(productModel.getOrderfee());
		tx1341Request.setRemark("测试1341");
		tx1341Request.setAccountType(Integer.parseInt(productModel.getAccountType())); // 应用平台记录账户类型
		tx1341Request.setPaymentAccountName(""); // AccountType=20 时，该项必填
		tx1341Request.setPaymentAccountNumber(""); // AccountType=20 时，该项必填

		BankAccount bankAccount = new BankAccount();
		bankAccount.setBankID(productModel.getBankID()); // 这个应该应用平台记录
		bankAccount.setAccountName(productModel.getAccountName()); // 账号应用平添记录
		bankAccount.setAccountNumber(productModel.getAccountNumber());// 账号应用平添记录
		bankAccount.setBranchName(productModel.getBranchName());// 账号应用平添记录
		bankAccount.setProvince(productModel.getProvince());// 账号应用平添记录
		bankAccount.setCity(productModel.getCity());// 账号应用平添记录
		tx1341Request.setBankAccount(bankAccount);

		List<String> paymentNoList = new ArrayList<String>();
		paymentNoList.add(paymentModel.getPayProtocolid());

		tx1341Request.setPaymentNoList(paymentNoList);

		return tx1341Request;

	}

	@Override
	public Map<String, Object> selectOrdersList(Map<String, Object> map) {
		long total = pmPaymentDao.getOrdersListCount(map);
		List<Map<Object, Object>> infoList = pmPaymentDao.selectOrdersList(map);
		for (int i = 0; i < infoList.size(); i++) {
			Map<Object, Object> map2 = infoList.get(i);
			Object status = map2.get("status");
			if (status != null && !"".equals(status)) {
				if (status.equals("2")) {
					map2.put("status", "成功");
				}
				else if (status.equals("3")) {
					map2.put("status", "失败");
				}
			}
			Object modifydate = map2.get("modifydate");
			if (modifydate != null && !"".equals(modifydate)) {
				modifydate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(modifydate);
			}
			map2.put("modifydate", modifydate);
			Object arrivaltime = map2.get("arrivaltime");
			if (arrivaltime != null && !"".equals(arrivaltime)) {
				arrivaltime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(arrivaltime);
			}
			map2.put("arrivaltime", arrivaltime);
			int payfee = Integer.parseInt(map2.get("payfee").toString());
			map2.put("payfee", new DecimalFormat("#,##0.00").format(new BigDecimal(payfee).movePointLeft(2)));
		}
		Map<String, Object> maps = new HashMap<String, Object>();
		System.out.println(LogDateUtil.getTime() + ":selectOrdersList结果：-----------" + infoList);
		maps.put("total", total);
		maps.put("rows", infoList);
		return maps;
	}

	@Override
	public Map<String, Object> getTotalMoneys(PlatformModel platformBean) {
		String forMoneys = pmPaymentDao.getForMoneys(platformBean);
		String outMoneys = pmPaymentDao.getOutMoneys(platformBean);
		forMoneys = StringUtil.isEmpty(forMoneys) ? "0" : forMoneys;
		outMoneys = StringUtil.isEmpty(outMoneys) ? "0" : outMoneys;
		Map<String, Object> maps = new HashMap<String, Object>();
		maps.put("forMoneys", forMoneys);
		maps.put("outMoneys", outMoneys);
		return maps;
	}

	@Override
	public Map<String, Object> selectPlatformList(Map<String, Object> map) {
		long total = pmPaymentDao.getPlatformListCount(map);
		List<Map<Object, Object>> infoList = pmPaymentDao.selectPlatformList(map);
		for (int i = 0; i < infoList.size(); i++) {
			Map<Object, Object> map2 = infoList.get(i);
			// 本日入账总金额
			Object todayforfee = map2.get("todayforfee");
			if (todayforfee != null && !"".equals(todayforfee)) {
				int todayforfee1 = Integer.parseInt(map2.get("todayforfee").toString());
				map2.put("todayforfee", new DecimalFormat("#,##0.00").format(new BigDecimal(todayforfee1).movePointLeft(2)));
			}
			// 本月入账总金额
			Object tomonthforfee = map2.get("tomonthforfee");
			if (tomonthforfee != null && !"".equals(tomonthforfee)) {
				int tomonthforfee1 = Integer.parseInt(map2.get("tomonthforfee").toString());
				map2.put("tomonthforfee", new DecimalFormat("#,##0.00").format(new BigDecimal(tomonthforfee1).movePointLeft(2)));
			}
			// 本日转出总金额
			Object todayoutfee = map2.get("todayoutfee");
			if (todayoutfee != null && !"".equals(todayoutfee)) {
				int todayoutfee1 = Integer.parseInt(map2.get("todayoutfee").toString());
				map2.put("todayoutfee", new DecimalFormat("#,##0.00").format(new BigDecimal(todayoutfee1).movePointLeft(2)));
			}
			// 本月转出总金额
			Object tomonthoutfee = map2.get("tomonthoutfee");
			if (tomonthoutfee != null && !"".equals(tomonthoutfee)) {
				int tomonthoutfee1 = Integer.parseInt(map2.get("tomonthoutfee").toString());
				map2.put("tomonthoutfee", new DecimalFormat("#,##0.00").format(new BigDecimal(tomonthoutfee1).movePointLeft(2)));
			}
			// 总手续费金额
			Object totalProceduresFee = map2.get("totalProceduresFee");
			if (totalProceduresFee != null && !"".equals(totalProceduresFee)) {
				int totalProceduresFee1 = Integer.parseInt(map2.get("totalProceduresFee").toString());
				map2.put("totalProceduresFee", new DecimalFormat("#,##0.00").format(new BigDecimal(totalProceduresFee1).movePointLeft(2)));
			}

			Object status = map2.get("platformStutas");
			if (status != null && !"".equals(status)) {
				if (status.equals("0")) {
					map2.put("platformStutas", "启用");
				}
				else if (status.equals("1")) {
					map2.put("platformStutas", "禁用");
				}
			}
		}
		Map<String, Object> maps = new HashMap<String, Object>();
		System.out.println(LogDateUtil.getTime() + ":selectPlatformList结果：-----------" + infoList);
		maps.put("total", total);
		maps.put("rows", infoList);
		return maps;
	}

	@Override
	public Map<String, Object> selectAppPlatformList(Map<String, Object> map) {
		long total = pmPaymentDao.getAppPlatformListCount(map);
		List<Map<Object, Object>> infoList = pmPaymentDao.selectAppPlatformList(map);
		for (int i = 0; i < infoList.size(); i++) {
			Map<Object, Object> map2 = infoList.get(i);
			// 本日入账总金额
			Object todayforfee = map2.get("todayforfee");
			if (todayforfee != null && !"".equals(todayforfee)) {
				int todayforfee1 = Integer.parseInt(map2.get("todayforfee").toString());
				map2.put("todayforfee", new DecimalFormat("#,##0.00").format(new BigDecimal(todayforfee1).movePointLeft(2)));
			}
			// 本月入账总金额
			Object tomonthforfee = map2.get("tomonthforfee");
			if (tomonthforfee != null && !"".equals(tomonthforfee)) {
				int tomonthforfee1 = Integer.parseInt(map2.get("tomonthforfee").toString());
				map2.put("tomonthforfee", new DecimalFormat("#,##0.00").format(new BigDecimal(tomonthforfee1).movePointLeft(2)));
			}
			// 本日转出总金额
			Object todayoutfee = map2.get("todayoutfee");
			if (todayoutfee != null && !"".equals(todayoutfee)) {
				int todayoutfee1 = Integer.parseInt(map2.get("todayoutfee").toString());
				map2.put("todayoutfee", new DecimalFormat("#,##0.00").format(new BigDecimal(todayoutfee1).movePointLeft(2)));
			}
			// 本月转出总金额
			Object tomonthoutfee = map2.get("tomonthoutfee");
			if (tomonthoutfee != null && !"".equals(tomonthoutfee)) {
				int tomonthoutfee1 = Integer.parseInt(map2.get("tomonthoutfee").toString());
				map2.put("tomonthoutfee", new DecimalFormat("#,##0.00").format(new BigDecimal(tomonthoutfee1).movePointLeft(2)));
			}
			// 总手续费金额
			Object totalProceduresFee = map2.get("totalProceduresFee");
			if (totalProceduresFee != null && !"".equals(totalProceduresFee)) {
				int totalProceduresFee1 = Integer.parseInt(map2.get("totalProceduresFee").toString());
				map2.put("totalProceduresFee", new DecimalFormat("#,##0.00").format(new BigDecimal(totalProceduresFee1).movePointLeft(2)));
			}
			// 平台状态
			Object status = map2.get("platformStutas");
			if (status != null && !"".equals(status)) {
				if (status.equals("0")) {
					map2.put("platformStutas", "启用");
				}
				else if (status.equals("1")) {
					map2.put("platformStutas", "禁用");
				}
			}
		}
		Map<String, Object> maps = new HashMap<String, Object>();
		System.out.println(LogDateUtil.getTime() + ":selectAppPlatformList结果：-----------" + infoList);
		maps.put("total", total);
		maps.put("rows", infoList);
		return maps;
	}

	@Override
	public Map<String, Object> getTotalMoneys(AppCheckModel appCheckBean) {
		String forMoneys = pmPaymentDao.getForMoneys(appCheckBean);
		String outMoneys = pmPaymentDao.getOutMoneys(appCheckBean);
		Map<String, Object> maps = new HashMap<String, Object>();
		forMoneys = StringUtil.isEmpty(forMoneys) ? "0" : forMoneys;
		outMoneys = StringUtil.isEmpty(outMoneys) ? "0" : outMoneys;
		maps.put("forMoneys", forMoneys);
		maps.put("outMoneys", outMoneys);
		return maps;
	}

	@Override
	public Map<String, Object> selectAppOrdersList(Map<String, Object> map) {
		long total = pmPaymentDao.getAppOrdersListCount(map);
		List<Map<Object, Object>> infoList = pmPaymentDao.selectAppOrdersList(map);
		for (int i = 0; i < infoList.size(); i++) {
			Map<Object, Object> map2 = infoList.get(i);
			Object status = map2.get("status");
			if (status != null && !"".equals(status)) {
				if (status.equals("2")) {
					map2.put("status", "成功");
				}
				else if (status.equals("3")) {
					map2.put("status", "失败");
				}
			}
			Object modifydate = map2.get("modifydate");
			if (modifydate != null && !"".equals(modifydate)) {
				modifydate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(modifydate);
			}
			map2.put("modifydate", modifydate);
			Object arrivaltime = map2.get("arrivaltime");
			if (arrivaltime != null && !"".equals(arrivaltime)) {
				arrivaltime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(arrivaltime);
			}
			map2.put("arrivaltime", arrivaltime);
			int payfee = Integer.parseInt(map2.get("payfee").toString());
			map2.put("payfee", new DecimalFormat("#,##0.00").format(new BigDecimal(payfee).movePointLeft(2)));
		}
		Map<String, Object> maps = new HashMap<String, Object>();
		System.out.println(LogDateUtil.getTime() + ":selectAppOrdersList结果：-----------" + infoList);
		maps.put("total", total);
		maps.put("rows", infoList);
		return maps;
	}

	@Override
	public PMPayment getBasicMess(String paymentId) {
		return pmPaymentDao.getBasicMess(paymentId);
	}

	@Override
	public String getOpenIdByCode(String code) {
		// 以获取用户授权码，通过授权码获取用户openid
		// 组建参数
		Map<String, String> params = new HashMap<String, String>();
		params.put("code", code);
		params.put("appid", SysParams.APP_ID);
		params.put("secret", SysParams.APP_SECRET);
		params.put("grant_type", "authorization_code");

		JSONObject baseInfoResponse = MessageSender.sendGetMessage(MessageSender.getCustomerToken, params);

		if (baseInfoResponse.containsKey("errcode")) {
			// log.error("\n##################\n系统错误，无法从微信平台获取用户基本信息"+baseInfoResponse.toString());
			return null;
		}
		// 获取用户的openID
		String openId = baseInfoResponse.getString("openid");

		return openId;
	}

	@Override
	public JSONObject sendOrderToWeixin(HashMap<String, String> params, String url) {

		String sign = "";
		JSONObject wxResp = null;
		try {
			// 进行签名运算
			sign = getSignature(params, SysParams.API_KEY);

			// 准备发起HTTPS请求
			wxResp = PaymentMessageSender.sendPostMessage(url, params, sign);
			System.out.println(wxResp.toJSONString());
		}
		catch (Exception e) {
			e.printStackTrace();
			/*
			 * log.error("解析微信返回消息异常",e); throw new
			 * CommunicationErrorException("微信支付接口异常，无法完成支付，请稍候再试");
			 */
		}

		// 成功了，返回prepay_id
		return wxResp;

	}

	/**
	 * 签名生成算法
	 * 
	 * @param HashMap<String,String>
	 *            params 请求参数集，所有参数必须已转换为字符串类型
	 * @param String
	 *            secret 签名密钥
	 * @return 签名
	 * @throws IOException
	 */
	public static String getSignature(HashMap<String, String> params, String secret) throws IOException {
		// 先将参数以其参数名的字典序升序进行排序
		Map<String, String> sortedParams = new TreeMap<String, String>(params);
		Set<Entry<String, String>> entrys = sortedParams.entrySet();

		// 遍历排序后的字典，将所有参数按"key=value"格式拼接在一起
		StringBuilder basestring = new StringBuilder();
		int n = 1;
		for (Entry<String, String> param : entrys) {

			if (n == 1) {
				basestring.append(param.getKey()).append("=").append(param.getValue() + "");
			}
			else {
				basestring.append("&" + param.getKey()).append("=").append(param.getValue());
			}

			n++;
		}
		basestring.append("" + SysParams.API_KEY);
		System.out.println(basestring);
		// 使用MD5对待签名串求签
		byte[] bytes = null;
		try {
			MessageDigest md5 = MessageDigest.getInstance("MD5");
			bytes = md5.digest(basestring.toString().getBytes("UTF-8"));
		}
		catch (GeneralSecurityException ex) {
			throw new IOException(ex);
		}

		// 将MD5输出的二进制结果转换为小写的十六进制
		StringBuilder sign = new StringBuilder();
		for (int i = 0; i < bytes.length; i++) {
			String hex = Integer.toHexString(bytes[i] & 0xFF).toUpperCase();
			if (hex.length() == 1) {
				sign.append("0");
			}
			sign.append(hex);
		}
		return sign.toString();
	}

	private static String byteArrayToHexString(byte b[]) {
		StringBuffer resultSb = new StringBuffer();
		for (int i = 0; i < b.length; i++)
			resultSb.append(byteToHexString(b[i]));

		return resultSb.toString();
	}

	private static String byteToHexString(byte b) {
		int n = b;
		if (n < 0)
			n += 256;
		int d1 = n / 16;
		int d2 = n % 16;
		return hexDigits[d1] + hexDigits[d2];
	}

	public static String MD5Encode(String origin, String charsetname) {
		String resultString = null;
		try {
			resultString = new String(origin);
			MessageDigest md = MessageDigest.getInstance("MD5");
			if (charsetname == null || "".equals(charsetname))
				resultString = byteArrayToHexString(md.digest(resultString.getBytes()));
			else
				resultString = byteArrayToHexString(md.digest(resultString.getBytes(charsetname)));
		}
		catch (Exception exception) {
		}
		return resultString;
	}

	private static final String hexDigits[] = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f" };

	@Override
	public Map<String, Object> selectAllOrdersList(Map<String, Object> map) {
		long total = pmPaymentDao.getAllOrdersListCount(map);
		List<Map<Object, Object>> infoList = pmPaymentDao.selectAllOrdersList(map);
		for (int i = 0; i < infoList.size(); i++) {
			Map<Object, Object> map2 = infoList.get(i);
			Object orderfee = map2.get("orderfee");
			if (orderfee != null && !"".equals(orderfee)) {
				int orderfee1 = Integer.parseInt(map2.get("orderfee").toString());
				map2.put("orderfee", new DecimalFormat("#,##0.00").format(new BigDecimal(orderfee1).movePointLeft(2)));
			}
			Object status = map2.get("status");
			if (status != null && !"".equals(status)) {
				if (status.equals("0")) {
					map2.put("status", "待支付");
				}
				else if (status.equals("1")) {
					map2.put("status", "支付中");
				}
				else if (status.equals("2")) {
					map2.put("status", "支付成功");
				}
				else if (status.equals("3")) {
					map2.put("status", "支付失败");
				}
				else if (status.equals("4")) {
					map2.put("status", "支付取消");
				}
			}
			Object orderdatetime = map2.get("orderdatetime");
			if (orderdatetime != null && !"".equals(orderdatetime)) {
				try {
					orderdatetime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
							.format(new SimpleDateFormat("yyyyMMddHHmmss").parse(String.valueOf(orderdatetime)));
				}
				catch (ParseException e) {
					e.printStackTrace();
					orderdatetime = null;
				}
			}
			map2.put("orderdatetime", orderdatetime);
		}
		Map<String, Object> maps = new HashMap<String, Object>();
		System.out.println(LogDateUtil.getTime() + ":selectAllOrdersList结果：-----------" + infoList);
		maps.put("total", total);
		maps.put("rows", infoList);
		return maps;
	}

	@Override
	public OrdersDetailModel selectOrdersDetailById(String id) {
		return pmPaymentDao.selectOrdersDetailById(id);
	}

	public static void main(String[] args) {
		
	}

	@Override
	public Map<String, Object> selectDirectPayment2011List(Map<String, Object> map) {

		long total = pmPaymentDao.selectDirectPayment2011ListCount(map);
		List<Map<Object, Object>> infoList = pmPaymentDao.selectDirectPayment2011List(map);
		for (int i = 0; i < infoList.size(); i++) {
			Map<Object, Object> map2 = infoList.get(i);
			Object orderfee = map2.get("orderfee");
			if (orderfee != null && !"".equals(orderfee)) {
				int orderfee1 = Integer.parseInt(map2.get("orderfee").toString());
				map2.put("orderfee", new DecimalFormat("#,##0.00").format(new BigDecimal(orderfee1).movePointLeft(2)));
			}
			Object status = map2.get("status");
			if (status != null && !"".equals(status)) {
				if (status.equals("0")) {
					map2.put("status", "待支付");
				}
				else if (status.equals("1")) {
					map2.put("status", "支付中");
				}
				else if (status.equals("2")) {
					map2.put("status", "支付成功");
				}
				else if (status.equals("3")) {
					map2.put("status", "支付失败");
				}
				else if (status.equals("4")) {
					map2.put("status", "支付取消");
				}
			}
			Object orderdatetime = map2.get("orderdatetime");
			if (orderdatetime != null && !"".equals(orderdatetime)) {
				try {
					orderdatetime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
							.format(new SimpleDateFormat("yyyyMMddHHmmss").parse(String.valueOf(orderdatetime)));
				}
				catch (ParseException e) {
					e.printStackTrace();
					orderdatetime = null;
				}
			}
			map2.put("orderdatetime", orderdatetime);
		}
		Map<String, Object> maps = new HashMap<String, Object>();
		maps.put("total", total);
		maps.put("rows", infoList);
		return maps;
	}

	@Override
	public PMLogRecords getLogRecordsInfoByPaymentID(Map<String, Object> map) {
		return appplatformuserbankcardDao.getLogRecordsInfoByPaymentID(map);
	}

	@Override
	public Map<String, Object> visitAgain2011(Map<String, Object> map, INSCUser loginUser, HttpServletRequest request) {
		Map<String, Object> result = new HashMap<String, Object>();
		PMLogRecords pmLogRecords = appplatformuserbankcardDao.getLogRecordsInfoByPaymentID(map);
		PMPayment paymentMainModel = pmPaymentDao.selectById(Long.parseLong(String.valueOf(map.get("paymentid"))));
		String requestParams = null;
		if (StringUtil.isEmpty(pmLogRecords)) {
			// 得到订单绑定银行卡信息
			PMBankcard bankCardModel = bankcardDao.selectDataByProtocolid(paymentMainModel.getProtocolid());
			Tx2011Request txRequest = setTx2011Request(bankCardModel, paymentMainModel);
			pmLogRecords.setCreatedate(new Date());
			pmLogRecords.setAppId(paymentMainModel.getAppId());
			pmLogRecords.setPaymentId(paymentMainModel.getId());
			pmLogRecords.setAppOrderid(paymentMainModel.getAppOrderId());
			pmLogRecords.setPlatformUserId(String.valueOf(paymentMainModel.getAppUserId()));
			pmLogRecords.setProductId(null);
			pmLogRecords.setInterfaceType(0);
			pmLogRecords.setInterfaceName("单笔代收");
			pmLogRecords.setInterfaceMethod("2011");
			net.sf.json.JSONObject Request = net.sf.json.JSONObject.fromObject(txRequest);
			pmLogRecords.setRequestParams(Request.toString());
			pmLogRecordsDao.insertLogRecords(pmLogRecords);
			requestParams = pmLogRecords.getRequestParams();
		}
		else {
			if ((StringUtil.isNotEmpty(pmLogRecords.getResponseParams()) && pmLogRecords.getResponseParams().indexOf("30") >= 0)
					|| "1".equals(pmLogRecords.getStatus())) {
				result.put("message", "日志显示返回参数为成功，不可再次访问！");
				result.put("status", "SPECIAL");
				return result;
			}
			requestParams = pmLogRecords.getRequestParams();
		}
		Tx2011Request txRequest = JSON.parseObject(requestParams, Tx2011Request.class);
		String[] respMsg = TxCore.handlerParam(txRequest, "2011", "单笔代收");
		Tx2011Response zhongjinResponse = null;
		try {
			zhongjinResponse = new Tx2011Response(respMsg[0], respMsg[1]);
		}
		catch (Exception e) {
			e.printStackTrace();
			System.out.println("2011接口反馈报文失败");
			result.put("status", "FAIL");
			pmLogRecords.setRemark(pmLogRecords.getRemark() + "【" + loginUser.getName() + "-手动操作-FAIL接口反馈报文失败-"
					+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "】");
		}
		if ("2000".equals(zhongjinResponse.getCode())) {

			if (zhongjinResponse.getStatus() == 20) {
				result.put("message", "支付中");
				result.put("status", "REST");
				pmLogRecords.setRemark(pmLogRecords.getRemark() + "【" + loginUser.getName() + "-手动操作-rest支付中-"
						+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "】");
				PMPayment updateSatusPaymentModel = new PMPayment();
				updateSatusPaymentModel.setId(paymentMainModel.getId());
				updateSatusPaymentModel.setStatus("1");
				pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
				// 更新订单产品信息为支付中
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "1");
			}
			else if (zhongjinResponse.getStatus() == 30) {
				result.put("message", "支付成功");
				result.put("status", "OK");
				pmLogRecords.setRemark(pmLogRecords.getRemark() + "【" + loginUser.getName() + "-手动操作-ok支付成功-"
						+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "】");
				PMPayment updateSatusPaymentModel = new PMPayment();
				updateSatusPaymentModel.setId(paymentMainModel.getId());
				updateSatusPaymentModel.setStatus("2");
				pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
				// 更新订单产品信息为支付成功
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "2");
				// 接口操作日志状态更新
				pmLogRecordsDao.updateLogStatusById(pmLogRecords.getId());
				// 费用统计
				ratefeeService.netReceiptsAppRateFee(paymentMainModel.getId(), paymentMainModel.getAppId(), paymentMainModel.getOrderfee(),
						"0");
				ratefeeService.netReceiptsPaymentRateFee(paymentMainModel.getId(), paymentMainModel.getPlatformId(),
						paymentMainModel.getOrderfee(), "0");
			}
			else if (zhongjinResponse.getStatus() == 40) {
				// 失败记录错误日志************************************
				PMPayment updateSatusPaymentModel = new PMPayment();
				updateSatusPaymentModel.setId(paymentMainModel.getId());
				updateSatusPaymentModel.setStatus("3");
				pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
				// 更新订单产品信息为支付失败
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "3");
				result.put("message", "支付失败");
				result.put("status", "FAIL");
				pmLogRecords.setRemark(pmLogRecords.getRemark() + "【" + loginUser.getName() + "-手动操作-fail支付失败-"
						+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "】");
			}
		}
		else {
			// 支付失败记录失败日志
			result.put("message", "支付失败");
			result.put("status", "FAIL");
			pmLogRecords.setRemark(pmLogRecords.getRemark() + "【" + loginUser.getName() + "-手动操作-fail支付失败-"
					+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "】");
			PMPayment updateSatusPaymentModel = new PMPayment();
			updateSatusPaymentModel.setId(paymentMainModel.getId());
			updateSatusPaymentModel.setStatus("3");
			pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
			// 更新订单产品信息为支付失败
			productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "3");
		}

		pmLogRecordsDao.updateLogRecordsOfResponse(pmLogRecords);

		if ("OK".equals(result.get("status"))) {
			// 记录每笔手续费结算
			syncSettlementPayment(paymentMainModel, "0");
		}

		pmLogRecords = appplatformuserbankcardDao.getLogRecordsInfoByPaymentID(map);
		result.put("request_params", pmLogRecords.getRequestParams());
		result.put("response_params", pmLogRecords.getResponseParams());
		result.put("remark", pmLogRecords.getRemark());
		return result;
	}

	@Override
	public Map<String, Object> selectSettlePayment1361List(Map<String, Object> map) {
		long total = pmPaymentDao.selectSettlePayment1361ListCount(map);
		List<Map<Object, Object>> infoList = pmPaymentDao.selectSettlePayment1361List(map);
		for (int i = 0; i < infoList.size(); i++) {
			Map<Object, Object> map2 = infoList.get(i);
			Object orderfee = map2.get("orderfee");
			if (orderfee != null && !"".equals(orderfee)) {
				int orderfee1 = Integer.parseInt(map2.get("orderfee").toString());
				map2.put("orderfee", new DecimalFormat("#,##0.00").format(new BigDecimal(orderfee1).movePointLeft(2)));
			}
			Object status = map2.get("status");
			if (status != null && !"".equals(status)) {
				if (status.equals("0")) {
					map2.put("status", "待支付");
				}
				else if (status.equals("1")) {
					map2.put("status", "支付中");
				}
				else if (status.equals("2")) {
					map2.put("status", "支付成功");
				}
				else if (status.equals("3")) {
					map2.put("status", "支付失败");
				}
				else if (status.equals("4")) {
					map2.put("status", "支付取消");
				}
			}
			Object orderdatetime = map2.get("orderdatetime");
			if (orderdatetime != null && !"".equals(orderdatetime)) {
				try {
					orderdatetime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
							.format(new SimpleDateFormat("yyyyMMddHHmmss").parse(String.valueOf(orderdatetime)));
				}
				catch (ParseException e) {
					e.printStackTrace();
					orderdatetime = null;
				}
			}
			map2.put("orderdatetime", orderdatetime);
		}
		Map<String, Object> maps = new HashMap<String, Object>();
		maps.put("total", total);
		maps.put("rows", infoList);
		return maps;
	}

	@Override
	public Map<String, Object> visitAgain1361(Map<String, Object> map, INSCUser loginUser, HttpServletRequest request) {
		Map<String, Object> result = new HashMap<String, Object>();
		PMLogRecords pmLogRecords = appplatformuserbankcardDao.getLogRecordsInfoByPaymentID(map);
		PMPayment paymentMainModel = pmPaymentDao.selectById(Long.parseLong(String.valueOf(map.get("paymentid"))));
		String requestParams = null;
		if (StringUtil.isEmpty(pmLogRecords)) {
			// 得到订单绑定银行卡信息
			PMBankcard bankCardModel = bankcardDao.selectDataByProtocolid(paymentMainModel.getProtocolid());
			Tx1361Request txRequest = setTx1361Request(bankCardModel, paymentMainModel);
			pmLogRecords.setCreatedate(new Date());
			pmLogRecords.setAppId(paymentMainModel.getAppId());
			pmLogRecords.setPaymentId(paymentMainModel.getId());
			pmLogRecords.setAppOrderid(paymentMainModel.getAppOrderId());
			pmLogRecords.setPlatformUserId(String.valueOf(paymentMainModel.getAppUserId()));
			pmLogRecords.setProductId(null);
			pmLogRecords.setInterfaceType(0);
			pmLogRecords.setInterfaceName("市场订单单笔代收");
			pmLogRecords.setInterfaceMethod("1361");
			net.sf.json.JSONObject Request = net.sf.json.JSONObject.fromObject(txRequest);
			pmLogRecords.setRequestParams(Request.toString());
			pmLogRecordsDao.insertLogRecords(pmLogRecords);
			requestParams = pmLogRecords.getRequestParams();
		}
		else {
			if ((StringUtil.isNotEmpty(pmLogRecords.getResponseParams()) && pmLogRecords.getResponseParams().indexOf("30") >= 0)
					|| "1".equals(pmLogRecords.getStatus())) {
				result.put("message", "日志显示返回参数为成功，不可再次访问！");
				result.put("status", "SPECIAL");
				return result;
			}
			requestParams = pmLogRecords.getRequestParams();
		}

		Tx1361Request txRequest = JSON.parseObject(requestParams, Tx1361Request.class);
		String[] respMsg = TxCore.handlerParam(txRequest, "1361", "市场订单单笔代收");
		Tx1361Response zhongjinResponse = null;
		try {
			zhongjinResponse = new Tx1361Response(respMsg[0], respMsg[1]);
		}
		catch (Exception e) {
			e.printStackTrace();
			System.out.println("2011接口反馈报文失败");
			result.put("status", "FAIL");
			pmLogRecords.setRemark(pmLogRecords.getRemark() + "【" + loginUser.getName() + "-手动操作-FAIL接口反馈报文失败-"
					+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "】");
		}
		if ("2000".equals(zhongjinResponse.getCode())) {

			if (zhongjinResponse.getStatus() == 20) {
				result.put("message", "支付中");
				result.put("status", "REST");
				pmLogRecords.setRemark(pmLogRecords.getRemark() + "【" + loginUser.getName() + "-手动操作-rest支付中-"
						+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "】");
				// 正在处理马上开始查询
				// 更新订单信息为支付中
				PMPayment updateSatusPaymentModel = new PMPayment();
				updateSatusPaymentModel.setId(paymentMainModel.getId());
				updateSatusPaymentModel.setStatus("1");
				pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
				// 更新订单产品信息为支付中
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "1");
			}
			else if (zhongjinResponse.getStatus() == 30) {
				result.put("message", "支付成功");
				result.put("status", "OK");
				pmLogRecords.setRemark(pmLogRecords.getRemark() + "【" + loginUser.getName() + "-手动操作-ok支付成功-"
						+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "】");
				// 接口操作日志状态更新
				pmLogRecordsDao.updateLogStatusById(pmLogRecords.getId());
				// 更新订单信息为支付成功
				PMPayment updateSatusPaymentModel = new PMPayment();
				updateSatusPaymentModel.setId(paymentMainModel.getId());
				updateSatusPaymentModel.setStatus("2");
				updateSatusPaymentModel.setPayfee(paymentMainModel.getOrderfee());
				pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
				// 更新订单产品信息为支付成功
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "2");
				// 费用统计
				ratefeeService.netReceiptsAppRateFee(paymentMainModel.getId(), paymentMainModel.getAppId(), paymentMainModel.getOrderfee(),
						"0");
				ratefeeService.netReceiptsPaymentRateFee(paymentMainModel.getId(), paymentMainModel.getPlatformId(),
						paymentMainModel.getOrderfee(), "0");

				// 结算
				List<PMProducts> products = productsDao.selectByPaymentId(paymentMainModel.getId());
				for (PMProducts product : products) {
					taskExecutor.execute(new Runnable() {
						@Override
						public void run() {
							// 当1361接口成功时，反馈给用户就是成功，如果1341出现问题记录日志**************************
							autoStatementTx1341(paymentMainModel, product);
						}
					});
				}

			}
			else if (zhongjinResponse.getStatus() == 40) {
				result.put("message", "支付失败");
				result.put("status", "FAIL");
				pmLogRecords.setRemark(pmLogRecords.getRemark() + "【" + loginUser.getName() + "-手动操作-fail支付失败-"
						+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "】");
				// 更新订单信息为支付中
				PMPayment updateSatusPaymentModel = new PMPayment();
				updateSatusPaymentModel.setId(paymentMainModel.getId());
				updateSatusPaymentModel.setStatus("3");
				pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
				// 更新订单产品信息为支付失败
				productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "3");
			}
		}
		else {
			result.put("message", "支付失败");
			result.put("status", "FAIL");
			pmLogRecords.setRemark(pmLogRecords.getRemark() + "【" + loginUser.getName() + "-手动操作-fail支付失败-"
					+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "】");
			// 更新订单信息为支付中
			PMPayment updateSatusPaymentModel = new PMPayment();
			updateSatusPaymentModel.setId(paymentMainModel.getId());
			updateSatusPaymentModel.setStatus("3");
			pmPaymentDao.updateByIdSelective(updateSatusPaymentModel);
			// 更新订单产品信息为支付失败
			productsDao.updateProductsStatusByPaymentId(paymentMainModel.getId(), "3");
		}

		pmLogRecordsDao.updateLogRecordsOfResponse(pmLogRecords);

		if ("OK".equals(result.get("status"))) {
			// 记录每笔手续费结算
			syncSettlementPayment(paymentMainModel, "0");
		}

		pmLogRecords = appplatformuserbankcardDao.getLogRecordsInfoByPaymentID(map);
		result.put("request_params", pmLogRecords.getRequestParams());
		result.put("response_params", pmLogRecords.getResponseParams());
		result.put("remark", pmLogRecords.getRemark());
		return result;
	}

	@Override
	public PMPayment checkPaySucc(Map<String, Object> map) {
		PMPayment paymentModel = pmPaymentDao.selectById(Long.parseLong(String.valueOf(map.get("id"))));
		return paymentModel;
	}

	@Override
	public Map<String, Object> selectSettleProduct1341List(Map<String, Object> map) {
		long total = pmPaymentDao.selectSettleProduct1341ListCount(map);
		List<Map<Object, Object>> infoList = pmPaymentDao.selectSettleProduct1341List(map);
		for (int i = 0; i < infoList.size(); i++) {
			Map<Object, Object> map2 = infoList.get(i);
			Object orderfee = map2.get("orderfee");
			if (orderfee != null && !"".equals(orderfee)) {
				int orderfee1 = Integer.parseInt(map2.get("orderfee").toString());
				map2.put("orderfee", new DecimalFormat("#,##0.00").format(new BigDecimal(orderfee1).movePointLeft(2)));
			}
			Object status = map2.get("status");
			if (status != null && !"".equals(status)) {
				if (status.equals("0")) {
					map2.put("status", "待支付");
				}
				else if (status.equals("1")) {
					map2.put("status", "支付中");
				}
				else if (status.equals("2")) {
					map2.put("status", "支付成功");
				}
				else if (status.equals("3")) {
					map2.put("status", "支付失败");
				}
				else if (status.equals("4")) {
					map2.put("status", "支付取消");
				}
			}
			Object statement_protocolid = map2.get("statement_protocolid");
			if (statement_protocolid != null && !"".equals(statement_protocolid)) {
				if (statement_protocolid.equals("0")) {
					map2.put("statement_protocolid", "成功");
				}
				else if (statement_protocolid.equals("1")) {
					map2.put("statement_protocolid", "失败");
				}
			}
			Object account_type = map2.get("account_type");
			if (account_type != null && !"".equals(account_type)) {
				if (account_type.equals("11")) {
					map2.put("account_type", "个人账户");
				}
				else if (account_type.equals("12")) {
					map2.put("account_type", "企业账户");
				}
				else if (account_type.equals("20")) {
					map2.put("account_type", "支付账户");
				}
			}
		}
		Map<String, Object> maps = new HashMap<String, Object>();
		maps.put("total", total);
		maps.put("rows", infoList);
		return maps;
	}

	@Override
	public PMLogRecords getLogRecordsInfoByPaymentIDandProductID(Map<String, Object> map) {
		return appplatformuserbankcardDao.getLogRecordsInfoByPaymentIDandProductID(map);
	}

	@Override
	public Map<String, Object> visitAgain1341(Map<String, Object> map, INSCUser loginUser, HttpServletRequest request) {
		Map<String, Object> result = new HashMap<String, Object>();
		PMLogRecords pmLogRecords = appplatformuserbankcardDao.getLogRecordsInfoByPaymentIDandProductID(map);
		PMProducts products = productsDao.selectByPrimaryKey(Long.parseLong(String.valueOf(map.get("paymentid"))));
		PMPayment paymentMainModel = pmPaymentDao.selectById(Long.parseLong(String.valueOf(map.get("paymentid"))));
		String requestParams = null;
		if (StringUtil.isEmpty(pmLogRecords)) {
			String statementProtocolId = GUID.generateGUID();
			Tx1341Request txRequest = setTx1341Request(statementProtocolId, paymentMainModel, products);
			pmLogRecords.setCreatedate(new Date());
			pmLogRecords.setAppId(paymentMainModel.getAppId());
			pmLogRecords.setPaymentId(paymentMainModel.getId());
			pmLogRecords.setAppOrderid(paymentMainModel.getAppOrderId());
			pmLogRecords.setPlatformUserId(String.valueOf(paymentMainModel.getAppUserId()));
			pmLogRecords.setProductId(products.getId());
			pmLogRecords.setInterfaceType(0);
			pmLogRecords.setInterfaceName("市场订单结算");
			pmLogRecords.setInterfaceMethod("1341");
			net.sf.json.JSONObject Request = net.sf.json.JSONObject.fromObject(txRequest);
			pmLogRecords.setRequestParams(Request.toString());
			pmLogRecordsDao.insertLogRecords(pmLogRecords);
			requestParams = pmLogRecords.getRequestParams();
		}
		else {
			if ((StringUtil.isNotEmpty(pmLogRecords.getResponseParams()) && pmLogRecords.getResponseParams().indexOf("2000") >= 0)
					|| "1".equals(pmLogRecords.getStatus())) {
				result.put("message", "日志显示返回参数为成功，不可再次访问！");
				result.put("status", "SPECIAL");
				return result;
			}
			requestParams = pmLogRecords.getRequestParams();
		}

		Tx1341Request txRequest = JSON.parseObject(requestParams, Tx1341Request.class);
		String[] respMsg = TxCore.handlerParam(txRequest, "1341", "市场订单结算");
		Tx134xResponse zhongjinResponse = null;
		try {
			zhongjinResponse = new Tx134xResponse(respMsg[0], respMsg[1]);
		}
		catch (Exception e) {
			e.printStackTrace();
			System.out.println("1341接口反馈报文失败");
			result.put("status", "FAIL");
			pmLogRecords.setRemark(pmLogRecords.getRemark() + "【" + loginUser.getName() + "-手动操作-FAIL接口反馈报文失败-"
					+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "】");
		}
		if ("2000".equals(zhongjinResponse.getCode())) {
			// 接口操作日志状态更新
			pmLogRecordsDao.updateLogStatusById(pmLogRecords.getId());
			// 更新订单子表信息
			PMProducts record = new PMProducts();
			record.setId(products.getId());
			record.setStatementProtocolid(products.getStatementProtocolid());
			record.setStatementStatus("0");
			productsDao.updateByPrimaryKeySelective(record);
			result.put("message", "结算成功");
			result.put("status", "OK");
			pmLogRecords.setRemark(pmLogRecords.getRemark() + "【" + loginUser.getName() + "-手动操作-ok支付成功-"
					+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "】");
		}
		else {
			PMProducts record = new PMProducts();
			record.setId(products.getId());
			record.setStatementProtocolid(products.getStatementProtocolid());
			record.setStatementStatus("1");
			productsDao.updateByPrimaryKeySelective(record);
			result.put("message", "结算失败");
			result.put("status", "FAIL");
			pmLogRecords.setRemark(pmLogRecords.getRemark() + "【" + loginUser.getName() + "-手动操作-fail支付失败-"
					+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "】");
		}

		pmLogRecordsDao.updateLogRecordsOfResponse(pmLogRecords);

		pmLogRecords = appplatformuserbankcardDao.getLogRecordsInfoByPaymentIDandProductID(map);
		result.put("request_params", pmLogRecords.getRequestParams());
		result.put("response_params", pmLogRecords.getResponseParams());
		result.put("remark", pmLogRecords.getRemark());
		return result;
	}

	/**
	 * 财付通支付web版
	 */
	@Override
	public BaseModel gotoTenpayWeb(HttpServletRequest request, HttpServletResponse response, PMPayment payment) {
		BaseModel result = new BaseModel();
		payment = this.queryById(payment.getId());

		// 挡板
		if ("off".equals(tenpayWapSwitch)) {
			LogUtil.info("gotoTenpayWeb财付通支付-挡板,appid=" + payment.getAppId() + "=apporderid=" + payment.getAppOrderId());
			result.setStatus("OK");
			result.setMessage("测试模式on，财付通支付成功！");
			result.setResult("http://www.baidu.com");
			try {
				payment.setModifydate(new Date());
				payment.setStatus(PaymentStatusEnum.success.getValue());
				payment.setPayfee(payment.getOrderfee());
				updateById(payment);
				sendPayresult(payment, null);
			}
			catch (Exception e) {
				LogUtil.info("gotoTenpayWeb财付通支付-挡板,支付失败,appid=" + payment.getAppId() + "=apporderid=" + payment.getAppOrderId());
				e.printStackTrace();
			}
			return result;
		}

		try {
			LogUtil.info("gotoTenpayWeb财付通支付创建支付链接开始,appid=" + payment.getAppId() + "=apporderid=" + payment.getAppOrderId());
			String url = createRequestUrl(request, response, payment);
			LogUtil.info("gotoTenpayWeb财付通支付创建支付链接完成,appid=" + payment.getAppId() + "=apporderid=" + payment.getAppOrderId()
					+ "=url=" + url);
			result.setStatus("OK");
			result.setResult(url);
			logRecordChangePayStatus(payment);
		}
		catch (Exception e) {
			e.printStackTrace();
			result.setStatus("ERROR");
			result.setMessage("支付链接生成失败！");
		}
		return result;
	}
	
	/**
	 * 财付通支付地址及请求参数生成
	 * 
	 * @param request
	 * @param response
	 * @param pament
	 * @return
	 */
	private String createRequestUrl(HttpServletRequest request, HttpServletResponse response, PMPayment payment) {
		RequestHandler reqHandler = new RequestHandler(request, response);

		reqHandler.init();
		// 设置密钥
		reqHandler.setKey(this.key);
		// 请求的url
		reqHandler.setGateUrl(this.gateUrl);
		// 商户号
		reqHandler.setParameter("partner", this.partnerId);
		// 商家订单号
		reqHandler.setParameter("out_trade_no", payment.getOrderid());
		// 商品金额,以分为单位
		reqHandler.setParameter("total_fee", String.valueOf(payment.getOrderfee()));
		// 交易完成后跳转的URL
		reqHandler.setParameter("return_url", this.returnUrl + "/" + payment.getId() + "/" + payment.getAppOrderId());
		// 接收财付通通知的URL
		reqHandler.setParameter("notify_url", this.nofityUrl);
		// 商品描述
		reqHandler.setParameter("body", payment.getProp2());
		// 银行类型
		reqHandler.setParameter("bank_type", "DEFAULT");
		// 用户的公网ip
		reqHandler.setParameter("spbill_create_ip", getClientIP(request));
		reqHandler.setParameter("fee_type", "1");

		reqHandler.setParameter("sign_type", "MD5");
		reqHandler.setParameter("service_version", "1.0");
		reqHandler.setParameter("input_charset", "utf-8");
		reqHandler.setParameter("sign_key_index", "1");
		// 业务可选参数
		reqHandler.setParameter("attach", "");
		reqHandler.setParameter("product_fee", String.valueOf(payment.getOrderfee()));
		reqHandler.setParameter("transport_fee", "0");
		reqHandler.setParameter("time_start", new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()));
		reqHandler.setParameter("time_expire", "");
		reqHandler.setParameter("buyer_id", "");
		reqHandler.setParameter("goods_tag", "");
		String gateUrl = "";
		try {
			gateUrl = reqHandler.getRequestURL();
		}
		catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return gateUrl;

	}
	
	private String getClientIP(HttpServletRequest request) {

		String ip = request.getHeader("x-forwarded-for");
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("Proxy-Client-IP");
		}
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("WL-Proxy-Client-IP");
		}
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getRemoteAddr();
		}
		if (ip != null && ip.length() > 0 && ip.indexOf(",") > 0) {
			ip = ip.substring(0, ip.indexOf(","));
		}
		return ip;
	}
	
	/**
	 * 财富通支付WAP版
	 */
	@Override
	public BaseModel gotoTenpayWap(HttpServletRequest request, HttpServletResponse response, PMPayment payment) {
		String gateUrl;
		BaseModel result = new BaseModel();
		payment = this.queryById(payment.getId());

		// 挡板
		if ("off".equals(tenpayWapSwitch)) {
			LogUtil.info("gotoTenpayWap财付通支付-挡板,appid=" + payment.getAppId() + "=apporderid=" + payment.getAppOrderId());
			result.setStatus("OK");
			result.setMessage("测试模式on，财付通支付成功！");
			result.setResult("http://www.baidu.com");
			try {
				payment.setModifydate(new Date());
				payment.setStatus(PaymentStatusEnum.success.getValue());
				payment.setPayfee(payment.getOrderfee());
				updateById(payment);
				sendPayresult(payment, null);
			}
			catch (Exception e) {
				LogUtil.info("gotoTenpayWap财付通支付-挡板，支付失败,appid=" + payment.getAppId() + "=apporderid=" + payment.getAppOrderId());
				e.printStackTrace();
			}
			return result;
		}

		LogUtil.info("gotoTenpayWap财付通支付创建支付链接开始,appid=" + payment.getAppId() + "=apporderid=" + payment.getAppOrderId());
		try {
			result = createRequestUrlWap(request, response, payment);
		}
		catch (Exception e) {
			e.printStackTrace();
			result.setStatus("ERROR");
			if (StringUtil.isEmpty(result.getMessage())) {
				result.setMessage("生成支付链接失败！");
			}
		}
		if ("OK".equals(result.getStatus())) {
			gateUrl = (String) result.getResult();
		}
		else {
			return result;
		}
		LogUtil.info("gotoTenpayWap财付通支付创建支付链接完成,appid=" + payment.getAppId() + "=apporderid=" + payment.getAppOrderId() + "=url="
				+ gateUrl);
		logRecordChangePayStatus(payment);
		return result;
	}
	
	/**
	 * 调用财付通支付初始化接口，获得token_id，再用这个token_id生成支付链接
	 * 
	 * @param request
	 * @param response
	 * @param payment
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	private BaseModel createRequestUrlWap(HttpServletRequest request, HttpServletResponse response, PMPayment payment)
			throws UnsupportedEncodingException {

		BaseModel result = new BaseModel();

		RequestHandler reqHandler = new WapPayInitRequestHandler(request, response);
		// 初始化
		reqHandler.init();
		// 设置密钥
		reqHandler.setKey(this.key_wap);
		JSONObject attach = new JSONObject();
		attach.put("appOrderId", payment.getAppOrderId());
		// 附加参数
		reqHandler.setParameter("attach", attach.toJSONString());
		// 商户支付订单号
		reqHandler.setParameter("sp_billno", payment.getOrderid());
		// 商品描述
		reqHandler.setParameter("desc", payment.getProp2());
		// 商户号
		reqHandler.setParameter("bargainor_id", this.partnerId_wap);
		// 确认支付金额接口返回的实际要支付的金额
		reqHandler.setParameter("total_fee", String.valueOf(payment.getOrderfee()));
		// 后台接受支付结果通知地址
		reqHandler.setParameter("notify_url", this.nofityUrl_wap);
		// 前端返回地址
		reqHandler.setParameter("callback_url", this.returnUrl_wap + "/" + payment.getId() + "/" + payment.getAppOrderId());
		// 获取请求带参数的URL
		String requestUrl = reqHandler.getRequestURL();
		// 获取debug信息
		String debuginfo = reqHandler.getDebugInfo();
		logger.debug("debuginfo==" + debuginfo + "\n payInit RequestUrl----->" + requestUrl);
		// 创建TenpayHttpClient，后台通信
		TenpayHttpClient httpClient = new TenpayHttpClient();
		// 设置请求内容
		httpClient.setReqContent(requestUrl);
		// 远程调用
		if (httpClient.call()) {

			String resContent = httpClient.getResContent();
			logger.debug("paymentId" + payment.getId() + "payInit ResponseContent----->" + resContent);
			ClientResponseHandler resHandler = new ClientResponseHandler();
			try {
				resHandler.setContent(resContent);
			}
			catch (Exception e) {
				e.printStackTrace();
			}
			String token_id = resHandler.getParameter("token_id");
			if (StringUtil.isNotEmpty(token_id)) {
				// 生成支付请求
				RequestHandler wapPayRequestHandler = new RequestHandler(request, response);
				wapPayRequestHandler.init();
				wapPayRequestHandler.setGateUrl(this.gateUrl_wap);
				wapPayRequestHandler.setParameter("token_id", token_id);
				String wapPayRequestUrl = wapPayRequestHandler.getRequestURL();
				result.setStatus("OK");
				result.setResult(wapPayRequestUrl);
				return result;
			}
			else {
				// 获取token_id调用失败 ，显示错误 页面
				logger.info("createRequestUrlWap,appid=" + payment.getAppId() + "=apporderid=" + payment.getAppOrderId() + "获取token_id调用失败:"
						+ resHandler.getParameter("err_info"));
				result.setStatus("ERROR");
				result.setMessage("获取财付通支付token_id获取失败");
				return result;
			}
		}
		else {

			logger.info("createRequestUrlWap,appid=" + payment.getAppId() + "=apporderid=" + payment.getAppOrderId() + "后台调用通信失败:"
					+ this.payInitUrl_wap + "\n" + httpClient.getResponseCode() + httpClient.getErrInfo());
			// 后台调用失败 ，显示错误 页面
			result.setStatus("ERROR");
			result.setMessage("后台调用财付通支付初始化接口失败");
			return result;
		}

	}
	
	/**
	 * 记录交易日志，更新订单状态
	 * @param payment
	 */
	private void logRecordChangePayStatus(PMPayment payment)
	{
		// 记录交易日志，更新订单状态
		String mainPayProtocolid = GUID.generateGUID();
		// 更新payment状态
		payment.setPayProtocolid(mainPayProtocolid);
		payment.setStatus(PaymentStatusEnum.paying.getValue());
		updateById(payment);

		// 记录日志
		PMLogRecords pmLogRecords = new PMLogRecords();
		pmLogRecords.setPaymentId(payment.getId());
		List<PMLogRecords> list = pmLogRecordsDao.selectList(pmLogRecords);
		if (list != null && list.size() > 0) {
			pmLogRecords = list.get(0);
			pmLogRecords.setModifydate(new Date());
			pmLogRecords.setAppId(payment.getAppId());
			pmLogRecords.setPaymentId(payment.getId());
			pmLogRecords.setAppOrderid(payment.getAppOrderId());
			pmLogRecords.setPlatformUserId(payment.getAppUserId());
			pmLogRecords.setProductId(null);
			pmLogRecords.setInterfaceType(0);
			pmLogRecords.setInterfaceName("财付通支付接口调用");
			pmLogRecords.setInterfaceMethod("gotoTenpay");
			pmLogRecords.setRequestParams(gateUrl);
			pmLogRecordsDao.updateByIdSelective(pmLogRecords);
		}
		else {
			pmLogRecords.setCreatedate(new Date());
			pmLogRecords.setAppId(payment.getAppId());
			pmLogRecords.setPaymentId(payment.getId());
			pmLogRecords.setAppOrderid(payment.getAppOrderId());
			pmLogRecords.setPlatformUserId(payment.getAppUserId());
			pmLogRecords.setProductId(null);
			pmLogRecords.setInterfaceType(0);
			pmLogRecords.setInterfaceName("财付通支付接口调用");
			pmLogRecords.setInterfaceMethod("gotoTenpay");
			pmLogRecords.setRequestParams(gateUrl);
			pmLogRecordsDao.insertLogRecords(pmLogRecords);

		}
	}

	@Override
	public void tenpayReturn(PMPayment payment) {

		try {
			int index = 0;
			while (index <= 5) {
				PMLogRecords logRecords = new PMLogRecords();
				logRecords.setPaymentId(payment.getId());
				logRecords = pmLogRecordsDao.selectOne(logRecords);
				if (logRecords != null && "1".equals(logRecords.getStatus())) {
					break;
				}
				Thread.sleep(3000);
				index++;
			}
		}
		catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void tenpayNotify(PMPayment payment, Map<String,String> tenpayResponse) {
		String total_fee = tenpayResponse.get("total_fee");
		payment.setModifydate(new Date());
		payment.setStatus(PaymentStatusEnum.success.getValue());
		payment.setPayfee(Integer.valueOf(total_fee));
		updateById(payment);
	}

	
	/**
	 * 支付结果通知C站公共方法
	 * @param payment
	 * @param params
	 */
	public void sendPayresult(PMPayment pmPayment, Map<String, String> params) {

		taskExecutor.execute(new Runnable() {
			@Override
			public void run() {
				try {
					// 等待支付状态更新
					Thread.sleep(1000);
				}
				catch (InterruptedException e1) {
				}
				PMPayment payment = queryById(pmPayment.getId());

				// 避免重复发送
				if (payment.getProp1() != null) {
					logger.info("sendPayresult支付结果通知已发送,立即返回" + "appid=" + payment.getAppId() + "=apporderid="
							+ payment.getAppOrderId());
					return;
				}

				payment.setProp1("sendPayresult支付结果通知已发送");
				updateById(payment);

				// 支付结果通知1
				String syncPayStatus_url = payment.getReceiveurl();
				try {
					JSONObject postParam = new JSONObject();
					if (PaymentStatusEnum.success.getValue().equals(payment.getStatus())) {
						postParam.put("payStatus", "succ");// 必填,"succ/fail"
					}
					else {
						postParam.put("payStatus", "fail");// 必填,"succ/fail"
					}
					postParam.put("source", "99");// 固定值，必填
					postParam.put("producttype", "13");// 必填，16是寿险通，13是c站
					postParam.put("orderSn", payment.getAppOrderId());//应用平台订单号
//					postParam.put("appUserId", payment.getAppUserId());//应用平台用户id
					postParam.put("total_fee", String.valueOf(payment.getPayfee()));//订单总金额，单位为分
					postParam.put("discount", "0");//折扣
					postParam.put("discountAmount", "0");//优惠金额
					postParam.put("walletPaid", "0");//钱包支付金额
					postParam.put("bankcardPaid", "0");//银行卡支付金额
					postParam.put("othersPaid", payment.getPayfee());//其他支付金额
					postParam.put("paymentid", payment.getId());//支付id
					postParam.put("orderid", payment.getOrderid());//支付系统订单号
					postParam.put("transaction_id", payment.getProp4());//微信订单号

					logger.info("syncPayStatus支付结果通知已发送" + syncPayStatus_url + ",appid=" + payment.getAppId() + "=apporderid="
							+ payment.getAppOrderId() + "=request=" + postParam);
					long start = System.currentTimeMillis();
					String res = com.common.HttpClientUtil.doPostJsonString(syncPayStatus_url, postParam.toJSONString());
					long end = System.currentTimeMillis();
					logger.info("syncPayStatus支付结果通知已返回," + "appid=" + payment.getAppId() + "=apporderid="
							+ payment.getAppOrderId() + "=" + (end - start) + "ms=response=" + res);
				}
				catch (Exception e) {
					logger.error("appid=" + payment.getAppId() + "=apporderid=" + payment.getAppOrderId() + "请求失败:"
							+ syncPayStatus_url);
					e.printStackTrace();
				}

				// 支付结果通知2
				String appId = payment.getAppId() + "";
				if ("4".equals(appId)) // 懒掌柜
				{
					try {

						Map<String, String> getParam = new HashMap<String, String>();
						if (StringUtil.isEmpty(payment.getPayfee())) {
							getParam.put("total_fee", payment.getOrderfee() + "");
						}
						else {
							getParam.put("total_fee", payment.getPayfee() + "");
						}
						getParam.put("bank_type", "");
						getParam.put("bank_billno", payment.getOrderid());
						getParam.put("time_end", "");
						getParam.put("orderIds", payment.getAppOrderId());
						PMAPPcustom appCustom = pmapPcustomDao.selectById(Long.valueOf(payment.getAppUserId()));
						getParam.put("memberId", appCustom.getApp_user_id());
						getParam.put("payType", payment.getPayType());
						getParam.put("coupList", "");
						getParam.put("coupTotalPrice", "");
						getParam.put("walletPaid", "");

						logger.info("payResultCallBack支付结果通知已发送" + payResultCallBack_url + ",appid=" + payment.getAppId() + "=apporderid="
								+ payment.getAppOrderId() + "=request=" + getParam);
						long start = System.currentTimeMillis();
						String res = com.common.HttpClientUtil.doGet(payResultCallBack_url, getParam);
						long end = System.currentTimeMillis();
						logger.info("payResultCallBack支付结果通知已返回," + "appid=" + payment.getAppId() + "=apporderid="
								+ payment.getAppOrderId() + "=" + (end - start) + "ms=response=" + res);

						payment.setProp1("payResultCallBack.action接口处理结果：" + res);
						updateById(payment);
					}
					catch (Exception e) {
						logger.error("appid=" + payment.getAppId() + "=apporderid=" + payment.getAppOrderId() + "请求失败:"
								+ payResultCallBack_url);
						e.printStackTrace();
					}

				}

			}
		});

	}
	
	@SuppressWarnings("static-access")
	@Override
	public net.sf.json.JSONObject unifiedorderToWeixin(JSONObject json,HttpServletRequest request, HttpServletResponse response) {
		HashMap<String,String> resultMap=new HashMap<String, String>();
		if(!json.containsKey("orderPayMessage")){
			resultMap.put("status", "FAIL");
			resultMap.put("msg", "请求参数格式错误");
			return net.sf.json.JSONObject.fromObject(resultMap);
		}
		String orderPayMessage = json.getString("orderPayMessage");
		String decodeData = Des.strDecrypt(orderPayMessage);
		@SuppressWarnings("unchecked")
		HashMap<String, String> map = JSON.parseObject(decodeData, HashMap.class);
		WxPayHelper wh=new WxPayHelper();
		PMPayment pm = new PMPayment();
		pm = pmPaymentDao.selectById(Long.parseLong(map.get("paymentId")));
		if("2".equals(pm.getStatus())){
			resultMap.put("status", "FAIL");
			resultMap.put("msg", "该订单已支付，请勿重复支付");
			return net.sf.json.JSONObject.fromObject(resultMap);
		}
		wh.SetParameter("body", "产品名称");
		wh.SetParameter("total_fee",String.valueOf(pm.getOrderfee()));
		wh.SetParameter("out_trade_no", pm.getOrderid());
		wh.SetParameter("spbill_create_ip", wh.getClientIP(request));
		wh.SetParameter("notify_url", "http://lzgplus.cisg.cn/pm/payment/wxScanCodePayResultNotify.do");
		wh.SetParameter("trade_type", "NATIVE");
		String requestPayNoXml="";
		try {
			requestPayNoXml=wh.createUnifiedOrder_Xml();
		} catch (Exception e) {
			resultMap.put("status", "FAIL");
			resultMap.put("msg", "生成二维码错误");
			e.printStackTrace();
			return net.sf.json.JSONObject.fromObject(resultMap);
		}
		System.out.println("微信扫码支付====发起报文==orderid=" + pm.getOrderid() + requestPayNoXml);
		String responseXml=wh.requestUnifiedorder(requestPayNoXml);
		System.out.println("微信扫码支付====返回报文==orderid=" + pm.getOrderid() +responseXml);
		Map<String, String> respMap=null;
		try {
			respMap=wh.parseXmlByString(responseXml);
		} catch (Exception e1) {
			resultMap.put("status", "FAIL");
			resultMap.put("msg", "生成二维码错误");
			e1.printStackTrace();
			return net.sf.json.JSONObject.fromObject(resultMap);
		}
		if("SUCCESS".equals(respMap.get("result_code"))&&"SUCCESS".equals(respMap.get("return_code"))){
			resultMap.put("status", "OK");
			resultMap.put("msg", "生成成功");
			resultMap.put("erurl", respMap.get("code_url"));
			resultMap.put("fee", String.valueOf(pm.getOrderfee()));
			pm.setStatus("1");
			pmPaymentDao.updateById(pm);
			return net.sf.json.JSONObject.fromObject(resultMap);
		}else{
			resultMap.put("status", "FAIL");
			resultMap.put("msg", respMap.get("err_code_des"));
			return net.sf.json.JSONObject.fromObject(resultMap);
		}
	}

	@Override
	@Deprecated
	public void wxScanCodePayResultNotify(HttpServletRequest request, HttpServletResponse response) {
		String requestXml;
		try {
			PMPayment pm = new PMPayment();
			requestXml = HttpClientUtil.InputStreamTOString(request.getInputStream(), "UTF-8");
			Map<String,String> m= new HashMap<String,String>();
			HashMap<String,String> map=new HashMap<String, String>();
			WxPayHelper wh1=new WxPayHelper();
			m = MessageUtil.parseXmlByString(requestXml);
			pm.setOrderid(m.get("out_trade_no"));
			pm = pmPaymentDao.selectOne(pm);
			LogUtil.info("微信支付回调=报文=appid=" + pm.getAppId() + "=apporderid="+pm.getAppOrderId() + "=" + requestXml);
			pm.setStatus("2");
			pmPaymentDao.updateById(pm);
			ResponseHandlerForWX resHandler = new ResponseHandlerForWX(request, response);
			resHandler.setKey(key);
			@SuppressWarnings("rawtypes")
			Iterator it = m.keySet().iterator();
			while (it.hasNext()) {
				String k = (String) it.next();
				String v = (String) m.get(k);
				resHandler.setParameter(k, v);
			}
			map.put("return_code", "SUCCESS");
			map.put("appid", "wx59d1e6b76b43e328");
			map.put("nonce_str",CommonUtil.CreateNoncestr());
			map.put("mch_id", "1220429901");
			map.put("prepay_id", "");
			map.put("result_code", "SUCCESS");
			try {
				map.put("sign", wh1.GetSignOfMD5(map));
			} catch (Exception e) {
				e.printStackTrace();
			}
			resHandler.sendToCFT(CommonUtil.ArrayToXml(map));
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void wxPayResultNotify(HttpServletRequest request, HttpServletResponse response) {

		try {
			String reqXml = HttpClientUtil.InputStreamTOString(request.getInputStream(), "UTF-8");
			Map<String, String> reqMap = MessageUtil.parseXmlByString(reqXml);

			JSONObject attach = JSON.parseObject(reqMap.get("attach"));
			String key ;
			String payType = attach.getString("paytype");
			String appId = attach.getString("appId");
			if(PayTypeEnum.wechat_jsapi.getValue().equals(payType) || PayTypeEnum.wechat_app.getValue().equals(payType)) {
				key = ValidateUtil.getConfigValue("wxGzh.mch_key");
			}
			else {
				if ("5".equals(appId) && "true".equals(ValidateUtil.getConfigValue("useSxt"))){
					key = ValidateUtil.getConfigValue("wxGzh.mch_key");
				}
				else {
					key = ValidateUtil.getConfigValue("wxScanCode.mch_key");
				}
			}
			
			// 签名校验
			String uncheckedSign = reqMap.get("sign");
			reqMap.remove("sign");
			String unSignParaString = CommonUtil.FormatBizQueryParaMap(reqMap, false);
			String realSign = MD5SignUtil.Sign(unSignParaString, key).toUpperCase();
			if (!uncheckedSign.equals(realSign)) {
				logger.error("签名校验错误，request=" + reqXml);
				return;
			}
			
			// 业务逻辑处理
			PMPayment pm = new PMPayment();
			pm.setOrderid(reqMap.get("out_trade_no"));
			pm = pmPaymentDao.selectOne(pm);
			LogUtil.info("微信支付=支付结果通知报文=appid=" + pm.getAppId() + "=apporderid=" + pm.getAppOrderId() + "=" + reqXml);
			if("SUCCESS".equals(reqMap.get("return_code")) && "SUCCESS".equals(reqMap.get("result_code"))){
				pm.setStatus(PaymentStatusEnum.success.getValue());
				pm.setPayfee(Integer.valueOf(reqMap.get("total_fee")));
				pm.setProp4(reqMap.get("transaction_id"));
			}
			else {
				pm.setStatus(PaymentStatusEnum.fail.getValue());
			}
			pmPaymentDao.updateById(pm);
			// 返回success
			PrintWriter out = response.getWriter();
			out.println("<xml><return_code><![CDATA[SUCCESS]]></return_code></xml>");
			out.flush();
			out.close();
			logger.info("微信支付=支付结果通知结束");
			
			sendPayresult(pm, null);
			
		}
		catch (Exception e) {
			e.printStackTrace();
			try {
				PrintWriter out = response.getWriter();
				out.println("<xml><return_code><![CDATA[FAIL]]></return_code></xml>");
				out.flush();
				out.close();
			}
			catch (IOException e1) {
				e1.printStackTrace();
			}
		}

	}

	@Override
	public net.sf.json.JSONObject getPayOrderStatusByLoop(JSONObject json) {
		String orderPayMessage = json.getString("orderPayMessage");
		String decodeData = Des.strDecrypt(orderPayMessage);
		Map<String,String> resultMap = new HashMap<String,String>();
		@SuppressWarnings("unchecked")
		HashMap<String, String> map = JSON.parseObject(decodeData, HashMap.class);
		String paymentId = map.get("paymentId");
		PMPayment pm = new PMPayment();
		pm = pmPaymentDao.selectById(Long.parseLong(paymentId));
		LogUtil.info("轮询获取支付状态=开始=appid=" + pm.getAppId() + "=apporderid="+pm.getAppOrderId());
		if(StringUtil.isEmpty(pm.getStatus())){
			resultMap.put("status", "FAIL");
			resultMap.put("msg", "获取支付状态错误");
			return net.sf.json.JSONObject.fromObject(resultMap);
		}else{
			if (!"2".equals(pm.getStatus())) {
				if (PayTypeEnum.wechat_native.getValue().equals(pm.getProp3())
						|| PayTypeEnum.wechat_jsapi.getValue().equals(pm.getProp3())
						|| PayTypeEnum.wechat_app.getValue().equals(pm.getProp3())) {
					LogUtil.info("轮询获取支付状态=微信查询接口开始=appid=" + pm.getAppId() + "=apporderid=" + pm.getAppOrderId());
					if (this.getPayStatus4WxScan(pm.getOrderid())) {
						sendPayresult(pm, null);
						resultMap.put("status", "OK");
						resultMap.put("payStatus", "2");
					} else {
						resultMap.put("status", "OK");
						resultMap.put("payStatus", pm.getStatus());
					}
				}
			}else{
				sendPayresult(pm, null);
				resultMap.put("status", "OK");
				resultMap.put("payStatus", pm.getStatus());
			}
			return net.sf.json.JSONObject.fromObject(resultMap);
		}
	}
	
	@SuppressWarnings("static-access")
	private boolean getPayStatus4WxScan(String orderId){
		WxPayHelper wxh = new WxPayHelper();
		Map<String, String> respMap = new HashMap<>();
		PMPayment pm = new PMPayment();
		try {
			String requestXml = wxh.getOrderQueryXml(orderId);
			String responseXml=wxh.requestorderquery(requestXml);
			respMap=wxh.parseXmlByString(responseXml);
			if("SUCCESS".equals(respMap.get("result_code"))&&"SUCCESS".equals(respMap.get("return_code"))&&"SUCCESS".equals(respMap.get("trade_state"))){
				pm.setOrderid(orderId);
				pm = pmPaymentDao.selectOne(pm);
				if(pm==null){
					return false;
				}
				LogUtil.info("轮询获取支付状态=微信查询接口结果=appid=" + pm.getAppId() + "=apporderid="+pm.getAppOrderId() + "=SUCCESS");
				pm.setStatus("2");
				pmPaymentDao.updateById(pm);
				return true;
			}
			return false;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@SuppressWarnings("static-access")
	@Override
	public Map<String,String> unifiedorderToWeixin(Long payMentId, HttpServletRequest request, HttpServletResponse response) {
		Map<String,String> resultMap=new HashMap<String, String>();
		WxPayHelper wh=new WxPayHelper();
		PMPayment pm = new PMPayment();
		pm = pmPaymentDao.selectById(payMentId);
		if("2".equals(pm.getStatus())){
			resultMap.put("status", "FAIL");
			resultMap.put("msg", "该订单已支付，请勿重复支付");
			return resultMap;
		}
		PayTypeEnum payType = PayTypeEnum.getEnum(pm.getProp3());
		wh.SetParameter("body", pm.getProp2());
		wh.SetParameter("total_fee",String.valueOf(pm.getOrderfee()));
		wh.SetParameter("out_trade_no", pm.getOrderid());
		wh.SetParameter("spbill_create_ip", wh.getClientIP(request));
		wh.SetParameter("notify_url", ValidateUtil.getConfigValue("notify_url"));
		if (PayTypeEnum.wechat_app.equals(payType)) {
			wh.SetParameter("trade_type", "APP");
			wh.SetAppId(ValidateUtil.getConfigValue("wxGzh.appid"));
			wh.setPartnerId(ValidateUtil.getConfigValue("wxGzh.mch_id"));
			wh.SetPartnerKey(ValidateUtil.getConfigValue("wxGzh.mch_key"));
			JSONObject attach = new JSONObject();
			attach.put("paytype", PayTypeEnum.wechat_app.getValue());
			attach.put("appId", pm.getAppId());
			wh.SetParameter("attach", attach.toJSONString());
		}
		else if (PayTypeEnum.wechat_native.equals(payType)) {
			// 统一用户中心单证抵押金扫码支付，生产环境使用寿险通公众号,测试环境使用保网公众号
			if (5L == pm.getAppId() && "true".equals(ValidateUtil.getConfigValue("useSxt"))) {
				wh.SetAppId(ValidateUtil.getConfigValue("wxGzh.appid"));
				wh.setPartnerId(ValidateUtil.getConfigValue("wxGzh.mch_id"));
				wh.SetPartnerKey(ValidateUtil.getConfigValue("wxGzh.mch_key"));
			}
			wh.SetParameter("trade_type", "NATIVE");
			JSONObject attach = new JSONObject();
			attach.put("paytype", PayTypeEnum.wechat_native.getValue());
			attach.put("appId", pm.getAppId());
			wh.SetParameter("attach", attach.toJSONString());
		}
		else if (PayTypeEnum.wechat_jsapi.equals(payType)) {
			wh.SetAppId(ValidateUtil.getConfigValue("wxGzh.appid"));
			wh.setPartnerId(ValidateUtil.getConfigValue("wxGzh.mch_id"));
			wh.SetPartnerKey(ValidateUtil.getConfigValue("wxGzh.mch_key"));
			wh.SetParameter("openid", request.getAttribute("openid") + "");
			wh.SetParameter("trade_type", "JSAPI");
			JSONObject attach = new JSONObject();
			attach.put("paytype", PayTypeEnum.wechat_jsapi.getValue());
			attach.put("appId", pm.getAppId());
			wh.SetParameter("attach", attach.toJSONString());
		}
		else {
			wh.SetParameter("trade_type", "MICROPAY");
		}
		String requestPayNoXml="";
		try {
			requestPayNoXml=wh.createUnifiedOrder_Xml();
		} catch (Exception e) {
			resultMap.put("status", "FAIL");
			resultMap.put("msg", e.getMessage());
			e.printStackTrace();
			return resultMap;
		}
		LogUtil.info("微信支付=统一下单==开始报文====appid=" + pm.getAppId() + "=apporderid=" + pm.getAppOrderId() + "=" + requestPayNoXml);
		String responseXml=wh.requestUnifiedorder(requestPayNoXml);
		LogUtil.info("微信支付=统一下单==返回报文====appid=" + pm.getAppId() + "=apporderid=" + pm.getAppOrderId() + "=" + responseXml);
		Map<String, String> respMap=null;
		try {
			respMap=wh.parseXmlByString(responseXml);
		} catch (Exception e1) {
			resultMap.put("status", "FAIL");
			resultMap.put("msg", "统一下单返回报文解析错误");
			e1.printStackTrace();
			return resultMap;
		}
		if("SUCCESS".equals(respMap.get("result_code"))&&"SUCCESS".equals(respMap.get("return_code"))){
			resultMap.put("status", "OK");
			resultMap.put("msg", "统一下单成功");
			if (PayTypeEnum.wechat_native.equals(payType)){
				try {
					resultMap.put("erurl", QRcodePayUtil.QRfromOSchina(respMap.get("code_url")));
				}
				catch (Exception e) {
					e.printStackTrace();
				}
			}
			else if (PayTypeEnum.wechat_jsapi.equals(payType)){
				HashMap<String,String> temp = new HashMap<String,String>();
				temp.put("appId", ValidateUtil.getConfigValue("wxGzh.appid"));
				temp.put("timeStamp", new Date().getTime()/1000 + "");
				temp.put("nonceStr", CommonUtil.CreateNoncestr());
				temp.put("package", "prepay_id=" + respMap.get("prepay_id"));
				temp.put("signType", "MD5");
				
				try {
					String unSignParaString = CommonUtil.FormatBizQueryParaMap(temp,false);
					String signedString = MD5SignUtil.Sign(unSignParaString, ValidateUtil.getConfigValue("wxGzh.mch_key")).toUpperCase();
					temp.put("paySign", signedString);
				}
				catch (Exception e ) {
					e.printStackTrace();
				}
				resultMap.put("brandWCPayRequestParams", JSON.toJSON(temp).toString());
			}
			else if(PayTypeEnum.wechat_app.equals(payType)) {
				HashMap<String,String> temp = new HashMap<String,String>();
				temp.put("appId", ValidateUtil.getConfigValue("wxGzh.appid"));
				temp.put("partnerid", ValidateUtil.getConfigValue("wxGzh.mch_id"));
				temp.put("prepayid",respMap.get("prepay_id"));
				temp.put("package", "Sign=WXPay");
				temp.put("nonceStr", CommonUtil.CreateNoncestr());
				temp.put("timeStamp", new Date().getTime()/1000 + "");
				try {
					String unSignParaString = CommonUtil.FormatBizQueryParaMap(temp,false);
					String signedString = MD5SignUtil.Sign(unSignParaString, ValidateUtil.getConfigValue("wxGzh.mch_key")).toUpperCase();
					temp.put("sign", signedString);
				}
				catch (Exception e ) {
					e.printStackTrace();
				}
				resultMap.put("appWCPayRequestParams", JSON.toJSON(temp).toString());
			}
			resultMap.put("fee", String.valueOf(pm.getOrderfee()));
			pm.setStatus("1");
			pmPaymentDao.updateById(pm);
			return resultMap;
		}else{
			resultMap.put("status", "FAIL");
			resultMap.put("msg", respMap.get("return_msg") + "\n" +  respMap.get("err_code_des"));
			return resultMap;
		}
	}

	@Override
	public BaseModel paymentRefund(JSONObject params) {
		BaseModel result = new BaseModel();

		PMPayment pm = new PMPayment();
		pm = pmPaymentDao.selectById(params.getLong("paymentid"));

		// 退款操作校验
		if (pm == null) {
			result.setStatus("ERROR");
			result.setMessage("订单不存在！");
			return result;
		}
		if (!PaymentStatusEnum.success.getValue().equals(pm.getStatus())) {
			result.setStatus("ERROR");
			result.setMessage("当前订单状态不能进行退款操作！");
			return result;
		}
		if (params.getIntValue("refund_fee") > pm.getPayfee()) {
			result.setStatus("ERROR");
			result.setMessage("退款金额大于支付金额！");
			return result;
		}

		// 退款请求参数
		WxPayHelper wh = new WxPayHelper();
		PayTypeEnum payType = PayTypeEnum.getEnum(pm.getProp3());
		wh.SetParameter("out_trade_no", pm.getOrderid());
		String refund_id = "r" + pm.getOrderid().substring(1);
		wh.SetParameter("out_refund_no", refund_id);
		wh.SetParameter("total_fee", pm.getPayfee() == null ? "0" : pm.getPayfee().toString());
		wh.SetParameter("refund_fee", params.getString("refund_fee"));

		if (PayTypeEnum.wechat_app.equals(payType)) {
		}
		else if (PayTypeEnum.wechat_native.equals(payType)) {
		}
		else if (PayTypeEnum.wechat_jsapi.equals(payType)) {
			wh.SetAppId(ValidateUtil.getConfigValue("wxGzh.appid"));
			wh.setPartnerId(ValidateUtil.getConfigValue("wxGzh.mch_id"));
			wh.SetPartnerKey(ValidateUtil.getConfigValue("wxGzh.mch_key"));
		}
		else {
		}

		String requestXml = "";
		try {
			requestXml = wh.createRefund_xml();
		}
		catch (Exception e) {
			e.printStackTrace();
			result.setStatus("ERROR");
			result.setMessage(e.getMessage());
			return result;
		}
		LogUtil.info("微信支付=申请退款==开始报文====appid=" + pm.getAppId() + "=apporderid=" + pm.getAppOrderId() + "=" + requestXml);
		String responseXml = wh.refund(requestXml);
		LogUtil.info("微信支付=申请退款==返回报文====appid=" + pm.getAppId() + "=apporderid=" + pm.getAppOrderId() + "=" + responseXml);
		Map<String, String> respMap = null;
		try {
			respMap = WxPayHelper.parseXmlByString(responseXml);
		}
		catch (Exception e1) {
			e1.printStackTrace();
		}
		if ("SUCCESS".equals(respMap.get("result_code")) && "SUCCESS".equals(respMap.get("return_code"))) {
			Map<String, String> res = new HashMap<String, String>();
			res.put("refundid", refund_id);
			res.put("paymentid", String.valueOf(pm.getId()));
			res.put("wx_transaction_id", respMap.get("transaction_id"));
			res.put("wx_refund_id", respMap.get("refund_id"));
			result.setResult(res);
			result.setStatus("OK");
			result.setMessage("退款申请成功!");
			pm.setStatus(PaymentStatusEnum.refund_received.getValue());
			pm.setProp5(refund_id);
			pmPaymentDao.updateById(pm);
		}
		else {
			result.setStatus("ERROR");
			result.setMessage("退款申请失败!");
		}
		return result;
	}

	@Override
	public BaseModel refundQuery(JSONObject params) {
		BaseModel baseModel = new BaseModel();
		WxPayHelper wh = new WxPayHelper();
		PMPayment pm = new PMPayment();
		pm = pmPaymentDao.selectById(params.getLong("paymentid"));

		PayTypeEnum payType = PayTypeEnum.getEnum(pm.getProp3());

		wh.SetParameter("out_trade_no", pm.getOrderid());
		if (PayTypeEnum.wechat_app.equals(payType)) {

		}
		else if (PayTypeEnum.wechat_native.equals(payType)) {

		}
		else if (PayTypeEnum.wechat_jsapi.equals(payType)) {
			wh.SetAppId(ValidateUtil.getConfigValue("wxGzh.appid"));
			wh.setPartnerId(ValidateUtil.getConfigValue("wxGzh.mch_id"));
			wh.SetPartnerKey(ValidateUtil.getConfigValue("wxGzh.mch_key"));
		}
		else {
		}
		String requestXml = "";
		try {
			requestXml = wh.createRefundQuery_xml();
		}
		catch (Exception e) {
			e.printStackTrace();
			baseModel.setStatus("ERROR");
			baseModel.setMessage(e.getMessage());
			return baseModel;
		}
		LogUtil.info("微信支付=退款查询==开始报文====appid=" + pm.getAppId() + "=apporderid=" + pm.getAppOrderId() + "=" + requestXml);
		String responseXml = wh.refundQuery(requestXml);
		LogUtil.info("微信支付=退款查询==返回报文====appid=" + pm.getAppId() + "=apporderid=" + pm.getAppOrderId() + "=" + responseXml);
		Map<String, String> respMap = null;
		try {
			respMap = WxPayHelper.parseXmlByString(responseXml);
		}
		catch (Exception e) {
			e.printStackTrace();
			baseModel.setStatus("ERROR");
			baseModel.setMessage("微信回报文解析错误");
			return baseModel;
		}
		if ("SUCCESS".equals(respMap.get("result_code")) && "SUCCESS".equals(respMap.get("return_code"))) {
			Map<String, String> result = new HashMap<String, String>();
			result.put("refundid", respMap.get("out_refund_no_0"));
			result.put("paymentid", String.valueOf(pm.getId()));
			result.put("wx_transaction_id", respMap.get("transaction_id"));
			result.put("wx_refund_id", respMap.get("refund_id_0"));
			result.put("total_fee", respMap.get("total_fee"));
			result.put("refund_fee", respMap.get("refund_fee_0"));
			result.put("refund_status", respMap.get("refund_status_0"));
			baseModel.setMessage("OK");
			baseModel.setMessage("查询成功！");
			baseModel.setResult(result);
			if ("SUCCESS".equals(respMap.get("refund_status_0"))) {
				pm.setStatus(PaymentStatusEnum.refund_success.getValue());
				pmPaymentDao.updateById(pm);
			}
			else if ("PROCESSING".equals(respMap.get("refund_status_0"))) {

			}
			else {
				pm.setStatus(PaymentStatusEnum.refund_fail.getValue());
				pmPaymentDao.updateById(pm);
			}
		}
		else {
			baseModel.setStatus("ERROR");
			baseModel.setMessage(respMap.get("return_msg") + "\n" + respMap.get("err_code_des"));
		}
		return baseModel;
	}

	@Override
	public void refundResultNotify(HttpServletRequest request, HttpServletResponse response) {
		String reqXml = null ; 
		try {
			reqXml = HttpClientUtil.InputStreamTOString(request.getInputStream(), "UTF-8");
			Map<String, String> reqMap = MessageUtil.parseXmlByString(reqXml);
			String req_info = reqMap.get("req_info");
			// AES解密
			req_info = AESUtil.decryptData(req_info);
			Map<String, String> info_map = MessageUtil.parseXmlByString(req_info);

			// 业务逻辑处理
			PMPayment pm = new PMPayment();
			pm.setOrderid(reqMap.get("out_trade_no"));
			pm = pmPaymentDao.selectOne(pm);
			LogUtil.info("微信支付=退款结果通知报文=appid=" + pm.getAppId() + "=apporderid=" + pm.getAppOrderId() + "=" + reqXml + "=" + req_info);
			if ("SUCCESS".equals(reqMap.get("return_code")) && "SUCCESS".equals(info_map.get("refund_status"))) {
				pm.setStatus(PaymentStatusEnum.refund_success.getValue());
			}
			else {
				pm.setStatus(PaymentStatusEnum.refund_fail.getValue());
			}
			pmPaymentDao.updateById(pm);

			// 返回success
			PrintWriter out = response.getWriter();
			out.println("<xml><return_code><![CDATA[SUCCESS]]></return_code></xml>");
			out.flush();
			out.close();

			JSONObject json = new JSONObject();
			// 支付平台退款id
			json.put("refundid", info_map.get("out_refund_no"));
			// 支付平台支付id
			json.put("paymentid", pm.getId());
			// 微信订单id
			json.put("wx_transaction_id", info_map.get("transaction_id"));
			// 微信退款id
			json.put("wx_refund_id", info_map.get("refund_id"));
			// 订单金额
			json.put("total_fee", info_map.get("total_fee"));
			// 退款状态
			json.put("refund_status", info_map.get("refund_status"));
			// 退款金额
			json.put("refund_fee", info_map.get("settlement_refund_fee"));
			LogUtil.info("微信支付=退款结果通知发送=appid=" + pm.getAppId() + "=apporderid=" + pm.getAppOrderId() + "=" + json.toJSONString());
			String resp = com.common.HttpClientUtil.doPostJsonString(ValidateUtil.getConfigValue("usercenter_refund_callback"),
					json.toJSONString());
			LogUtil.info("微信支付=退款结果通知返回=appid=" + pm.getAppId() + "=apporderid=" + pm.getAppOrderId() + "=" + resp);
		}
		catch (Exception e) {
			e.printStackTrace();
			logger.info("退款结果=" + reqXml);
			try {
				PrintWriter out = response.getWriter();
				out.println("<xml><return_code><![CDATA[FAIL]]></return_code></xml>");
				out.flush();
				out.close();
			}
			catch (IOException e1) {
				e1.printStackTrace();
			}
		}
	}
}