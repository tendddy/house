package com.cninsure.payment.controller.manager;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.cninsure.core.exception.ControllerException;
import com.cninsure.core.utils.BeanUtils;
import com.cninsure.core.utils.StringUtil;
import com.cninsure.payment.entity.PMAppplatform;
import com.cninsure.payment.entity.PMSettleAttach;
import com.cninsure.payment.entity.PMSettleCase;
import com.cninsure.payment.model.CashierModel;
import com.cninsure.payment.service.PMSettleAttachService;
import com.cninsure.payment.service.PMSettleCaseService;
import com.cninsure.payment.service.PMSettlementService;
import com.cninsure.system.entity.INSCUser;
import com.common.PagingParams;

@Controller
@RequestMapping("/settlement/*")
public class SettlementController {
	@Resource
	private PMSettlementService settlementservice;
	@Resource
	private PMSettleCaseService settlecaseservice;
	@Resource
	private PMSettleAttachService settleAttachservice;
	@Autowired
	private HttpServletRequest request;

	/**
	 * 跳转到 各应用平台手续费结算管理 页面
	 * 
	 * @return
	 * @throws ControllerException
	 */
	@RequestMapping(value = "list", method = RequestMethod.GET)
	public ModelAndView showPolicyTongJi() throws ControllerException {
		ModelAndView mav = new ModelAndView("payment/settlementfee");
		return mav;
	}

	// 各应用平台手续费结算管理 页面 列表查看
	@RequestMapping(value = "initsettlementfeelist", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> initSettlementFeeList(
			@ModelAttribute PagingParams para,
			@ModelAttribute CashierModel cashierModel)
			throws ControllerException {
		if (cashierModel != null) {
			if (cashierModel.getPlatformName() != null && cashierModel.getPlatformName().equals("")) {
				cashierModel.setPlatformName(null);
			}
			if (cashierModel.getStatementStatus() != null && cashierModel.getStatementStatus().equals("")) {
				cashierModel.setStatementStatus(null);
			}
		}

		Map<String, Object> map = BeanUtils.toMap(cashierModel, para);
		return settlementservice.selectSettleAppPlatformList(map);
	}

	// 跳转到结算轨迹查看页面
	@RequestMapping(value = "settlementDetail", method = RequestMethod.GET)
	@ResponseBody
	public ModelAndView toBeDetailQuery(@ModelAttribute PagingParams para,@ModelAttribute CashierModel cashierModel)
			throws ControllerException {
		PMAppplatform pmappplatform = settlementservice.getplatformList(cashierModel.getAppid());
		ModelAndView mav = new ModelAndView("payment/settlementdetail");
		mav.addObject("appid", cashierModel.getAppid());
		mav.addObject("platformName", pmappplatform.getPlatformName());
		return mav;
	}
	//结算轨迹查看页面列表查询
	@RequestMapping(value = "initSettleDetaillist", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> initTaskApplList(@ModelAttribute PagingParams para,@ModelAttribute CashierModel cashierModel)
			throws ControllerException {
		if (cashierModel != null) {
			if (cashierModel.getId() != null && cashierModel.getId().equals("")) {
				cashierModel.setId(null);
			}
			if (cashierModel.getAppid() != null && cashierModel.getAppid().equals("")) {
				cashierModel.setAppid(null);
			}
			if (cashierModel.getStatementStatus() != null && cashierModel.getStatementStatus().equals("")) {
				cashierModel.setStatementStatus(null);
			}
			if (cashierModel.getSettleDate() != null && cashierModel.getSettleDate().equals("")) {
				cashierModel.setSettleDate(null);
			}
			if (cashierModel.getOrderid() != null && cashierModel.getOrderid().equals("")) {
				cashierModel.setOrderid(null);
			}
			if (cashierModel.getSettlementInterval() != null && cashierModel.getSettlementInterval().equals("")) {
				cashierModel.setSettlementInterval(null);
			}
		}

		Map<String, Object> map = BeanUtils.toMap(cashierModel, para);
		return settlementservice.selectSettlementList(map);
	}
	//结算处理,判断是否存在结算订单，
	@RequestMapping(value = "checksettle", method = RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> checkSettlement(HttpServletRequest request,@ModelAttribute CashierModel cashierModel)
				throws ControllerException {
		return settlementservice.checkSettlement(cashierModel);
	}
	//跳转到 结算处理页面
	@RequestMapping(value = "treatmentDetail", method = RequestMethod.GET)
	@ResponseBody
	public ModelAndView toBeTreatmentDetail(@ModelAttribute PagingParams para,@ModelAttribute CashierModel cashierModel)
			throws ControllerException {
		ModelAndView mav = new ModelAndView("payment/treatmentDetail");
		String settleTotalfee = settlementservice.getStatementStatus(cashierModel.getAppid(),cashierModel.getSettleMonth());//应结金额
		settleTotalfee = StringUtil.isEmpty(settleTotalfee)?"0":settleTotalfee;
		PMSettleCase pmSettleCase =settlecaseservice.getCaseAndAttach(cashierModel.getAppid(),cashierModel.getSettleMonth());//得到结算情况
		String settlementCard = settlementservice.getSettlementCard(cashierModel.getAppid(),cashierModel.getSettleMonth());//得到应用平台的银行卡号
		if(StringUtil.isEmpty(pmSettleCase)){//为空时，则表示未结算过，信息全是带过来的
			String statementStatus="";
			if(StringUtil.isEmpty(settleTotalfee)){
				statementStatus="已结";
			}else{
				if(Long.parseLong(settleTotalfee)>0){
					statementStatus="应结";
				}else{
					statementStatus="已结";
				}
			}
			mav.addObject("id", "");
			mav.addObject("appid", cashierModel.getAppid());
			mav.addObject("settleMonth", cashierModel.getSettleMonth());
			mav.addObject("statementStatus", statementStatus);
			mav.addObject("settleTotalfee", new DecimalFormat("#,##0.00").format(new BigDecimal(settleTotalfee).movePointLeft(2)));
			mav.addObject("settlementCard", settlementCard);
			mav.addObject("attachdiv", "");
		}else{//不为空时，则表示结算过，信息全是查询出来的
			if(!StringUtil.isEmpty(pmSettleCase.getSettleTotalfee())&&Integer.parseInt(pmSettleCase.getSettleTotalfee())!=Integer.parseInt(settleTotalfee)){
				mav.addObject("settleTotalfee", new DecimalFormat("#,##0.00").format(new BigDecimal(settleTotalfee).movePointLeft(2)));
			}else{
				mav.addObject("settleTotalfee", new DecimalFormat("#,##0.00").format(new BigDecimal(pmSettleCase.getSettleTotalfee()).movePointLeft(2)));
			}
			mav.addObject("id", pmSettleCase.getId());
			mav.addObject("appid", pmSettleCase.getAppId());
			mav.addObject("settleMonth", pmSettleCase.getSettleDate());
			mav.addObject("statementStatus", "0".equals(pmSettleCase.getStatus())?"应结":"已结");
			mav.addObject("settlementCard", StringUtil.isEmpty(pmSettleCase.getSettlementCard())?settlementCard:pmSettleCase.getSettlementCard());
			String div = settleAttachservice.assemblySettleAttachDIV(pmSettleCase.getId());
			String settlementfee = new DecimalFormat("#,##0.00").format(new BigDecimal(
					StringUtil.isEmpty(pmSettleCase.getSettlementTotalfee())?"0":pmSettleCase.getSettlementTotalfee()).movePointLeft(2));
			mav.addObject("settlementTotalfee", "0.00".equals(settlementfee)?"":settlementfee);
			mav.addObject("attachdiv", div);
		}
		return mav;
	}
		//保存结算情况和上传附件功能
		@RequestMapping(value = "saveCaseAndAttach", method = RequestMethod.POST)
		@ResponseBody
		public Map<String,Object> saveCaseAndAttach(@RequestParam(value = "uploadfile") MultipartFile file,HttpServletRequest request,
				@ModelAttribute PMSettleCase pmSettleCase,HttpSession session)
					throws ControllerException {
			INSCUser loginUser = (INSCUser) session.getAttribute("insc_user");
			return settlecaseservice.saveCaseAndAttach(pmSettleCase,file,loginUser);
		}
		//删除上传附件功能
		@RequestMapping(value = "deleteattach", method = RequestMethod.POST)
		@ResponseBody
		public Map<String,Object> deleteAttach(HttpServletRequest request,@ModelAttribute PMSettleAttach pmSettleAttach)
					throws ControllerException {
			return settleAttachservice.deleteAttach(pmSettleAttach,request);
		}
		//保存结算情况的【银行账户】和【结算金额】
		@RequestMapping(value = "savesettlecase", method = RequestMethod.POST)
		@ResponseBody
		public Map<String,Object> saveSettleCase(HttpServletRequest request,@ModelAttribute PMSettleCase pmSettleCase,HttpSession session)
					throws ControllerException {
			INSCUser loginUser = (INSCUser) session.getAttribute("insc_user");
			return settlecaseservice.saveSettleCase(pmSettleCase,loginUser);
		}

}
