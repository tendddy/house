package com.cninsure.payment.util;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.cninsure.core.tools.util.ValidateUtil;
import com.cninsure.core.utils.LogUtil;
import com.cninsure.core.utils.StringUtil;
import com.qcloud.cos.COSClient;
import com.qcloud.cos.ClientConfig;
import com.qcloud.cos.request.CreateFolderRequest;
import com.qcloud.cos.request.DelFileRequest;
import com.qcloud.cos.request.DelFolderRequest;
import com.qcloud.cos.request.GetFileLocalRequest;
import com.qcloud.cos.request.ListFolderRequest;
import com.qcloud.cos.request.MoveFileRequest;
import com.qcloud.cos.request.StatFileRequest;
import com.qcloud.cos.request.StatFolderRequest;
import com.qcloud.cos.request.UpdateFileRequest;
import com.qcloud.cos.request.UpdateFolderRequest;
import com.qcloud.cos.request.UploadFileRequest;
import com.qcloud.cos.sign.Credentials;

/**
 * COS对象存储服务工具类 。官方文档地址：https://www.qcloud.com/document/product/436/6273
 * 
 * @author tongchang
 *
 */
public class CosUtil {

	private static final long APPID = Long.valueOf(ValidateUtil.getConfigValue("cos.APP_ID"));
	private static final String SECRETID = ValidateUtil.getConfigValue("cos.secretID");
	private static final String SECRETKEY = ValidateUtil.getConfigValue("cos.secretKey");
	private static final String BUCKET_NAME = ValidateUtil.getConfigValue("cos.bucketName");
	private static final String BUCKET_REGION = ValidateUtil.getConfigValue("cos.bucketRegion");

	/**
	 * 使用指定的COS用户信息创建一个新的COSClient
	 * 
	 * @param appId
	 * @param secretId
	 * @param secretKey
	 * @param clientConfig
	 * @return
	 */
	public static COSClient createNewClient(long appId, String secretId, String secretKey, ClientConfig clientConfig)
	{
		// 初始化秘钥信息
		Credentials cred = new Credentials(appId, secretId, secretKey);
		// 初始化cosClient
		COSClient cosClient = new COSClient(clientConfig, cred);
		return cosClient;
	}

	private static COSClient getDefaultClient()
	{
		if (StringUtil.isEmpty(APPID) || StringUtil.isEmpty(SECRETID) || StringUtil.isEmpty(SECRETKEY)
				|| StringUtil.isEmpty(BUCKET_REGION))
		{
			throw new RuntimeException("config.properties文件没有配置COS用户信息！");
		}
		// 初始化客户端配置
		ClientConfig clientConfig = new ClientConfig();
		// 设置bucket所在的区域，比如华南园区：gz； 华北园区：tj；华东园区：sh ；
		clientConfig.setRegion(BUCKET_REGION);
		return createNewClient(APPID, SECRETID, SECRETKEY, clientConfig);
	}

	/**
	 * 上传文件
	 * 
	 * @param cosPath
	 *            cos路径, 必须从bucket下的根/开始，文件路径不能以/结尾, 例如 /mytest/demo.txt
	 * @param localPath
	 *            通过磁盘文件上传的本地绝对路径
	 * @return {'code':$code, 'message':$mess, 'data':$data}, code为0表示成功,
	 *         message为SUCCESS或者失败原因, data中包含相关的属性
	 */
	public static JSONObject uploadFile(String cosPath, String localPath)
	{
		COSClient cosClient = getDefaultClient();
		try
		{
			UploadFileRequest uploadFileRequest = new UploadFileRequest(BUCKET_NAME, cosPath, localPath);
			String uploadFileRet = cosClient.uploadFile(uploadFileRequest);
			JSONObject json = parseResult(uploadFileRet);
			return json;
		}
		catch (Exception e)
		{
			LogUtil.warn(e);
			JSONObject json = new JSONObject();
			json.put("code", "-9999");
			json.put("message", "COS异常！");
			return json;
		}
		finally
		{
			if (cosClient != null)
			{
				cosClient.shutdown();
			}
		}
	}

	/**
	 * 上传文件
	 * 
	 * @param cosPath
	 *            cos路径, 必须从bucket下的根/开始，文件路径不能以/结尾, 例如 /mytest/demo.txt
	 * @param contentBufer
	 *            通过内存上传的buffer内容
	 * @return {'code':$code, 'message':$mess, 'data':$data}, code为0表示成功,
	 *         message为SUCCESS或者失败原因, data中包含相关的属性
	 */
	public static JSONObject uploadFile(String cosPath, byte[] contentBufer)
	{
		COSClient cosClient = getDefaultClient();
		try
		{
			UploadFileRequest uploadFileRequest = new UploadFileRequest(BUCKET_NAME, cosPath, contentBufer);
			String uploadFileRet = cosClient.uploadFile(uploadFileRequest);
			JSONObject json = parseResult(uploadFileRet);
			return json;
		}
		catch (Exception e)
		{
			LogUtil.warn(e);
			JSONObject json = new JSONObject();
			json.put("code", "-9999");
			json.put("message", "COS异常！");
			return json;
		}
		finally
		{
			if (cosClient != null)
			{
				cosClient.shutdown();
			}
		}
	}

	/**
	 * 下载文件
	 * 
	 * @param cosPath
	 *            cos路径, 必须从bucket下的根/开始，文件路径不能以/结尾, 例如 /mytest/demo.txt
	 * @param localPath
	 *            要下载到的本地路径
	 * @return {'code':$code, 'message':$mess, 'data':$data}, code为0表示成功,
	 *         message为SUCCESS或者失败原因, data中包含相关的属性
	 */
	public static JSONObject downloadFile(String cosPath, String localPath)
	{
		COSClient cosClient = getDefaultClient();
		try
		{
			GetFileLocalRequest getFileLocalRequest = new GetFileLocalRequest(BUCKET_NAME, cosPath, localPath);
			getFileLocalRequest.setUseCDN(false);
			String getFileResult = cosClient.getFileLocal(getFileLocalRequest);
			JSONObject json = parseResult(getFileResult);
			return json;
		}
		catch (Exception e)
		{
			LogUtil.warn(e);
			JSONObject json = new JSONObject();
			json.put("code", "-9999");
			json.put("message", "COS异常！");
			return json;
		}
		finally
		{
			if (cosClient != null)
			{
				cosClient.shutdown();
			}
		}
	}

	/**
	 * 移动文件
	 * 
	 * @param cosPath
	 *            cos路径, 必须从bucket下的根/开始，文件路径不能以/结尾, 例如 /mytest/demo.txt
	 * @param dstCosPath
	 *            移动文件的目标地址，必须从bucket下的根/开始，文件路径不能以/结尾，例如/mytest/demo.txt.move
	 * @return {'code':$code, 'message':$mess, 'data':$data}, code为0表示成功,
	 *         message为SUCCESS或者失败原因, data中包含相关的属性
	 */
	public static JSONObject moveFile(String cosPath, String dstCosPath)
	{
		COSClient cosClient = getDefaultClient();
		try
		{
			MoveFileRequest moveRequest = new MoveFileRequest(BUCKET_NAME, cosPath, dstCosPath);
			String moveFileResult = cosClient.moveFile(moveRequest);
			JSONObject json = parseResult(moveFileResult);
			return json;
		}
		catch (Exception e)
		{
			LogUtil.warn(e);
			JSONObject json = new JSONObject();
			json.put("code", "-9999");
			json.put("message", "COS异常！");
			return json;
		}
		finally
		{
			if (cosClient != null)
			{
				cosClient.shutdown();
			}
		}

	}

	/**
	 * 获取文件属性
	 * 
	 * @param cosPath
	 *            cos路径, 必须从bucket下的根/开始，文件路径不能以/结尾, 例如 /mytest/demo.txt
	 * @return {'code':$code, 'message':$mess, 'data':$data}, code为0表示成功,
	 *         message为SUCCESS或者失败原因, data中包含相关的属性
	 */
	public static JSONObject statFile(String cosPath)
	{

		COSClient cosClient = getDefaultClient();
		try
		{
			StatFileRequest statFileRequest = new StatFileRequest(BUCKET_NAME, cosPath);
			String statFileRet = cosClient.statFile(statFileRequest);
			JSONObject json = parseResult(statFileRet);
			return json;
		}
		catch (Exception e)
		{
			LogUtil.warn(e);
			JSONObject json = new JSONObject();
			json.put("code", "-9999");
			json.put("message", "COS异常！");
			return json;
		}
		finally
		{
			if (cosClient != null)
			{
				cosClient.shutdown();
			}
		}

	}

	/**
	 * 更新文件属性
	 * 
	 * @param request
	 *            更新文件属性请求
	 * @return {'code':$code, 'message':$mess}, code为0表示成功,
	 *         message为SUCCESS或者失败原因
	 */
	public static JSONObject updateFile(UpdateFileRequest request)
	{

		COSClient cosClient = getDefaultClient();
		try
		{
			String updateFileRet = cosClient.updateFile(request);
			JSONObject json = parseResult(updateFileRet);
			return json;
		}
		catch (Exception e)
		{
			LogUtil.warn(e);
			JSONObject json = new JSONObject();
			json.put("code", "-9999");
			json.put("message", "COS异常！");
			return json;
		}
		finally
		{
			if (cosClient != null)
			{
				cosClient.shutdown();
			}
		}

	}

	/**
	 * 删除文件
	 * 
	 * @param cosPath
	 *            cos路径, 必须从bucket下的根/开始，文件路径不能以/结尾, 例如 /mytest/demo.txt
	 * @return {'code':$code, 'message':$mess}, code为0表示成功,
	 *         message为SUCCESS或者失败原因
	 */
	public static JSONObject delFile(String cosPath)
	{

		COSClient cosClient = getDefaultClient();
		try
		{
			DelFileRequest delFileRequest = new DelFileRequest(BUCKET_NAME, cosPath);
			String delFileRet = cosClient.delFile(delFileRequest);
			JSONObject json = parseResult(delFileRet);
			return json;
		}
		catch (Exception e)
		{
			LogUtil.warn(e);
			JSONObject json = new JSONObject();
			json.put("code", "-9999");
			json.put("message", "COS异常！");
			return json;
		}
		finally
		{
			if (cosClient != null)
			{
				cosClient.shutdown();
			}
		}

	}

	/**
	 * 创建目录
	 * 
	 * @param cosPath
	 *            cos路径, 必须从bucket下的根/开始，目录路径必须以/结尾, 例如 /mytest/dir/
	 * @param bizAttr
	 *            目录的备注，主要用于对目录用途的描述
	 * @return {'code':$code, 'message':$mess}, code为0表示成功,
	 *         message为SUCCESS或者失败原因
	 */
	public static JSONObject createFolder(String cosPath, String bizAttr)
	{

		COSClient cosClient = getDefaultClient();
		try
		{
			CreateFolderRequest createFolderRequest = new CreateFolderRequest(BUCKET_NAME, cosPath, bizAttr);
			String createFolderRet = cosClient.createFolder(createFolderRequest);
			JSONObject json = parseResult(createFolderRet);
			return json;
		}
		catch (Exception e)
		{
			LogUtil.warn(e);
			JSONObject json = new JSONObject();
			json.put("code", "-9999");
			json.put("message", "COS异常！");
			return json;
		}
		finally
		{
			if (cosClient != null)
			{
				cosClient.shutdown();
			}
		}

	}

	/**
	 * 获取目录属性
	 * 
	 * @param cosPath
	 *            cos路径, 必须从bucket下的根/开始，目录路径必须以/结尾, 例如 /mytest/dir/
	 * @return {'code':$code, 'message':$mess, 'data':$data}, code为0表示成功,
	 *         message为SUCCESS或者失败原因, data中包含相关的属性
	 */
	public static JSONObject statFolder(String cosPath)
	{

		COSClient cosClient = getDefaultClient();
		try
		{
			StatFolderRequest statFolderRequest = new StatFolderRequest(BUCKET_NAME, cosPath);
			String statFolderRet = cosClient.statFolder(statFolderRequest);
			JSONObject json = parseResult(statFolderRet);
			return json;
		}
		catch (Exception e)
		{
			LogUtil.warn(e);
			JSONObject json = new JSONObject();
			json.put("code", "-9999");
			json.put("message", "COS异常！");
			return json;
		}
		finally
		{
			if (cosClient != null)
			{
				cosClient.shutdown();
			}
		}

	}

	/**
	 * 更新目录属性
	 * 
	 * @param cosPath
	 *            cos路径, 必须从bucket下的根/开始，目录路径必须以/结尾, 例如 /mytest/dir/
	 * @param bizAttr
	 *            目录的备注，主要用于对目录用途的描述
	 * @return {'code':$code, 'message':$mess}, code为0表示成功,
	 *         message为SUCCESS或者失败原因
	 */
	public static JSONObject updateFolder(String cosPath, String bizAttr)
	{

		COSClient cosClient = getDefaultClient();
		try
		{
			UpdateFolderRequest updateFolderRequest = new UpdateFolderRequest(BUCKET_NAME, cosPath);
			updateFolderRequest.setBizAttr(bizAttr);
			String updateFolderRet = cosClient.updateFolder(updateFolderRequest);
			JSONObject json = parseResult(updateFolderRet);
			return json;
		}
		catch (Exception e)
		{
			LogUtil.warn(e);
			JSONObject json = new JSONObject();
			json.put("code", "-9999");
			json.put("message", "COS异常！");
			return json;
		}
		finally
		{
			if (cosClient != null)
			{
				cosClient.shutdown();
			}
		}

	}

	/**
	 * 获取目录列表
	 * 
	 * @param cosPath
	 *            cos路径, 必须从bucket下的根/开始，目录路径必须以/结尾, 例如 /mytest/dir/
	 * @return {'code':$code, 'message':$mess, 'data':$data}, code为0表示成功,
	 *         message为SUCCESS或者失败原因, data中包含成员列表
	 */
	public static JSONObject listFolder(String cosPath)
	{

		COSClient cosClient = getDefaultClient();
		try
		{
			ListFolderRequest listFolderRequest = new ListFolderRequest(BUCKET_NAME, cosPath);
			String listFolderRet = cosClient.listFolder(listFolderRequest);
			JSONObject json = parseResult(listFolderRet);
			return json;
		}
		catch (Exception e)
		{
			LogUtil.warn(e);
			JSONObject json = new JSONObject();
			json.put("code", "-9999");
			json.put("message", "COS异常！");
			return json;
		}
		finally
		{
			if (cosClient != null)
			{
				cosClient.shutdown();
			}
		}

	}

	/**
	 * 删除目录
	 * 
	 * @param cosPath
	 *            cos路径, 必须从bucket下的根/开始，目录路径必须以/结尾, 例如 /mytest/dir/
	 * @return {'code':$code, 'message':$mess}, code为0表示成功,
	 *         message为SUCCESS或者失败原因
	 */
	public static JSONObject delFolder(String cosPath)
	{

		COSClient cosClient = getDefaultClient();
		try
		{
			DelFolderRequest delFolderRequest = new DelFolderRequest(BUCKET_NAME, cosPath);
			String delFolderRet = cosClient.delFolder(delFolderRequest);
			JSONObject json = parseResult(delFolderRet);
			return json;
		}
		catch (Exception e)
		{
			LogUtil.warn(e);
			JSONObject json = new JSONObject();
			json.put("code", "-9999");
			json.put("message", "COS异常！");
			return json;
		}
		finally
		{
			if (cosClient != null)
			{
				cosClient.shutdown();
			}
		}

	}

	private static JSONObject parseResult(String result)
	{
		LogUtil.debug(result);
		return JSON.parseObject(result);
	}
}
