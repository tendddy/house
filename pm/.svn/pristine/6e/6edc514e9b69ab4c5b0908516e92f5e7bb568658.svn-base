package com.cninsure.payment.timer.job;



import javax.annotation.Resource;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.Scheduler;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import payment.api.tx.marketorder.Tx1362Request;
import payment.api.tx.marketorder.Tx1362Response;

import com.cninsure.payment.dao.PMBankcardDao;
import com.cninsure.payment.dao.PMLogRecordsDao;
import com.cninsure.payment.dao.PMPaymentDao;
import com.cninsure.payment.entity.PMPayment;
import com.cninsure.payment.util.TxCore;
import com.cninsure.payment.util.quartzUtil;

/**
 * 单笔代收查询
 * 规则：5秒一次轮询90秒 
 * 成功：回写数据库
 * 失败：人工干预 通知管理员处理
 * 
 * 
 */
@Service
public class Tx1362QueryPayResultJob  implements Job    {
	@Resource
	private PMBankcardDao pmBankcardDao;
	@Resource
	private PMPaymentDao pmPaymentDao;
	@Resource
	private PMLogRecordsDao pmLogRecordsDao;
	@Resource
	public  Scheduler sched;
	
	@Value("${tx.institutionID}")
	private String txInstitutionID;
	
	@Override
	public void execute(JobExecutionContext context)throws JobExecutionException {
		
		
		// jobName
		String ProInstanceId_Prvcode = context.getJobDetail().getKey().getName();
		String logId = ProInstanceId_Prvcode.split("_")[1];
		String payProtocolId = ProInstanceId_Prvcode.split("_")[2];
		// 查订单主表信息
		Tx1362Request txRequest = new Tx1362Request();
		txRequest.setInstitutionID(txInstitutionID);
		txRequest.setTxSN(payProtocolId);
		
		String[] respMsg = TxCore.handlerParam(txRequest, "1362", "市场订单单笔代收交易查询");
		Tx1362Response zhongjinResponse = null;
		try {
			zhongjinResponse = new Tx1362Response(respMsg[0], respMsg[1]);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if ("2000".equals(zhongjinResponse.getCode())) {
			
			if (zhongjinResponse.getStatus() == 20) {
				// TODO 超时查询，处理中需要人工干预 暂不处理
			} else if (zhongjinResponse.getStatus() == 30) {
				//接口操作日志状态更新
				pmLogRecordsDao.updateLogStatusById(Long.parseLong(logId));
				PMPayment updateSatusPaymentModel = new PMPayment();	
				updateSatusPaymentModel.setPayProtocolid(payProtocolId);
				updateSatusPaymentModel.setStatus("2");
				pmPaymentDao.updateByPayProtocolIdSelective(updateSatusPaymentModel);
				
				// 取消开始90秒定时任务
				quartzUtil.deleteHistoryJob(sched, ProInstanceId_Prvcode, "timeout1361");
				quartzUtil.deleteHistoryJob(sched, ProInstanceId_Prvcode, "poll1361");
			} else if (zhongjinResponse.getStatus() == 40) {
				// TODO 超时查询，处理中需要人工干预 暂不处理
			}
		} else {
		}
	}
}
