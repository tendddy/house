package com.cninsure.payment.service.impl;

import java.util.Date;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cninsure.core.dao.BaseDao;
import com.cninsure.core.dao.impl.BaseServiceImpl;
import com.cninsure.payment.dao.PMApprateDao;
import com.cninsure.payment.dao.PMPaymentrateDao;
import com.cninsure.payment.dao.PMRatefeeDao;
import com.cninsure.payment.entity.PMApprate;
import com.cninsure.payment.entity.PMPaymentrate;
import com.cninsure.payment.entity.PMRatefee;
import com.cninsure.payment.service.PMRatefeeService;

@Service
@Transactional
public class PMRatefeeServiceImpl extends BaseServiceImpl<PMRatefee,Long> implements
		PMRatefeeService {
	@Resource
	private PMRatefeeDao pmRatefeeDao;
	@Resource
	private PMApprateDao apprateDao;
	@Resource
	private PMPaymentrateDao paymentrateDao;

	@Override
	protected BaseDao<PMRatefee,Long> getBaseDao() {
		return pmRatefeeDao;
	}

	@Override
	public void receivableAppRateFee(long paymentId,long appId, int orderFee,String payType) {
		PMApprate appRateModel = getLestAppRateFee(appId,orderFee);
		
		//先查询再更新
		PMRatefee resultRateModel = pmRatefeeDao.selectByPaymentId(paymentId,payType);
		
		PMRatefee rateModel = new PMRatefee();
		rateModel.setAppReceivableRatefee(appRateModel.getCountRate());
		rateModel.setAppRatefeeStatus("0");
		rateModel.setOrderfee(orderFee);
		rateModel.setPayType(payType);
		rateModel.setPayId(paymentId);
		if(resultRateModel!=null){
			rateModel.setId(resultRateModel.getId());
			rateModel.setModifydate(new Date());
			pmRatefeeDao.updateSelectiveById(rateModel);
		}else{
			rateModel.setCreatedate(new Date());
			rateModel.setModifydate(new Date());
			pmRatefeeDao.insert(rateModel);
		}
		
	}
	
	/**
	 * 应用平台最优手续费
	 * 
	 * @param appId
	 * @param orderFee
	 */
	private PMApprate getLestAppRateFee(long appId, int orderFee){
		PMApprate appRateModel = apprateDao.selectRateByOrderFee(appId,orderFee);
		return appRateModel;
	}
	
	@Override
	public void netReceiptsAppRateFee(long paymentId,long appId, int payFee,String payType) {
		
		PMRatefee resultRateModel = pmRatefeeDao.selectByPaymentId(paymentId,payType);
		
		PMRatefee rateModel = new PMRatefee();
		
		rateModel.setAppRatefeeStatus("0");
		rateModel.setOrderfee(payFee);
		rateModel.setPayType(payType);
		rateModel.setPayId(paymentId);
		if(resultRateModel!=null){
			rateModel.setId(resultRateModel.getId());
			rateModel.setModifydate(new Date());
			rateModel.setAppReceivedRatefee(resultRateModel.getAppReceivableRatefee());
			pmRatefeeDao.updateSelectiveById(rateModel);
		}else{
			rateModel.setCreatedate(new Date());
			rateModel.setModifydate(new Date());
			pmRatefeeDao.insert(rateModel);
		}
	}

	@Override
	public void receivablePaymentRateFee(long paymentId, long payPlatFormId,
			int orderFee,String payType) {
		PMPaymentrate paymentRateModel = getLestPaymentRate(payPlatFormId,orderFee);
		// 先查询再更新
		PMRatefee resultRateModel = pmRatefeeDao.selectByPaymentId(paymentId,payType);

		PMRatefee rateModel = new PMRatefee();
		rateModel.setPaymentReceivableRatefee(paymentRateModel.getCountRate());
		rateModel.setPaymentRatefeeStatus("0");
		rateModel.setOrderfee(orderFee);
		rateModel.setPayType(payType);
		rateModel.setPayId(paymentId);
		if (resultRateModel != null) {
			rateModel.setId(resultRateModel.getId());
			rateModel.setModifydate(new Date());
			pmRatefeeDao.updateSelectiveById(rateModel);
		} else {
			rateModel.setCreatedate(new Date());
			rateModel.setModifydate(new Date());
			pmRatefeeDao.insert(rateModel);
		}

	}
	
	private PMPaymentrate getLestPaymentRate(long payPlatFormId,int orderFee) {
		// 拿到当前订单费用
		PMPaymentrate insideModel = paymentrateDao.getBestRateByPayPlatformId(orderFee,payPlatFormId);
		return insideModel;
	}

	@Override
	public void netReceiptsPaymentRateFee(long paymentId,long payPlatFormId, int payFee,String payType) {
		// 先查询再更新
		PMRatefee resultRateModel = pmRatefeeDao.selectByPaymentId(paymentId,payType);

		PMRatefee rateModel = new PMRatefee();
		rateModel.setPaymentRatefeeStatus("0");
		rateModel.setOrderfee(payFee);
		rateModel.setPayType(payType);
		rateModel.setPayId(paymentId);
		if (resultRateModel != null) {
			rateModel.setId(resultRateModel.getId());
			rateModel.setModifydate(new Date());
			rateModel.setPaymentReceivedRatefee(resultRateModel.getPaymentReceivableRatefee());

			pmRatefeeDao.updateSelectiveById(rateModel);
		} else {
			rateModel.setCreatedate(new Date());
			rateModel.setModifydate(new Date());
			pmRatefeeDao.insert(rateModel);
		}
	}

}