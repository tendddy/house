package com.cninsure.payment.controller.manager;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import payment.tools.util.StringUtil;

import com.cninsure.core.exception.ControllerException;
import com.cninsure.core.utils.BeanUtils;
import com.cninsure.payment.entity.PMLogRecords;
import com.cninsure.payment.entity.PMPayment;
import com.cninsure.payment.model.BindCardModel;
import com.cninsure.payment.model.OrderPaymentModel;
import com.cninsure.payment.model.OrderProductModel;
import com.cninsure.payment.service.PMBankcardService;
import com.cninsure.payment.service.PMPaymentService;
import com.cninsure.system.entity.INSCUser;
import com.common.PagingParams;

@Controller
@RequestMapping("/settlepay/*")
public class SettlePayController {
	@Resource
	private PMBankcardService bankcardService;
	@Resource
	private PMPaymentService paymentService;
	@Autowired
	private HttpServletRequest request;

	/**
	 * 
	 * @return
	 * @throws ControllerException
	 */
	@RequestMapping(value = "list", method = RequestMethod.GET)
	public ModelAndView showPolicyTongJi() throws ControllerException {
		ModelAndView mav = new ModelAndView("payment/settlepay1361");
		return mav;
	}

	@RequestMapping(value = "initsettlepaymentlist", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> initSettlePaymentList(@ModelAttribute PagingParams para,@ModelAttribute OrderPaymentModel orderPaymentModel)
			throws ControllerException {
		if (orderPaymentModel != null) {
			if (orderPaymentModel.getPlatformName() != null && orderPaymentModel.getPlatformName().equals("")) {
				orderPaymentModel.setPlatformName(null);
			}
			if (orderPaymentModel.getAppOrderId() != null && orderPaymentModel.getAppOrderId().equals("")) {
				orderPaymentModel.setAppOrderId(null);
			}
			if (orderPaymentModel.getOrderid() != null && orderPaymentModel.getOrderid().equals("")) {
				orderPaymentModel.setOrderid(null);
			}
			if (orderPaymentModel.getProtocolid() != null && orderPaymentModel.getProtocolid().equals("")) {
				orderPaymentModel.setProtocolid(null);
			}
			if (orderPaymentModel.getPayProtocolid() != null && orderPaymentModel.getPayProtocolid().equals("")) {
				orderPaymentModel.setPayProtocolid(null);
			}
			if (orderPaymentModel.getOrderfee() != null && orderPaymentModel.getOrderfee().equals("")) {
				orderPaymentModel.setOrderfee(null);
			}
			if (orderPaymentModel.getAppUserId() != null && orderPaymentModel.getAppUserId().equals("")) {
				orderPaymentModel.setAppUserId(null);
			}
			if (orderPaymentModel.getStatus() != null && orderPaymentModel.getStatus().equals("")) {
				orderPaymentModel.setStatus(null);
			}
			if (orderPaymentModel.getStartdate() != null && orderPaymentModel.getStartdate().equals("")) {
				orderPaymentModel.setStartdate(null);
			}
			if (orderPaymentModel.getEnddate() != null && orderPaymentModel.getEnddate().equals("")) {
				orderPaymentModel.setEnddate(null);
			}
			if(StringUtil.isNotEmpty(orderPaymentModel.getStartdate())){
				orderPaymentModel.setStartdate(orderPaymentModel.getStartdate().replace("-", "")+"000000");
			}
			if(StringUtil.isNotEmpty(orderPaymentModel.getEnddate())){
				orderPaymentModel.setEnddate(orderPaymentModel.getEnddate().replace("-", "")+"235959");
			}
			if (StringUtil.isNotEmpty(orderPaymentModel.getOrderfee())) {
				orderPaymentModel.setOrderfee(new DecimalFormat("######").format(new BigDecimal(orderPaymentModel.getOrderfee()).movePointRight(2)));
			}
		}

		Map<String, Object> map = BeanUtils.toMap(orderPaymentModel, para);
		return paymentService.selectSettlePayment1361List(map);
	}

	// 跳转到绑卡日志信息查看页面
	@RequestMapping(value = "settlepay1361Detail", method = RequestMethod.GET)
	@ResponseBody
	public ModelAndView settlePayment1361Detail(@ModelAttribute PagingParams para,@ModelAttribute  OrderPaymentModel orderPaymentModel)
			throws ControllerException {
		Map<String, Object> map = BeanUtils.toMap(orderPaymentModel, para);
		map.put("interface_name", "市场订单单笔代收");
		PMLogRecords pmLogRecords = paymentService.getLogRecordsInfoByPaymentID(map);
		ModelAndView mav = new ModelAndView("payment/settlepay1361Detail");
		mav.addObject("paymentid", orderPaymentModel.getPaymentid());
		if(pmLogRecords!=null){
			mav.addObject("request_params", pmLogRecords.getRequestParams());
			mav.addObject("response_params", pmLogRecords.getResponseParams());
			mav.addObject("id", pmLogRecords.getId());
			mav.addObject("remark", pmLogRecords.getRemark());
		}else{
			mav.addObject("request_params", null);
			mav.addObject("response_params", null);
			mav.addObject("id", null);
			mav.addObject("remark", null);
		}
		return mav;
	}
	/**
	 * 再次访问
	 * @return
	 */
	@RequestMapping(value = "visitagain", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> visitAgain(@ModelAttribute PagingParams para,@ModelAttribute BindCardModel bindcardModel,
			HttpServletRequest request,HttpSession session) {
		INSCUser loginUser = (INSCUser) session.getAttribute("insc_user");
		Map<String, Object> result = new HashMap<String, Object>();
		Map<String, Object> map = BeanUtils.toMap(bindcardModel, para);
		map.put("interface_name", "市场订单单笔代收");
		result = paymentService.visitAgain1361(map,loginUser,request);
		return result;
	}
	/**
	 * 核查1361是否支付成功
	 * @return
	 */
	@RequestMapping(value = "checkpaysucc", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> checkPaySucc(@ModelAttribute PagingParams para,@ModelAttribute OrderPaymentModel orderPaymentModel) {
		Map<String, Object> result = new HashMap<String, Object>();
		Map<String, Object> map = BeanUtils.toMap(orderPaymentModel, para);
		PMPayment paymentModel = paymentService.checkPaySucc(map);
		if("0".equals(paymentModel.getStatus())){
			result.put("status", "WILL");
		}else if("1".equals(paymentModel.getStatus())){
			result.put("status", "BEING");
		}else if("2".equals(paymentModel.getStatus())){
			result.put("status", "OK");
		}else if("3".equals(paymentModel.getStatus())){
			result.put("status", "NO");
		}
		return result;
	}
	
	// 跳转到绑卡日志信息查看页面
	@RequestMapping(value = "settlepay1341", method = RequestMethod.GET)
	@ResponseBody
	public ModelAndView settlePayment1341(@ModelAttribute PagingParams para,@ModelAttribute  OrderPaymentModel orderPaymentModel)
			throws ControllerException {
		ModelAndView mav = new ModelAndView("payment/settlepay1341");
		mav.addObject("paymentid", orderPaymentModel.getPaymentid());
		return mav;
	}
	
	
	@RequestMapping(value = "initsettleproductlist", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> initSettleProductList(@ModelAttribute PagingParams para,@ModelAttribute OrderProductModel orderProductModel)
			throws ControllerException {
		if (orderProductModel != null) {
			if (orderProductModel.getAppOrderId() != null && orderProductModel.getAppOrderId().equals("")) {
				orderProductModel.setAppOrderId(null);
			}
			if (orderProductModel.getOrderid() != null && orderProductModel.getOrderid().equals("")) {
				orderProductModel.setOrderid(null);
			}
			if (orderProductModel.getAppOrderName() != null && orderProductModel.getAppOrderName().equals("")) {
				orderProductModel.setAppOrderName(null);
			}
			if (orderProductModel.getStatementProtocolid() != null && orderProductModel.getStatementProtocolid().equals("")) {
				orderProductModel.setStatementProtocolid(null);
			}
			if (orderProductModel.getAccountType() != null && orderProductModel.getAccountType().equals("")) {
				orderProductModel.setAccountType(null);
			}
			if (orderProductModel.getAccountNumber() != null && orderProductModel.getAccountNumber().equals("")) {
				orderProductModel.setAccountNumber(null);
			}
			if (orderProductModel.getStatus() != null && orderProductModel.getStatus().equals("")) {
				orderProductModel.setStatus(null);
			}
			if (orderProductModel.getStatementStatus() != null && orderProductModel.getStatementStatus().equals("")) {
				orderProductModel.setStatementStatus(null);
			}
		}

		Map<String, Object> map = BeanUtils.toMap(orderProductModel, para);
		return paymentService.selectSettleProduct1341List(map);
	}
	// 跳转到绑卡日志信息查看页面
		@RequestMapping(value = "settlepay1341Detail", method = RequestMethod.GET)
		@ResponseBody
		public ModelAndView settlePayment1341Detail(@ModelAttribute PagingParams para,@ModelAttribute OrderProductModel orderProductModel)
				throws ControllerException {
			Map<String, Object> map = BeanUtils.toMap(orderProductModel, para);
			map.put("interface_name", "市场订单结算");
			PMLogRecords pmLogRecords = paymentService.getLogRecordsInfoByPaymentIDandProductID(map);
			ModelAndView mav = new ModelAndView("payment/settlepay1341Detail");
			mav.addObject("paymentid", orderProductModel.getPaymentid());
			mav.addObject("productId", orderProductModel.getProductId());
			if(pmLogRecords!=null){
				mav.addObject("request_params", pmLogRecords.getRequestParams());
				mav.addObject("response_params", pmLogRecords.getResponseParams());
				mav.addObject("logid", pmLogRecords.getId());
				mav.addObject("remark", pmLogRecords.getRemark());
			}else{
				mav.addObject("request_params", null);
				mav.addObject("response_params", null);
				mav.addObject("logid", null);
				mav.addObject("remark", null);
			}
			return mav;
		}
		
		/**
		 * 再次访问
		 * @return
		 */
		@RequestMapping(value = "visitagain1341", method = RequestMethod.POST)
		@ResponseBody
		public Map<String, Object> visitAgain1341(@ModelAttribute PagingParams para,@ModelAttribute OrderProductModel orderProductModel,
				HttpServletRequest request,HttpSession session) {
			INSCUser loginUser = (INSCUser) session.getAttribute("insc_user");
			Map<String, Object> result = new HashMap<String, Object>();
			Map<String, Object> map = BeanUtils.toMap(orderProductModel, para);
			map.put("interface_name", "市场订单结算");
			result = paymentService.visitAgain1341(map,loginUser,request);
			return result;
		}
}
